/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MapD_H
#define MapD_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "mapd_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MapDIf {
 public:
  virtual ~MapDIf() {}
  virtual void connect(TSessionId& _return, const std::string& user, const std::string& passwd, const std::string& dbname) = 0;
  virtual void disconnect(const TSessionId& session) = 0;
  virtual void switch_database(const TSessionId& session, const std::string& dbname) = 0;
  virtual void get_server_status(TServerStatus& _return, const TSessionId& session) = 0;
  virtual void get_status(std::vector<TServerStatus> & _return, const TSessionId& session) = 0;
  virtual void get_hardware_info(TClusterHardwareInfo& _return, const TSessionId& session) = 0;
  virtual void get_tables(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_physical_tables(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_views(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_tables_meta(std::vector<TTableMeta> & _return, const TSessionId& session) = 0;
  virtual void get_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) = 0;
  virtual void get_internal_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) = 0;
  virtual void get_users(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_databases(std::vector<TDBInfo> & _return, const TSessionId& session) = 0;
  virtual void get_version(std::string& _return) = 0;
  virtual void start_heap_profile(const TSessionId& session) = 0;
  virtual void stop_heap_profile(const TSessionId& session) = 0;
  virtual void get_heap_profile(std::string& _return, const TSessionId& session) = 0;
  virtual void get_memory(std::vector<TNodeMemoryInfo> & _return, const TSessionId& session, const std::string& memory_level) = 0;
  virtual void clear_cpu_memory(const TSessionId& session) = 0;
  virtual void clear_gpu_memory(const TSessionId& session) = 0;
  virtual void set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch) = 0;
  virtual void set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch) = 0;
  virtual int32_t get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id) = 0;
  virtual int32_t get_table_epoch_by_name(const TSessionId& session, const std::string& table_name) = 0;
  virtual void get_session_info(TSessionInfo& _return, const TSessionId& session) = 0;
  virtual void sql_execute(TQueryResult& _return, const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n) = 0;
  virtual void sql_execute_df(TDataFrame& _return, const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n) = 0;
  virtual void sql_execute_gdf(TDataFrame& _return, const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n) = 0;
  virtual void deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id) = 0;
  virtual void interrupt(const TSessionId& session) = 0;
  virtual void sql_validate(TTableDescriptor& _return, const TSessionId& session, const std::string& query) = 0;
  virtual void get_completion_hints(std::vector< ::TCompletionHint> & _return, const TSessionId& session, const std::string& sql, const int32_t cursor) = 0;
  virtual void set_execution_mode(const TSessionId& session, const TExecuteMode::type mode) = 0;
  virtual void render_vega(TRenderResult& _return, const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce) = 0;
  virtual void get_result_row_for_pixel(TPixelTableRowResult& _return, const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce) = 0;
  virtual void get_frontend_view(TFrontendView& _return, const TSessionId& session, const std::string& view_name) = 0;
  virtual void get_frontend_views(std::vector<TFrontendView> & _return, const TSessionId& session) = 0;
  virtual void create_frontend_view(const TSessionId& session, const std::string& view_name, const std::string& view_state, const std::string& image_hash, const std::string& view_metadata) = 0;
  virtual void delete_frontend_view(const TSessionId& session, const std::string& view_name) = 0;
  virtual void get_dashboard(TDashboard& _return, const TSessionId& session, const int32_t dashboard_id) = 0;
  virtual void get_dashboards(std::vector<TDashboard> & _return, const TSessionId& session) = 0;
  virtual int32_t create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) = 0;
  virtual void replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) = 0;
  virtual void delete_dashboard(const TSessionId& session, const int32_t dashboard_id) = 0;
  virtual void share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role) = 0;
  virtual void unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions) = 0;
  virtual void get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const TSessionId& session, const int32_t dashboard_id) = 0;
  virtual void get_link_view(TFrontendView& _return, const TSessionId& session, const std::string& link) = 0;
  virtual void create_link(std::string& _return, const TSessionId& session, const std::string& view_state, const std::string& view_metadata) = 0;
  virtual void load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows) = 0;
  virtual void load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols) = 0;
  virtual void load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream) = 0;
  virtual void load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows) = 0;
  virtual void detect_column_types(TDetectResult& _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) = 0;
  virtual void create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params) = 0;
  virtual void import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params) = 0;
  virtual void import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params) = 0;
  virtual void import_table_status(TImportStatus& _return, const TSessionId& session, const std::string& import_id) = 0;
  virtual void get_first_geo_file_in_archive(std::string& _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) = 0;
  virtual void get_all_files_in_archive(std::vector<std::string> & _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) = 0;
  virtual void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) = 0;
  virtual void check_table_consistency(TTableMeta& _return, const TSessionId& session, const int32_t table_id) = 0;
  virtual void start_query(TPendingQuery& _return, const TSessionId& session, const std::string& query_ra, const bool just_explain) = 0;
  virtual void execute_first_step(TStepResult& _return, const TPendingQuery& pending_query) = 0;
  virtual void broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id) = 0;
  virtual void start_render_query(TPendingRenderQuery& _return, const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json) = 0;
  virtual void execute_next_render_step(TRenderStepResult& _return, const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data) = 0;
  virtual void insert_data(const TSessionId& session, const TInsertData& insert_data) = 0;
  virtual void checkpoint(const TSessionId& session, const int32_t db_id, const int32_t table_id) = 0;
  virtual void get_table_descriptor(TTableDescriptor& _return, const TSessionId& session, const std::string& table_name) = 0;
  virtual void get_row_descriptor(TRowDescriptor& _return, const TSessionId& session, const std::string& table_name) = 0;
  virtual void get_roles(std::vector<std::string> & _return, const TSessionId& session) = 0;
  virtual void get_db_objects_for_grantee(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& roleName) = 0;
  virtual void get_db_object_privs(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& objectName, const TDBObjectType::type type) = 0;
  virtual void get_all_roles_for_user(std::vector<std::string> & _return, const TSessionId& session, const std::string& userName) = 0;
  virtual bool has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions) = 0;
  virtual void set_license_key(TLicenseInfo& _return, const TSessionId& session, const std::string& key, const std::string& nonce) = 0;
  virtual void get_license_claims(TLicenseInfo& _return, const TSessionId& session, const std::string& nonce) = 0;
};

class MapDIfFactory {
 public:
  typedef MapDIf Handler;

  virtual ~MapDIfFactory() {}

  virtual MapDIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MapDIf* /* handler */) = 0;
};

class MapDIfSingletonFactory : virtual public MapDIfFactory {
 public:
  MapDIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<MapDIf>& iface) : iface_(iface) {}
  virtual ~MapDIfSingletonFactory() {}

  virtual MapDIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MapDIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<MapDIf> iface_;
};

class MapDNull : virtual public MapDIf {
 public:
  virtual ~MapDNull() {}
  void connect(TSessionId& /* _return */, const std::string& /* user */, const std::string& /* passwd */, const std::string& /* dbname */) {
    return;
  }
  void disconnect(const TSessionId& /* session */) {
    return;
  }
  void switch_database(const TSessionId& /* session */, const std::string& /* dbname */) {
    return;
  }
  void get_server_status(TServerStatus& /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_status(std::vector<TServerStatus> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_hardware_info(TClusterHardwareInfo& /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_tables(std::vector<std::string> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_physical_tables(std::vector<std::string> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_views(std::vector<std::string> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_tables_meta(std::vector<TTableMeta> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_table_details(TTableDetails& /* _return */, const TSessionId& /* session */, const std::string& /* table_name */) {
    return;
  }
  void get_internal_table_details(TTableDetails& /* _return */, const TSessionId& /* session */, const std::string& /* table_name */) {
    return;
  }
  void get_users(std::vector<std::string> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_databases(std::vector<TDBInfo> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_version(std::string& /* _return */) {
    return;
  }
  void start_heap_profile(const TSessionId& /* session */) {
    return;
  }
  void stop_heap_profile(const TSessionId& /* session */) {
    return;
  }
  void get_heap_profile(std::string& /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_memory(std::vector<TNodeMemoryInfo> & /* _return */, const TSessionId& /* session */, const std::string& /* memory_level */) {
    return;
  }
  void clear_cpu_memory(const TSessionId& /* session */) {
    return;
  }
  void clear_gpu_memory(const TSessionId& /* session */) {
    return;
  }
  void set_table_epoch(const TSessionId& /* session */, const int32_t /* db_id */, const int32_t /* table_id */, const int32_t /* new_epoch */) {
    return;
  }
  void set_table_epoch_by_name(const TSessionId& /* session */, const std::string& /* table_name */, const int32_t /* new_epoch */) {
    return;
  }
  int32_t get_table_epoch(const TSessionId& /* session */, const int32_t /* db_id */, const int32_t /* table_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_table_epoch_by_name(const TSessionId& /* session */, const std::string& /* table_name */) {
    int32_t _return = 0;
    return _return;
  }
  void get_session_info(TSessionInfo& /* _return */, const TSessionId& /* session */) {
    return;
  }
  void sql_execute(TQueryResult& /* _return */, const TSessionId& /* session */, const std::string& /* query */, const bool /* column_format */, const std::string& /* nonce */, const int32_t /* first_n */, const int32_t /* at_most_n */) {
    return;
  }
  void sql_execute_df(TDataFrame& /* _return */, const TSessionId& /* session */, const std::string& /* query */, const  ::TDeviceType::type /* device_type */, const int32_t /* device_id */, const int32_t /* first_n */) {
    return;
  }
  void sql_execute_gdf(TDataFrame& /* _return */, const TSessionId& /* session */, const std::string& /* query */, const int32_t /* device_id */, const int32_t /* first_n */) {
    return;
  }
  void deallocate_df(const TSessionId& /* session */, const TDataFrame& /* df */, const  ::TDeviceType::type /* device_type */, const int32_t /* device_id */) {
    return;
  }
  void interrupt(const TSessionId& /* session */) {
    return;
  }
  void sql_validate(TTableDescriptor& /* _return */, const TSessionId& /* session */, const std::string& /* query */) {
    return;
  }
  void get_completion_hints(std::vector< ::TCompletionHint> & /* _return */, const TSessionId& /* session */, const std::string& /* sql */, const int32_t /* cursor */) {
    return;
  }
  void set_execution_mode(const TSessionId& /* session */, const TExecuteMode::type /* mode */) {
    return;
  }
  void render_vega(TRenderResult& /* _return */, const TSessionId& /* session */, const int64_t /* widget_id */, const std::string& /* vega_json */, const int32_t /* compression_level */, const std::string& /* nonce */) {
    return;
  }
  void get_result_row_for_pixel(TPixelTableRowResult& /* _return */, const TSessionId& /* session */, const int64_t /* widget_id */, const TPixel& /* pixel */, const std::map<std::string, std::vector<std::string> > & /* table_col_names */, const bool /* column_format */, const int32_t /* pixelRadius */, const std::string& /* nonce */) {
    return;
  }
  void get_frontend_view(TFrontendView& /* _return */, const TSessionId& /* session */, const std::string& /* view_name */) {
    return;
  }
  void get_frontend_views(std::vector<TFrontendView> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  void create_frontend_view(const TSessionId& /* session */, const std::string& /* view_name */, const std::string& /* view_state */, const std::string& /* image_hash */, const std::string& /* view_metadata */) {
    return;
  }
  void delete_frontend_view(const TSessionId& /* session */, const std::string& /* view_name */) {
    return;
  }
  void get_dashboard(TDashboard& /* _return */, const TSessionId& /* session */, const int32_t /* dashboard_id */) {
    return;
  }
  void get_dashboards(std::vector<TDashboard> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  int32_t create_dashboard(const TSessionId& /* session */, const std::string& /* dashboard_name */, const std::string& /* dashboard_state */, const std::string& /* image_hash */, const std::string& /* dashboard_metadata */) {
    int32_t _return = 0;
    return _return;
  }
  void replace_dashboard(const TSessionId& /* session */, const int32_t /* dashboard_id */, const std::string& /* dashboard_name */, const std::string& /* dashboard_owner */, const std::string& /* dashboard_state */, const std::string& /* image_hash */, const std::string& /* dashboard_metadata */) {
    return;
  }
  void delete_dashboard(const TSessionId& /* session */, const int32_t /* dashboard_id */) {
    return;
  }
  void share_dashboard(const TSessionId& /* session */, const int32_t /* dashboard_id */, const std::vector<std::string> & /* groups */, const std::vector<std::string> & /* objects */, const TDashboardPermissions& /* permissions */, const bool /* grant_role */) {
    return;
  }
  void unshare_dashboard(const TSessionId& /* session */, const int32_t /* dashboard_id */, const std::vector<std::string> & /* groups */, const std::vector<std::string> & /* objects */, const TDashboardPermissions& /* permissions */) {
    return;
  }
  void get_dashboard_grantees(std::vector<TDashboardGrantees> & /* _return */, const TSessionId& /* session */, const int32_t /* dashboard_id */) {
    return;
  }
  void get_link_view(TFrontendView& /* _return */, const TSessionId& /* session */, const std::string& /* link */) {
    return;
  }
  void create_link(std::string& /* _return */, const TSessionId& /* session */, const std::string& /* view_state */, const std::string& /* view_metadata */) {
    return;
  }
  void load_table_binary(const TSessionId& /* session */, const std::string& /* table_name */, const std::vector<TRow> & /* rows */) {
    return;
  }
  void load_table_binary_columnar(const TSessionId& /* session */, const std::string& /* table_name */, const std::vector<TColumn> & /* cols */) {
    return;
  }
  void load_table_binary_arrow(const TSessionId& /* session */, const std::string& /* table_name */, const std::string& /* arrow_stream */) {
    return;
  }
  void load_table(const TSessionId& /* session */, const std::string& /* table_name */, const std::vector<TStringRow> & /* rows */) {
    return;
  }
  void detect_column_types(TDetectResult& /* _return */, const TSessionId& /* session */, const std::string& /* file_name */, const TCopyParams& /* copy_params */) {
    return;
  }
  void create_table(const TSessionId& /* session */, const std::string& /* table_name */, const TRowDescriptor& /* row_desc */, const TFileType::type /* file_type */, const TCreateParams& /* create_params */) {
    return;
  }
  void import_table(const TSessionId& /* session */, const std::string& /* table_name */, const std::string& /* file_name */, const TCopyParams& /* copy_params */) {
    return;
  }
  void import_geo_table(const TSessionId& /* session */, const std::string& /* table_name */, const std::string& /* file_name */, const TCopyParams& /* copy_params */, const TRowDescriptor& /* row_desc */, const TCreateParams& /* create_params */) {
    return;
  }
  void import_table_status(TImportStatus& /* _return */, const TSessionId& /* session */, const std::string& /* import_id */) {
    return;
  }
  void get_first_geo_file_in_archive(std::string& /* _return */, const TSessionId& /* session */, const std::string& /* archive_path */, const TCopyParams& /* copy_params */) {
    return;
  }
  void get_all_files_in_archive(std::vector<std::string> & /* _return */, const TSessionId& /* session */, const std::string& /* archive_path */, const TCopyParams& /* copy_params */) {
    return;
  }
  void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & /* _return */, const TSessionId& /* session */, const std::string& /* file_name */, const TCopyParams& /* copy_params */) {
    return;
  }
  void check_table_consistency(TTableMeta& /* _return */, const TSessionId& /* session */, const int32_t /* table_id */) {
    return;
  }
  void start_query(TPendingQuery& /* _return */, const TSessionId& /* session */, const std::string& /* query_ra */, const bool /* just_explain */) {
    return;
  }
  void execute_first_step(TStepResult& /* _return */, const TPendingQuery& /* pending_query */) {
    return;
  }
  void broadcast_serialized_rows(const  ::TSerializedRows& /* serialized_rows */, const TRowDescriptor& /* row_desc */, const TQueryId /* query_id */) {
    return;
  }
  void start_render_query(TPendingRenderQuery& /* _return */, const TSessionId& /* session */, const int64_t /* widget_id */, const int16_t /* node_idx */, const std::string& /* vega_json */) {
    return;
  }
  void execute_next_render_step(TRenderStepResult& /* _return */, const TPendingRenderQuery& /* pending_render */, const TRenderAggDataMap& /* merged_data */) {
    return;
  }
  void insert_data(const TSessionId& /* session */, const TInsertData& /* insert_data */) {
    return;
  }
  void checkpoint(const TSessionId& /* session */, const int32_t /* db_id */, const int32_t /* table_id */) {
    return;
  }
  void get_table_descriptor(TTableDescriptor& /* _return */, const TSessionId& /* session */, const std::string& /* table_name */) {
    return;
  }
  void get_row_descriptor(TRowDescriptor& /* _return */, const TSessionId& /* session */, const std::string& /* table_name */) {
    return;
  }
  void get_roles(std::vector<std::string> & /* _return */, const TSessionId& /* session */) {
    return;
  }
  void get_db_objects_for_grantee(std::vector<TDBObject> & /* _return */, const TSessionId& /* session */, const std::string& /* roleName */) {
    return;
  }
  void get_db_object_privs(std::vector<TDBObject> & /* _return */, const TSessionId& /* session */, const std::string& /* objectName */, const TDBObjectType::type /* type */) {
    return;
  }
  void get_all_roles_for_user(std::vector<std::string> & /* _return */, const TSessionId& /* session */, const std::string& /* userName */) {
    return;
  }
  bool has_object_privilege(const TSessionId& /* session */, const std::string& /* granteeName */, const std::string& /* ObjectName */, const TDBObjectType::type /* objectType */, const TDBObjectPermissions& /* permissions */) {
    bool _return = false;
    return _return;
  }
  void set_license_key(TLicenseInfo& /* _return */, const TSessionId& /* session */, const std::string& /* key */, const std::string& /* nonce */) {
    return;
  }
  void get_license_claims(TLicenseInfo& /* _return */, const TSessionId& /* session */, const std::string& /* nonce */) {
    return;
  }
};

typedef struct _MapD_connect_args__isset {
  _MapD_connect_args__isset() : user(false), passwd(false), dbname(false) {}
  bool user :1;
  bool passwd :1;
  bool dbname :1;
} _MapD_connect_args__isset;

class MapD_connect_args {
 public:

  MapD_connect_args(const MapD_connect_args&);
  MapD_connect_args& operator=(const MapD_connect_args&);
  MapD_connect_args() : user(), passwd(), dbname() {
  }

  virtual ~MapD_connect_args() throw();
  std::string user;
  std::string passwd;
  std::string dbname;

  _MapD_connect_args__isset __isset;

  void __set_user(const std::string& val);

  void __set_passwd(const std::string& val);

  void __set_dbname(const std::string& val);

  bool operator == (const MapD_connect_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const MapD_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_connect_pargs {
 public:


  virtual ~MapD_connect_pargs() throw();
  const std::string* user;
  const std::string* passwd;
  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_connect_result__isset {
  _MapD_connect_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_connect_result__isset;

class MapD_connect_result {
 public:

  MapD_connect_result(const MapD_connect_result&);
  MapD_connect_result& operator=(const MapD_connect_result&);
  MapD_connect_result() : success() {
  }

  virtual ~MapD_connect_result() throw();
  TSessionId success;
  TMapDException e;

  _MapD_connect_result__isset __isset;

  void __set_success(const TSessionId& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_connect_presult__isset {
  _MapD_connect_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_connect_presult__isset;

class MapD_connect_presult {
 public:


  virtual ~MapD_connect_presult() throw();
  TSessionId* success;
  TMapDException e;

  _MapD_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_disconnect_args__isset {
  _MapD_disconnect_args__isset() : session(false) {}
  bool session :1;
} _MapD_disconnect_args__isset;

class MapD_disconnect_args {
 public:

  MapD_disconnect_args(const MapD_disconnect_args&);
  MapD_disconnect_args& operator=(const MapD_disconnect_args&);
  MapD_disconnect_args() : session() {
  }

  virtual ~MapD_disconnect_args() throw();
  TSessionId session;

  _MapD_disconnect_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_disconnect_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_disconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_disconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_disconnect_pargs {
 public:


  virtual ~MapD_disconnect_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_disconnect_result__isset {
  _MapD_disconnect_result__isset() : e(false) {}
  bool e :1;
} _MapD_disconnect_result__isset;

class MapD_disconnect_result {
 public:

  MapD_disconnect_result(const MapD_disconnect_result&);
  MapD_disconnect_result& operator=(const MapD_disconnect_result&);
  MapD_disconnect_result() {
  }

  virtual ~MapD_disconnect_result() throw();
  TMapDException e;

  _MapD_disconnect_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_disconnect_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_disconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_disconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_disconnect_presult__isset {
  _MapD_disconnect_presult__isset() : e(false) {}
  bool e :1;
} _MapD_disconnect_presult__isset;

class MapD_disconnect_presult {
 public:


  virtual ~MapD_disconnect_presult() throw();
  TMapDException e;

  _MapD_disconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_switch_database_args__isset {
  _MapD_switch_database_args__isset() : session(false), dbname(false) {}
  bool session :1;
  bool dbname :1;
} _MapD_switch_database_args__isset;

class MapD_switch_database_args {
 public:

  MapD_switch_database_args(const MapD_switch_database_args&);
  MapD_switch_database_args& operator=(const MapD_switch_database_args&);
  MapD_switch_database_args() : session(), dbname() {
  }

  virtual ~MapD_switch_database_args() throw();
  TSessionId session;
  std::string dbname;

  _MapD_switch_database_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dbname(const std::string& val);

  bool operator == (const MapD_switch_database_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dbname == rhs.dbname))
      return false;
    return true;
  }
  bool operator != (const MapD_switch_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_switch_database_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_switch_database_pargs {
 public:


  virtual ~MapD_switch_database_pargs() throw();
  const TSessionId* session;
  const std::string* dbname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_switch_database_result__isset {
  _MapD_switch_database_result__isset() : e(false) {}
  bool e :1;
} _MapD_switch_database_result__isset;

class MapD_switch_database_result {
 public:

  MapD_switch_database_result(const MapD_switch_database_result&);
  MapD_switch_database_result& operator=(const MapD_switch_database_result&);
  MapD_switch_database_result() {
  }

  virtual ~MapD_switch_database_result() throw();
  TMapDException e;

  _MapD_switch_database_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_switch_database_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_switch_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_switch_database_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_switch_database_presult__isset {
  _MapD_switch_database_presult__isset() : e(false) {}
  bool e :1;
} _MapD_switch_database_presult__isset;

class MapD_switch_database_presult {
 public:


  virtual ~MapD_switch_database_presult() throw();
  TMapDException e;

  _MapD_switch_database_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_server_status_args__isset {
  _MapD_get_server_status_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_server_status_args__isset;

class MapD_get_server_status_args {
 public:

  MapD_get_server_status_args(const MapD_get_server_status_args&);
  MapD_get_server_status_args& operator=(const MapD_get_server_status_args&);
  MapD_get_server_status_args() : session() {
  }

  virtual ~MapD_get_server_status_args() throw();
  TSessionId session;

  _MapD_get_server_status_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_server_status_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_server_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_server_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_server_status_pargs {
 public:


  virtual ~MapD_get_server_status_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_server_status_result__isset {
  _MapD_get_server_status_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_server_status_result__isset;

class MapD_get_server_status_result {
 public:

  MapD_get_server_status_result(const MapD_get_server_status_result&);
  MapD_get_server_status_result& operator=(const MapD_get_server_status_result&);
  MapD_get_server_status_result() {
  }

  virtual ~MapD_get_server_status_result() throw();
  TServerStatus success;
  TMapDException e;

  _MapD_get_server_status_result__isset __isset;

  void __set_success(const TServerStatus& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_server_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_server_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_server_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_server_status_presult__isset {
  _MapD_get_server_status_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_server_status_presult__isset;

class MapD_get_server_status_presult {
 public:


  virtual ~MapD_get_server_status_presult() throw();
  TServerStatus* success;
  TMapDException e;

  _MapD_get_server_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_status_args__isset {
  _MapD_get_status_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_status_args__isset;

class MapD_get_status_args {
 public:

  MapD_get_status_args(const MapD_get_status_args&);
  MapD_get_status_args& operator=(const MapD_get_status_args&);
  MapD_get_status_args() : session() {
  }

  virtual ~MapD_get_status_args() throw();
  TSessionId session;

  _MapD_get_status_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_status_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_status_pargs {
 public:


  virtual ~MapD_get_status_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_status_result__isset {
  _MapD_get_status_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_status_result__isset;

class MapD_get_status_result {
 public:

  MapD_get_status_result(const MapD_get_status_result&);
  MapD_get_status_result& operator=(const MapD_get_status_result&);
  MapD_get_status_result() {
  }

  virtual ~MapD_get_status_result() throw();
  std::vector<TServerStatus>  success;
  TMapDException e;

  _MapD_get_status_result__isset __isset;

  void __set_success(const std::vector<TServerStatus> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_status_presult__isset {
  _MapD_get_status_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_status_presult__isset;

class MapD_get_status_presult {
 public:


  virtual ~MapD_get_status_presult() throw();
  std::vector<TServerStatus> * success;
  TMapDException e;

  _MapD_get_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_hardware_info_args__isset {
  _MapD_get_hardware_info_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_hardware_info_args__isset;

class MapD_get_hardware_info_args {
 public:

  MapD_get_hardware_info_args(const MapD_get_hardware_info_args&);
  MapD_get_hardware_info_args& operator=(const MapD_get_hardware_info_args&);
  MapD_get_hardware_info_args() : session() {
  }

  virtual ~MapD_get_hardware_info_args() throw();
  TSessionId session;

  _MapD_get_hardware_info_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_hardware_info_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_hardware_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_hardware_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_hardware_info_pargs {
 public:


  virtual ~MapD_get_hardware_info_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_hardware_info_result__isset {
  _MapD_get_hardware_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_hardware_info_result__isset;

class MapD_get_hardware_info_result {
 public:

  MapD_get_hardware_info_result(const MapD_get_hardware_info_result&);
  MapD_get_hardware_info_result& operator=(const MapD_get_hardware_info_result&);
  MapD_get_hardware_info_result() {
  }

  virtual ~MapD_get_hardware_info_result() throw();
  TClusterHardwareInfo success;
  TMapDException e;

  _MapD_get_hardware_info_result__isset __isset;

  void __set_success(const TClusterHardwareInfo& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_hardware_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_hardware_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_hardware_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_hardware_info_presult__isset {
  _MapD_get_hardware_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_hardware_info_presult__isset;

class MapD_get_hardware_info_presult {
 public:


  virtual ~MapD_get_hardware_info_presult() throw();
  TClusterHardwareInfo* success;
  TMapDException e;

  _MapD_get_hardware_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_tables_args__isset {
  _MapD_get_tables_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_tables_args__isset;

class MapD_get_tables_args {
 public:

  MapD_get_tables_args(const MapD_get_tables_args&);
  MapD_get_tables_args& operator=(const MapD_get_tables_args&);
  MapD_get_tables_args() : session() {
  }

  virtual ~MapD_get_tables_args() throw();
  TSessionId session;

  _MapD_get_tables_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_tables_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_tables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_tables_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_tables_pargs {
 public:


  virtual ~MapD_get_tables_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_tables_result__isset {
  _MapD_get_tables_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_tables_result__isset;

class MapD_get_tables_result {
 public:

  MapD_get_tables_result(const MapD_get_tables_result&);
  MapD_get_tables_result& operator=(const MapD_get_tables_result&);
  MapD_get_tables_result() {
  }

  virtual ~MapD_get_tables_result() throw();
  std::vector<std::string>  success;
  TMapDException e;

  _MapD_get_tables_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_tables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_tables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_tables_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_tables_presult__isset {
  _MapD_get_tables_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_tables_presult__isset;

class MapD_get_tables_presult {
 public:


  virtual ~MapD_get_tables_presult() throw();
  std::vector<std::string> * success;
  TMapDException e;

  _MapD_get_tables_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_physical_tables_args__isset {
  _MapD_get_physical_tables_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_physical_tables_args__isset;

class MapD_get_physical_tables_args {
 public:

  MapD_get_physical_tables_args(const MapD_get_physical_tables_args&);
  MapD_get_physical_tables_args& operator=(const MapD_get_physical_tables_args&);
  MapD_get_physical_tables_args() : session() {
  }

  virtual ~MapD_get_physical_tables_args() throw();
  TSessionId session;

  _MapD_get_physical_tables_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_physical_tables_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_physical_tables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_physical_tables_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_physical_tables_pargs {
 public:


  virtual ~MapD_get_physical_tables_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_physical_tables_result__isset {
  _MapD_get_physical_tables_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_physical_tables_result__isset;

class MapD_get_physical_tables_result {
 public:

  MapD_get_physical_tables_result(const MapD_get_physical_tables_result&);
  MapD_get_physical_tables_result& operator=(const MapD_get_physical_tables_result&);
  MapD_get_physical_tables_result() {
  }

  virtual ~MapD_get_physical_tables_result() throw();
  std::vector<std::string>  success;
  TMapDException e;

  _MapD_get_physical_tables_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_physical_tables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_physical_tables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_physical_tables_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_physical_tables_presult__isset {
  _MapD_get_physical_tables_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_physical_tables_presult__isset;

class MapD_get_physical_tables_presult {
 public:


  virtual ~MapD_get_physical_tables_presult() throw();
  std::vector<std::string> * success;
  TMapDException e;

  _MapD_get_physical_tables_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_views_args__isset {
  _MapD_get_views_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_views_args__isset;

class MapD_get_views_args {
 public:

  MapD_get_views_args(const MapD_get_views_args&);
  MapD_get_views_args& operator=(const MapD_get_views_args&);
  MapD_get_views_args() : session() {
  }

  virtual ~MapD_get_views_args() throw();
  TSessionId session;

  _MapD_get_views_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_views_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_views_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_views_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_views_pargs {
 public:


  virtual ~MapD_get_views_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_views_result__isset {
  _MapD_get_views_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_views_result__isset;

class MapD_get_views_result {
 public:

  MapD_get_views_result(const MapD_get_views_result&);
  MapD_get_views_result& operator=(const MapD_get_views_result&);
  MapD_get_views_result() {
  }

  virtual ~MapD_get_views_result() throw();
  std::vector<std::string>  success;
  TMapDException e;

  _MapD_get_views_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_views_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_views_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_views_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_views_presult__isset {
  _MapD_get_views_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_views_presult__isset;

class MapD_get_views_presult {
 public:


  virtual ~MapD_get_views_presult() throw();
  std::vector<std::string> * success;
  TMapDException e;

  _MapD_get_views_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_tables_meta_args__isset {
  _MapD_get_tables_meta_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_tables_meta_args__isset;

class MapD_get_tables_meta_args {
 public:

  MapD_get_tables_meta_args(const MapD_get_tables_meta_args&);
  MapD_get_tables_meta_args& operator=(const MapD_get_tables_meta_args&);
  MapD_get_tables_meta_args() : session() {
  }

  virtual ~MapD_get_tables_meta_args() throw();
  TSessionId session;

  _MapD_get_tables_meta_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_tables_meta_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_tables_meta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_tables_meta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_tables_meta_pargs {
 public:


  virtual ~MapD_get_tables_meta_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_tables_meta_result__isset {
  _MapD_get_tables_meta_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_tables_meta_result__isset;

class MapD_get_tables_meta_result {
 public:

  MapD_get_tables_meta_result(const MapD_get_tables_meta_result&);
  MapD_get_tables_meta_result& operator=(const MapD_get_tables_meta_result&);
  MapD_get_tables_meta_result() {
  }

  virtual ~MapD_get_tables_meta_result() throw();
  std::vector<TTableMeta>  success;
  TMapDException e;

  _MapD_get_tables_meta_result__isset __isset;

  void __set_success(const std::vector<TTableMeta> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_tables_meta_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_tables_meta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_tables_meta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_tables_meta_presult__isset {
  _MapD_get_tables_meta_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_tables_meta_presult__isset;

class MapD_get_tables_meta_presult {
 public:


  virtual ~MapD_get_tables_meta_presult() throw();
  std::vector<TTableMeta> * success;
  TMapDException e;

  _MapD_get_tables_meta_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_table_details_args__isset {
  _MapD_get_table_details_args__isset() : session(false), table_name(false) {}
  bool session :1;
  bool table_name :1;
} _MapD_get_table_details_args__isset;

class MapD_get_table_details_args {
 public:

  MapD_get_table_details_args(const MapD_get_table_details_args&);
  MapD_get_table_details_args& operator=(const MapD_get_table_details_args&);
  MapD_get_table_details_args() : session(), table_name() {
  }

  virtual ~MapD_get_table_details_args() throw();
  TSessionId session;
  std::string table_name;

  _MapD_get_table_details_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  bool operator == (const MapD_get_table_details_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const MapD_get_table_details_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_table_details_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_table_details_pargs {
 public:


  virtual ~MapD_get_table_details_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_table_details_result__isset {
  _MapD_get_table_details_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_table_details_result__isset;

class MapD_get_table_details_result {
 public:

  MapD_get_table_details_result(const MapD_get_table_details_result&);
  MapD_get_table_details_result& operator=(const MapD_get_table_details_result&);
  MapD_get_table_details_result() {
  }

  virtual ~MapD_get_table_details_result() throw();
  TTableDetails success;
  TMapDException e;

  _MapD_get_table_details_result__isset __isset;

  void __set_success(const TTableDetails& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_table_details_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_table_details_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_table_details_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_table_details_presult__isset {
  _MapD_get_table_details_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_table_details_presult__isset;

class MapD_get_table_details_presult {
 public:


  virtual ~MapD_get_table_details_presult() throw();
  TTableDetails* success;
  TMapDException e;

  _MapD_get_table_details_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_internal_table_details_args__isset {
  _MapD_get_internal_table_details_args__isset() : session(false), table_name(false) {}
  bool session :1;
  bool table_name :1;
} _MapD_get_internal_table_details_args__isset;

class MapD_get_internal_table_details_args {
 public:

  MapD_get_internal_table_details_args(const MapD_get_internal_table_details_args&);
  MapD_get_internal_table_details_args& operator=(const MapD_get_internal_table_details_args&);
  MapD_get_internal_table_details_args() : session(), table_name() {
  }

  virtual ~MapD_get_internal_table_details_args() throw();
  TSessionId session;
  std::string table_name;

  _MapD_get_internal_table_details_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  bool operator == (const MapD_get_internal_table_details_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const MapD_get_internal_table_details_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_internal_table_details_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_internal_table_details_pargs {
 public:


  virtual ~MapD_get_internal_table_details_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_internal_table_details_result__isset {
  _MapD_get_internal_table_details_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_internal_table_details_result__isset;

class MapD_get_internal_table_details_result {
 public:

  MapD_get_internal_table_details_result(const MapD_get_internal_table_details_result&);
  MapD_get_internal_table_details_result& operator=(const MapD_get_internal_table_details_result&);
  MapD_get_internal_table_details_result() {
  }

  virtual ~MapD_get_internal_table_details_result() throw();
  TTableDetails success;
  TMapDException e;

  _MapD_get_internal_table_details_result__isset __isset;

  void __set_success(const TTableDetails& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_internal_table_details_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_internal_table_details_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_internal_table_details_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_internal_table_details_presult__isset {
  _MapD_get_internal_table_details_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_internal_table_details_presult__isset;

class MapD_get_internal_table_details_presult {
 public:


  virtual ~MapD_get_internal_table_details_presult() throw();
  TTableDetails* success;
  TMapDException e;

  _MapD_get_internal_table_details_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_users_args__isset {
  _MapD_get_users_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_users_args__isset;

class MapD_get_users_args {
 public:

  MapD_get_users_args(const MapD_get_users_args&);
  MapD_get_users_args& operator=(const MapD_get_users_args&);
  MapD_get_users_args() : session() {
  }

  virtual ~MapD_get_users_args() throw();
  TSessionId session;

  _MapD_get_users_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_users_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_users_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_users_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_users_pargs {
 public:


  virtual ~MapD_get_users_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_users_result__isset {
  _MapD_get_users_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_users_result__isset;

class MapD_get_users_result {
 public:

  MapD_get_users_result(const MapD_get_users_result&);
  MapD_get_users_result& operator=(const MapD_get_users_result&);
  MapD_get_users_result() {
  }

  virtual ~MapD_get_users_result() throw();
  std::vector<std::string>  success;
  TMapDException e;

  _MapD_get_users_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_users_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_users_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_users_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_users_presult__isset {
  _MapD_get_users_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_users_presult__isset;

class MapD_get_users_presult {
 public:


  virtual ~MapD_get_users_presult() throw();
  std::vector<std::string> * success;
  TMapDException e;

  _MapD_get_users_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_databases_args__isset {
  _MapD_get_databases_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_databases_args__isset;

class MapD_get_databases_args {
 public:

  MapD_get_databases_args(const MapD_get_databases_args&);
  MapD_get_databases_args& operator=(const MapD_get_databases_args&);
  MapD_get_databases_args() : session() {
  }

  virtual ~MapD_get_databases_args() throw();
  TSessionId session;

  _MapD_get_databases_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_databases_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_databases_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_databases_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_databases_pargs {
 public:


  virtual ~MapD_get_databases_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_databases_result__isset {
  _MapD_get_databases_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_databases_result__isset;

class MapD_get_databases_result {
 public:

  MapD_get_databases_result(const MapD_get_databases_result&);
  MapD_get_databases_result& operator=(const MapD_get_databases_result&);
  MapD_get_databases_result() {
  }

  virtual ~MapD_get_databases_result() throw();
  std::vector<TDBInfo>  success;
  TMapDException e;

  _MapD_get_databases_result__isset __isset;

  void __set_success(const std::vector<TDBInfo> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_databases_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_databases_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_databases_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_databases_presult__isset {
  _MapD_get_databases_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_databases_presult__isset;

class MapD_get_databases_presult {
 public:


  virtual ~MapD_get_databases_presult() throw();
  std::vector<TDBInfo> * success;
  TMapDException e;

  _MapD_get_databases_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MapD_get_version_args {
 public:

  MapD_get_version_args(const MapD_get_version_args&);
  MapD_get_version_args& operator=(const MapD_get_version_args&);
  MapD_get_version_args() {
  }

  virtual ~MapD_get_version_args() throw();

  bool operator == (const MapD_get_version_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MapD_get_version_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_version_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_version_pargs {
 public:


  virtual ~MapD_get_version_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_version_result__isset {
  _MapD_get_version_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_version_result__isset;

class MapD_get_version_result {
 public:

  MapD_get_version_result(const MapD_get_version_result&);
  MapD_get_version_result& operator=(const MapD_get_version_result&);
  MapD_get_version_result() : success() {
  }

  virtual ~MapD_get_version_result() throw();
  std::string success;
  TMapDException e;

  _MapD_get_version_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_version_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_version_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_version_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_version_presult__isset {
  _MapD_get_version_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_version_presult__isset;

class MapD_get_version_presult {
 public:


  virtual ~MapD_get_version_presult() throw();
  std::string* success;
  TMapDException e;

  _MapD_get_version_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_start_heap_profile_args__isset {
  _MapD_start_heap_profile_args__isset() : session(false) {}
  bool session :1;
} _MapD_start_heap_profile_args__isset;

class MapD_start_heap_profile_args {
 public:

  MapD_start_heap_profile_args(const MapD_start_heap_profile_args&);
  MapD_start_heap_profile_args& operator=(const MapD_start_heap_profile_args&);
  MapD_start_heap_profile_args() : session() {
  }

  virtual ~MapD_start_heap_profile_args() throw();
  TSessionId session;

  _MapD_start_heap_profile_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_start_heap_profile_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_start_heap_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_start_heap_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_start_heap_profile_pargs {
 public:


  virtual ~MapD_start_heap_profile_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_start_heap_profile_result__isset {
  _MapD_start_heap_profile_result__isset() : e(false) {}
  bool e :1;
} _MapD_start_heap_profile_result__isset;

class MapD_start_heap_profile_result {
 public:

  MapD_start_heap_profile_result(const MapD_start_heap_profile_result&);
  MapD_start_heap_profile_result& operator=(const MapD_start_heap_profile_result&);
  MapD_start_heap_profile_result() {
  }

  virtual ~MapD_start_heap_profile_result() throw();
  TMapDException e;

  _MapD_start_heap_profile_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_start_heap_profile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_start_heap_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_start_heap_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_start_heap_profile_presult__isset {
  _MapD_start_heap_profile_presult__isset() : e(false) {}
  bool e :1;
} _MapD_start_heap_profile_presult__isset;

class MapD_start_heap_profile_presult {
 public:


  virtual ~MapD_start_heap_profile_presult() throw();
  TMapDException e;

  _MapD_start_heap_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_stop_heap_profile_args__isset {
  _MapD_stop_heap_profile_args__isset() : session(false) {}
  bool session :1;
} _MapD_stop_heap_profile_args__isset;

class MapD_stop_heap_profile_args {
 public:

  MapD_stop_heap_profile_args(const MapD_stop_heap_profile_args&);
  MapD_stop_heap_profile_args& operator=(const MapD_stop_heap_profile_args&);
  MapD_stop_heap_profile_args() : session() {
  }

  virtual ~MapD_stop_heap_profile_args() throw();
  TSessionId session;

  _MapD_stop_heap_profile_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_stop_heap_profile_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_stop_heap_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_stop_heap_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_stop_heap_profile_pargs {
 public:


  virtual ~MapD_stop_heap_profile_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_stop_heap_profile_result__isset {
  _MapD_stop_heap_profile_result__isset() : e(false) {}
  bool e :1;
} _MapD_stop_heap_profile_result__isset;

class MapD_stop_heap_profile_result {
 public:

  MapD_stop_heap_profile_result(const MapD_stop_heap_profile_result&);
  MapD_stop_heap_profile_result& operator=(const MapD_stop_heap_profile_result&);
  MapD_stop_heap_profile_result() {
  }

  virtual ~MapD_stop_heap_profile_result() throw();
  TMapDException e;

  _MapD_stop_heap_profile_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_stop_heap_profile_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_stop_heap_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_stop_heap_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_stop_heap_profile_presult__isset {
  _MapD_stop_heap_profile_presult__isset() : e(false) {}
  bool e :1;
} _MapD_stop_heap_profile_presult__isset;

class MapD_stop_heap_profile_presult {
 public:


  virtual ~MapD_stop_heap_profile_presult() throw();
  TMapDException e;

  _MapD_stop_heap_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_heap_profile_args__isset {
  _MapD_get_heap_profile_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_heap_profile_args__isset;

class MapD_get_heap_profile_args {
 public:

  MapD_get_heap_profile_args(const MapD_get_heap_profile_args&);
  MapD_get_heap_profile_args& operator=(const MapD_get_heap_profile_args&);
  MapD_get_heap_profile_args() : session() {
  }

  virtual ~MapD_get_heap_profile_args() throw();
  TSessionId session;

  _MapD_get_heap_profile_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_heap_profile_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_heap_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_heap_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_heap_profile_pargs {
 public:


  virtual ~MapD_get_heap_profile_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_heap_profile_result__isset {
  _MapD_get_heap_profile_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_heap_profile_result__isset;

class MapD_get_heap_profile_result {
 public:

  MapD_get_heap_profile_result(const MapD_get_heap_profile_result&);
  MapD_get_heap_profile_result& operator=(const MapD_get_heap_profile_result&);
  MapD_get_heap_profile_result() : success() {
  }

  virtual ~MapD_get_heap_profile_result() throw();
  std::string success;
  TMapDException e;

  _MapD_get_heap_profile_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_heap_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_heap_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_heap_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_heap_profile_presult__isset {
  _MapD_get_heap_profile_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_heap_profile_presult__isset;

class MapD_get_heap_profile_presult {
 public:


  virtual ~MapD_get_heap_profile_presult() throw();
  std::string* success;
  TMapDException e;

  _MapD_get_heap_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_memory_args__isset {
  _MapD_get_memory_args__isset() : session(false), memory_level(false) {}
  bool session :1;
  bool memory_level :1;
} _MapD_get_memory_args__isset;

class MapD_get_memory_args {
 public:

  MapD_get_memory_args(const MapD_get_memory_args&);
  MapD_get_memory_args& operator=(const MapD_get_memory_args&);
  MapD_get_memory_args() : session(), memory_level() {
  }

  virtual ~MapD_get_memory_args() throw();
  TSessionId session;
  std::string memory_level;

  _MapD_get_memory_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_memory_level(const std::string& val);

  bool operator == (const MapD_get_memory_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(memory_level == rhs.memory_level))
      return false;
    return true;
  }
  bool operator != (const MapD_get_memory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_memory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_memory_pargs {
 public:


  virtual ~MapD_get_memory_pargs() throw();
  const TSessionId* session;
  const std::string* memory_level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_memory_result__isset {
  _MapD_get_memory_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_memory_result__isset;

class MapD_get_memory_result {
 public:

  MapD_get_memory_result(const MapD_get_memory_result&);
  MapD_get_memory_result& operator=(const MapD_get_memory_result&);
  MapD_get_memory_result() {
  }

  virtual ~MapD_get_memory_result() throw();
  std::vector<TNodeMemoryInfo>  success;
  TMapDException e;

  _MapD_get_memory_result__isset __isset;

  void __set_success(const std::vector<TNodeMemoryInfo> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_memory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_memory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_memory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_memory_presult__isset {
  _MapD_get_memory_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_memory_presult__isset;

class MapD_get_memory_presult {
 public:


  virtual ~MapD_get_memory_presult() throw();
  std::vector<TNodeMemoryInfo> * success;
  TMapDException e;

  _MapD_get_memory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_clear_cpu_memory_args__isset {
  _MapD_clear_cpu_memory_args__isset() : session(false) {}
  bool session :1;
} _MapD_clear_cpu_memory_args__isset;

class MapD_clear_cpu_memory_args {
 public:

  MapD_clear_cpu_memory_args(const MapD_clear_cpu_memory_args&);
  MapD_clear_cpu_memory_args& operator=(const MapD_clear_cpu_memory_args&);
  MapD_clear_cpu_memory_args() : session() {
  }

  virtual ~MapD_clear_cpu_memory_args() throw();
  TSessionId session;

  _MapD_clear_cpu_memory_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_clear_cpu_memory_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_clear_cpu_memory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_clear_cpu_memory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_clear_cpu_memory_pargs {
 public:


  virtual ~MapD_clear_cpu_memory_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_clear_cpu_memory_result__isset {
  _MapD_clear_cpu_memory_result__isset() : e(false) {}
  bool e :1;
} _MapD_clear_cpu_memory_result__isset;

class MapD_clear_cpu_memory_result {
 public:

  MapD_clear_cpu_memory_result(const MapD_clear_cpu_memory_result&);
  MapD_clear_cpu_memory_result& operator=(const MapD_clear_cpu_memory_result&);
  MapD_clear_cpu_memory_result() {
  }

  virtual ~MapD_clear_cpu_memory_result() throw();
  TMapDException e;

  _MapD_clear_cpu_memory_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_clear_cpu_memory_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_clear_cpu_memory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_clear_cpu_memory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_clear_cpu_memory_presult__isset {
  _MapD_clear_cpu_memory_presult__isset() : e(false) {}
  bool e :1;
} _MapD_clear_cpu_memory_presult__isset;

class MapD_clear_cpu_memory_presult {
 public:


  virtual ~MapD_clear_cpu_memory_presult() throw();
  TMapDException e;

  _MapD_clear_cpu_memory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_clear_gpu_memory_args__isset {
  _MapD_clear_gpu_memory_args__isset() : session(false) {}
  bool session :1;
} _MapD_clear_gpu_memory_args__isset;

class MapD_clear_gpu_memory_args {
 public:

  MapD_clear_gpu_memory_args(const MapD_clear_gpu_memory_args&);
  MapD_clear_gpu_memory_args& operator=(const MapD_clear_gpu_memory_args&);
  MapD_clear_gpu_memory_args() : session() {
  }

  virtual ~MapD_clear_gpu_memory_args() throw();
  TSessionId session;

  _MapD_clear_gpu_memory_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_clear_gpu_memory_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_clear_gpu_memory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_clear_gpu_memory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_clear_gpu_memory_pargs {
 public:


  virtual ~MapD_clear_gpu_memory_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_clear_gpu_memory_result__isset {
  _MapD_clear_gpu_memory_result__isset() : e(false) {}
  bool e :1;
} _MapD_clear_gpu_memory_result__isset;

class MapD_clear_gpu_memory_result {
 public:

  MapD_clear_gpu_memory_result(const MapD_clear_gpu_memory_result&);
  MapD_clear_gpu_memory_result& operator=(const MapD_clear_gpu_memory_result&);
  MapD_clear_gpu_memory_result() {
  }

  virtual ~MapD_clear_gpu_memory_result() throw();
  TMapDException e;

  _MapD_clear_gpu_memory_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_clear_gpu_memory_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_clear_gpu_memory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_clear_gpu_memory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_clear_gpu_memory_presult__isset {
  _MapD_clear_gpu_memory_presult__isset() : e(false) {}
  bool e :1;
} _MapD_clear_gpu_memory_presult__isset;

class MapD_clear_gpu_memory_presult {
 public:


  virtual ~MapD_clear_gpu_memory_presult() throw();
  TMapDException e;

  _MapD_clear_gpu_memory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_set_table_epoch_args__isset {
  _MapD_set_table_epoch_args__isset() : session(false), db_id(false), table_id(false), new_epoch(false) {}
  bool session :1;
  bool db_id :1;
  bool table_id :1;
  bool new_epoch :1;
} _MapD_set_table_epoch_args__isset;

class MapD_set_table_epoch_args {
 public:

  MapD_set_table_epoch_args(const MapD_set_table_epoch_args&);
  MapD_set_table_epoch_args& operator=(const MapD_set_table_epoch_args&);
  MapD_set_table_epoch_args() : session(), db_id(0), table_id(0), new_epoch(0) {
  }

  virtual ~MapD_set_table_epoch_args() throw();
  TSessionId session;
  int32_t db_id;
  int32_t table_id;
  int32_t new_epoch;

  _MapD_set_table_epoch_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_db_id(const int32_t val);

  void __set_table_id(const int32_t val);

  void __set_new_epoch(const int32_t val);

  bool operator == (const MapD_set_table_epoch_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_id == rhs.db_id))
      return false;
    if (!(table_id == rhs.table_id))
      return false;
    if (!(new_epoch == rhs.new_epoch))
      return false;
    return true;
  }
  bool operator != (const MapD_set_table_epoch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_set_table_epoch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_set_table_epoch_pargs {
 public:


  virtual ~MapD_set_table_epoch_pargs() throw();
  const TSessionId* session;
  const int32_t* db_id;
  const int32_t* table_id;
  const int32_t* new_epoch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_set_table_epoch_result__isset {
  _MapD_set_table_epoch_result__isset() : e(false) {}
  bool e :1;
} _MapD_set_table_epoch_result__isset;

class MapD_set_table_epoch_result {
 public:

  MapD_set_table_epoch_result(const MapD_set_table_epoch_result&);
  MapD_set_table_epoch_result& operator=(const MapD_set_table_epoch_result&);
  MapD_set_table_epoch_result() {
  }

  virtual ~MapD_set_table_epoch_result() throw();
  TMapDException e;

  _MapD_set_table_epoch_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_set_table_epoch_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_set_table_epoch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_set_table_epoch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_set_table_epoch_presult__isset {
  _MapD_set_table_epoch_presult__isset() : e(false) {}
  bool e :1;
} _MapD_set_table_epoch_presult__isset;

class MapD_set_table_epoch_presult {
 public:


  virtual ~MapD_set_table_epoch_presult() throw();
  TMapDException e;

  _MapD_set_table_epoch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_set_table_epoch_by_name_args__isset {
  _MapD_set_table_epoch_by_name_args__isset() : session(false), table_name(false), new_epoch(false) {}
  bool session :1;
  bool table_name :1;
  bool new_epoch :1;
} _MapD_set_table_epoch_by_name_args__isset;

class MapD_set_table_epoch_by_name_args {
 public:

  MapD_set_table_epoch_by_name_args(const MapD_set_table_epoch_by_name_args&);
  MapD_set_table_epoch_by_name_args& operator=(const MapD_set_table_epoch_by_name_args&);
  MapD_set_table_epoch_by_name_args() : session(), table_name(), new_epoch(0) {
  }

  virtual ~MapD_set_table_epoch_by_name_args() throw();
  TSessionId session;
  std::string table_name;
  int32_t new_epoch;

  _MapD_set_table_epoch_by_name_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_new_epoch(const int32_t val);

  bool operator == (const MapD_set_table_epoch_by_name_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(new_epoch == rhs.new_epoch))
      return false;
    return true;
  }
  bool operator != (const MapD_set_table_epoch_by_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_set_table_epoch_by_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_set_table_epoch_by_name_pargs {
 public:


  virtual ~MapD_set_table_epoch_by_name_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;
  const int32_t* new_epoch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_set_table_epoch_by_name_result__isset {
  _MapD_set_table_epoch_by_name_result__isset() : e(false) {}
  bool e :1;
} _MapD_set_table_epoch_by_name_result__isset;

class MapD_set_table_epoch_by_name_result {
 public:

  MapD_set_table_epoch_by_name_result(const MapD_set_table_epoch_by_name_result&);
  MapD_set_table_epoch_by_name_result& operator=(const MapD_set_table_epoch_by_name_result&);
  MapD_set_table_epoch_by_name_result() {
  }

  virtual ~MapD_set_table_epoch_by_name_result() throw();
  TMapDException e;

  _MapD_set_table_epoch_by_name_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_set_table_epoch_by_name_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_set_table_epoch_by_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_set_table_epoch_by_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_set_table_epoch_by_name_presult__isset {
  _MapD_set_table_epoch_by_name_presult__isset() : e(false) {}
  bool e :1;
} _MapD_set_table_epoch_by_name_presult__isset;

class MapD_set_table_epoch_by_name_presult {
 public:


  virtual ~MapD_set_table_epoch_by_name_presult() throw();
  TMapDException e;

  _MapD_set_table_epoch_by_name_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_table_epoch_args__isset {
  _MapD_get_table_epoch_args__isset() : session(false), db_id(false), table_id(false) {}
  bool session :1;
  bool db_id :1;
  bool table_id :1;
} _MapD_get_table_epoch_args__isset;

class MapD_get_table_epoch_args {
 public:

  MapD_get_table_epoch_args(const MapD_get_table_epoch_args&);
  MapD_get_table_epoch_args& operator=(const MapD_get_table_epoch_args&);
  MapD_get_table_epoch_args() : session(), db_id(0), table_id(0) {
  }

  virtual ~MapD_get_table_epoch_args() throw();
  TSessionId session;
  int32_t db_id;
  int32_t table_id;

  _MapD_get_table_epoch_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_db_id(const int32_t val);

  void __set_table_id(const int32_t val);

  bool operator == (const MapD_get_table_epoch_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_id == rhs.db_id))
      return false;
    if (!(table_id == rhs.table_id))
      return false;
    return true;
  }
  bool operator != (const MapD_get_table_epoch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_table_epoch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_table_epoch_pargs {
 public:


  virtual ~MapD_get_table_epoch_pargs() throw();
  const TSessionId* session;
  const int32_t* db_id;
  const int32_t* table_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_table_epoch_result__isset {
  _MapD_get_table_epoch_result__isset() : success(false) {}
  bool success :1;
} _MapD_get_table_epoch_result__isset;

class MapD_get_table_epoch_result {
 public:

  MapD_get_table_epoch_result(const MapD_get_table_epoch_result&);
  MapD_get_table_epoch_result& operator=(const MapD_get_table_epoch_result&);
  MapD_get_table_epoch_result() : success(0) {
  }

  virtual ~MapD_get_table_epoch_result() throw();
  int32_t success;

  _MapD_get_table_epoch_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MapD_get_table_epoch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MapD_get_table_epoch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_table_epoch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_table_epoch_presult__isset {
  _MapD_get_table_epoch_presult__isset() : success(false) {}
  bool success :1;
} _MapD_get_table_epoch_presult__isset;

class MapD_get_table_epoch_presult {
 public:


  virtual ~MapD_get_table_epoch_presult() throw();
  int32_t* success;

  _MapD_get_table_epoch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_table_epoch_by_name_args__isset {
  _MapD_get_table_epoch_by_name_args__isset() : session(false), table_name(false) {}
  bool session :1;
  bool table_name :1;
} _MapD_get_table_epoch_by_name_args__isset;

class MapD_get_table_epoch_by_name_args {
 public:

  MapD_get_table_epoch_by_name_args(const MapD_get_table_epoch_by_name_args&);
  MapD_get_table_epoch_by_name_args& operator=(const MapD_get_table_epoch_by_name_args&);
  MapD_get_table_epoch_by_name_args() : session(), table_name() {
  }

  virtual ~MapD_get_table_epoch_by_name_args() throw();
  TSessionId session;
  std::string table_name;

  _MapD_get_table_epoch_by_name_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  bool operator == (const MapD_get_table_epoch_by_name_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const MapD_get_table_epoch_by_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_table_epoch_by_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_table_epoch_by_name_pargs {
 public:


  virtual ~MapD_get_table_epoch_by_name_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_table_epoch_by_name_result__isset {
  _MapD_get_table_epoch_by_name_result__isset() : success(false) {}
  bool success :1;
} _MapD_get_table_epoch_by_name_result__isset;

class MapD_get_table_epoch_by_name_result {
 public:

  MapD_get_table_epoch_by_name_result(const MapD_get_table_epoch_by_name_result&);
  MapD_get_table_epoch_by_name_result& operator=(const MapD_get_table_epoch_by_name_result&);
  MapD_get_table_epoch_by_name_result() : success(0) {
  }

  virtual ~MapD_get_table_epoch_by_name_result() throw();
  int32_t success;

  _MapD_get_table_epoch_by_name_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MapD_get_table_epoch_by_name_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MapD_get_table_epoch_by_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_table_epoch_by_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_table_epoch_by_name_presult__isset {
  _MapD_get_table_epoch_by_name_presult__isset() : success(false) {}
  bool success :1;
} _MapD_get_table_epoch_by_name_presult__isset;

class MapD_get_table_epoch_by_name_presult {
 public:


  virtual ~MapD_get_table_epoch_by_name_presult() throw();
  int32_t* success;

  _MapD_get_table_epoch_by_name_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_session_info_args__isset {
  _MapD_get_session_info_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_session_info_args__isset;

class MapD_get_session_info_args {
 public:

  MapD_get_session_info_args(const MapD_get_session_info_args&);
  MapD_get_session_info_args& operator=(const MapD_get_session_info_args&);
  MapD_get_session_info_args() : session() {
  }

  virtual ~MapD_get_session_info_args() throw();
  TSessionId session;

  _MapD_get_session_info_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_session_info_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_session_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_session_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_session_info_pargs {
 public:


  virtual ~MapD_get_session_info_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_session_info_result__isset {
  _MapD_get_session_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_session_info_result__isset;

class MapD_get_session_info_result {
 public:

  MapD_get_session_info_result(const MapD_get_session_info_result&);
  MapD_get_session_info_result& operator=(const MapD_get_session_info_result&);
  MapD_get_session_info_result() {
  }

  virtual ~MapD_get_session_info_result() throw();
  TSessionInfo success;
  TMapDException e;

  _MapD_get_session_info_result__isset __isset;

  void __set_success(const TSessionInfo& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_session_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_session_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_session_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_session_info_presult__isset {
  _MapD_get_session_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_session_info_presult__isset;

class MapD_get_session_info_presult {
 public:


  virtual ~MapD_get_session_info_presult() throw();
  TSessionInfo* success;
  TMapDException e;

  _MapD_get_session_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_sql_execute_args__isset {
  _MapD_sql_execute_args__isset() : session(false), query(false), column_format(false), nonce(false), first_n(true), at_most_n(true) {}
  bool session :1;
  bool query :1;
  bool column_format :1;
  bool nonce :1;
  bool first_n :1;
  bool at_most_n :1;
} _MapD_sql_execute_args__isset;

class MapD_sql_execute_args {
 public:

  MapD_sql_execute_args(const MapD_sql_execute_args&);
  MapD_sql_execute_args& operator=(const MapD_sql_execute_args&);
  MapD_sql_execute_args() : session(), query(), column_format(0), nonce(), first_n(-1), at_most_n(-1) {
  }

  virtual ~MapD_sql_execute_args() throw();
  TSessionId session;
  std::string query;
  bool column_format;
  std::string nonce;
  int32_t first_n;
  int32_t at_most_n;

  _MapD_sql_execute_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query(const std::string& val);

  void __set_column_format(const bool val);

  void __set_nonce(const std::string& val);

  void __set_first_n(const int32_t val);

  void __set_at_most_n(const int32_t val);

  bool operator == (const MapD_sql_execute_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(column_format == rhs.column_format))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    if (!(first_n == rhs.first_n))
      return false;
    if (!(at_most_n == rhs.at_most_n))
      return false;
    return true;
  }
  bool operator != (const MapD_sql_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_sql_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_sql_execute_pargs {
 public:


  virtual ~MapD_sql_execute_pargs() throw();
  const TSessionId* session;
  const std::string* query;
  const bool* column_format;
  const std::string* nonce;
  const int32_t* first_n;
  const int32_t* at_most_n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_sql_execute_result__isset {
  _MapD_sql_execute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_sql_execute_result__isset;

class MapD_sql_execute_result {
 public:

  MapD_sql_execute_result(const MapD_sql_execute_result&);
  MapD_sql_execute_result& operator=(const MapD_sql_execute_result&);
  MapD_sql_execute_result() {
  }

  virtual ~MapD_sql_execute_result() throw();
  TQueryResult success;
  TMapDException e;

  _MapD_sql_execute_result__isset __isset;

  void __set_success(const TQueryResult& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_sql_execute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_sql_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_sql_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_sql_execute_presult__isset {
  _MapD_sql_execute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_sql_execute_presult__isset;

class MapD_sql_execute_presult {
 public:


  virtual ~MapD_sql_execute_presult() throw();
  TQueryResult* success;
  TMapDException e;

  _MapD_sql_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_sql_execute_df_args__isset {
  _MapD_sql_execute_df_args__isset() : session(false), query(false), device_type(false), device_id(true), first_n(true) {}
  bool session :1;
  bool query :1;
  bool device_type :1;
  bool device_id :1;
  bool first_n :1;
} _MapD_sql_execute_df_args__isset;

class MapD_sql_execute_df_args {
 public:

  MapD_sql_execute_df_args(const MapD_sql_execute_df_args&);
  MapD_sql_execute_df_args& operator=(const MapD_sql_execute_df_args&);
  MapD_sql_execute_df_args() : session(), query(), device_type(( ::TDeviceType::type)0), device_id(0), first_n(-1) {
  }

  virtual ~MapD_sql_execute_df_args() throw();
  TSessionId session;
  std::string query;
   ::TDeviceType::type device_type;
  int32_t device_id;
  int32_t first_n;

  _MapD_sql_execute_df_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query(const std::string& val);

  void __set_device_type(const  ::TDeviceType::type val);

  void __set_device_id(const int32_t val);

  void __set_first_n(const int32_t val);

  bool operator == (const MapD_sql_execute_df_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(first_n == rhs.first_n))
      return false;
    return true;
  }
  bool operator != (const MapD_sql_execute_df_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_sql_execute_df_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_sql_execute_df_pargs {
 public:


  virtual ~MapD_sql_execute_df_pargs() throw();
  const TSessionId* session;
  const std::string* query;
  const  ::TDeviceType::type* device_type;
  const int32_t* device_id;
  const int32_t* first_n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_sql_execute_df_result__isset {
  _MapD_sql_execute_df_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_sql_execute_df_result__isset;

class MapD_sql_execute_df_result {
 public:

  MapD_sql_execute_df_result(const MapD_sql_execute_df_result&);
  MapD_sql_execute_df_result& operator=(const MapD_sql_execute_df_result&);
  MapD_sql_execute_df_result() {
  }

  virtual ~MapD_sql_execute_df_result() throw();
  TDataFrame success;
  TMapDException e;

  _MapD_sql_execute_df_result__isset __isset;

  void __set_success(const TDataFrame& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_sql_execute_df_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_sql_execute_df_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_sql_execute_df_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_sql_execute_df_presult__isset {
  _MapD_sql_execute_df_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_sql_execute_df_presult__isset;

class MapD_sql_execute_df_presult {
 public:


  virtual ~MapD_sql_execute_df_presult() throw();
  TDataFrame* success;
  TMapDException e;

  _MapD_sql_execute_df_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_sql_execute_gdf_args__isset {
  _MapD_sql_execute_gdf_args__isset() : session(false), query(false), device_id(true), first_n(true) {}
  bool session :1;
  bool query :1;
  bool device_id :1;
  bool first_n :1;
} _MapD_sql_execute_gdf_args__isset;

class MapD_sql_execute_gdf_args {
 public:

  MapD_sql_execute_gdf_args(const MapD_sql_execute_gdf_args&);
  MapD_sql_execute_gdf_args& operator=(const MapD_sql_execute_gdf_args&);
  MapD_sql_execute_gdf_args() : session(), query(), device_id(0), first_n(-1) {
  }

  virtual ~MapD_sql_execute_gdf_args() throw();
  TSessionId session;
  std::string query;
  int32_t device_id;
  int32_t first_n;

  _MapD_sql_execute_gdf_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query(const std::string& val);

  void __set_device_id(const int32_t val);

  void __set_first_n(const int32_t val);

  bool operator == (const MapD_sql_execute_gdf_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(first_n == rhs.first_n))
      return false;
    return true;
  }
  bool operator != (const MapD_sql_execute_gdf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_sql_execute_gdf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_sql_execute_gdf_pargs {
 public:


  virtual ~MapD_sql_execute_gdf_pargs() throw();
  const TSessionId* session;
  const std::string* query;
  const int32_t* device_id;
  const int32_t* first_n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_sql_execute_gdf_result__isset {
  _MapD_sql_execute_gdf_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_sql_execute_gdf_result__isset;

class MapD_sql_execute_gdf_result {
 public:

  MapD_sql_execute_gdf_result(const MapD_sql_execute_gdf_result&);
  MapD_sql_execute_gdf_result& operator=(const MapD_sql_execute_gdf_result&);
  MapD_sql_execute_gdf_result() {
  }

  virtual ~MapD_sql_execute_gdf_result() throw();
  TDataFrame success;
  TMapDException e;

  _MapD_sql_execute_gdf_result__isset __isset;

  void __set_success(const TDataFrame& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_sql_execute_gdf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_sql_execute_gdf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_sql_execute_gdf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_sql_execute_gdf_presult__isset {
  _MapD_sql_execute_gdf_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_sql_execute_gdf_presult__isset;

class MapD_sql_execute_gdf_presult {
 public:


  virtual ~MapD_sql_execute_gdf_presult() throw();
  TDataFrame* success;
  TMapDException e;

  _MapD_sql_execute_gdf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_deallocate_df_args__isset {
  _MapD_deallocate_df_args__isset() : session(false), df(false), device_type(false), device_id(true) {}
  bool session :1;
  bool df :1;
  bool device_type :1;
  bool device_id :1;
} _MapD_deallocate_df_args__isset;

class MapD_deallocate_df_args {
 public:

  MapD_deallocate_df_args(const MapD_deallocate_df_args&);
  MapD_deallocate_df_args& operator=(const MapD_deallocate_df_args&);
  MapD_deallocate_df_args() : session(), device_type(( ::TDeviceType::type)0), device_id(0) {
  }

  virtual ~MapD_deallocate_df_args() throw();
  TSessionId session;
  TDataFrame df;
   ::TDeviceType::type device_type;
  int32_t device_id;

  _MapD_deallocate_df_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_df(const TDataFrame& val);

  void __set_device_type(const  ::TDeviceType::type val);

  void __set_device_id(const int32_t val);

  bool operator == (const MapD_deallocate_df_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(df == rhs.df))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    return true;
  }
  bool operator != (const MapD_deallocate_df_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_deallocate_df_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_deallocate_df_pargs {
 public:


  virtual ~MapD_deallocate_df_pargs() throw();
  const TSessionId* session;
  const TDataFrame* df;
  const  ::TDeviceType::type* device_type;
  const int32_t* device_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_deallocate_df_result__isset {
  _MapD_deallocate_df_result__isset() : e(false) {}
  bool e :1;
} _MapD_deallocate_df_result__isset;

class MapD_deallocate_df_result {
 public:

  MapD_deallocate_df_result(const MapD_deallocate_df_result&);
  MapD_deallocate_df_result& operator=(const MapD_deallocate_df_result&);
  MapD_deallocate_df_result() {
  }

  virtual ~MapD_deallocate_df_result() throw();
  TMapDException e;

  _MapD_deallocate_df_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_deallocate_df_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_deallocate_df_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_deallocate_df_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_deallocate_df_presult__isset {
  _MapD_deallocate_df_presult__isset() : e(false) {}
  bool e :1;
} _MapD_deallocate_df_presult__isset;

class MapD_deallocate_df_presult {
 public:


  virtual ~MapD_deallocate_df_presult() throw();
  TMapDException e;

  _MapD_deallocate_df_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_interrupt_args__isset {
  _MapD_interrupt_args__isset() : session(false) {}
  bool session :1;
} _MapD_interrupt_args__isset;

class MapD_interrupt_args {
 public:

  MapD_interrupt_args(const MapD_interrupt_args&);
  MapD_interrupt_args& operator=(const MapD_interrupt_args&);
  MapD_interrupt_args() : session() {
  }

  virtual ~MapD_interrupt_args() throw();
  TSessionId session;

  _MapD_interrupt_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_interrupt_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_interrupt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_interrupt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_interrupt_pargs {
 public:


  virtual ~MapD_interrupt_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_interrupt_result__isset {
  _MapD_interrupt_result__isset() : e(false) {}
  bool e :1;
} _MapD_interrupt_result__isset;

class MapD_interrupt_result {
 public:

  MapD_interrupt_result(const MapD_interrupt_result&);
  MapD_interrupt_result& operator=(const MapD_interrupt_result&);
  MapD_interrupt_result() {
  }

  virtual ~MapD_interrupt_result() throw();
  TMapDException e;

  _MapD_interrupt_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_interrupt_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_interrupt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_interrupt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_interrupt_presult__isset {
  _MapD_interrupt_presult__isset() : e(false) {}
  bool e :1;
} _MapD_interrupt_presult__isset;

class MapD_interrupt_presult {
 public:


  virtual ~MapD_interrupt_presult() throw();
  TMapDException e;

  _MapD_interrupt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_sql_validate_args__isset {
  _MapD_sql_validate_args__isset() : session(false), query(false) {}
  bool session :1;
  bool query :1;
} _MapD_sql_validate_args__isset;

class MapD_sql_validate_args {
 public:

  MapD_sql_validate_args(const MapD_sql_validate_args&);
  MapD_sql_validate_args& operator=(const MapD_sql_validate_args&);
  MapD_sql_validate_args() : session(), query() {
  }

  virtual ~MapD_sql_validate_args() throw();
  TSessionId session;
  std::string query;

  _MapD_sql_validate_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query(const std::string& val);

  bool operator == (const MapD_sql_validate_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const MapD_sql_validate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_sql_validate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_sql_validate_pargs {
 public:


  virtual ~MapD_sql_validate_pargs() throw();
  const TSessionId* session;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_sql_validate_result__isset {
  _MapD_sql_validate_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_sql_validate_result__isset;

class MapD_sql_validate_result {
 public:

  MapD_sql_validate_result(const MapD_sql_validate_result&);
  MapD_sql_validate_result& operator=(const MapD_sql_validate_result&);
  MapD_sql_validate_result() {
  }

  virtual ~MapD_sql_validate_result() throw();
  TTableDescriptor success;
  TMapDException e;

  _MapD_sql_validate_result__isset __isset;

  void __set_success(const TTableDescriptor& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_sql_validate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_sql_validate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_sql_validate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_sql_validate_presult__isset {
  _MapD_sql_validate_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_sql_validate_presult__isset;

class MapD_sql_validate_presult {
 public:


  virtual ~MapD_sql_validate_presult() throw();
  TTableDescriptor* success;
  TMapDException e;

  _MapD_sql_validate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_completion_hints_args__isset {
  _MapD_get_completion_hints_args__isset() : session(false), sql(false), cursor(false) {}
  bool session :1;
  bool sql :1;
  bool cursor :1;
} _MapD_get_completion_hints_args__isset;

class MapD_get_completion_hints_args {
 public:

  MapD_get_completion_hints_args(const MapD_get_completion_hints_args&);
  MapD_get_completion_hints_args& operator=(const MapD_get_completion_hints_args&);
  MapD_get_completion_hints_args() : session(), sql(), cursor(0) {
  }

  virtual ~MapD_get_completion_hints_args() throw();
  TSessionId session;
  std::string sql;
  int32_t cursor;

  _MapD_get_completion_hints_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_sql(const std::string& val);

  void __set_cursor(const int32_t val);

  bool operator == (const MapD_get_completion_hints_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(cursor == rhs.cursor))
      return false;
    return true;
  }
  bool operator != (const MapD_get_completion_hints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_completion_hints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_completion_hints_pargs {
 public:


  virtual ~MapD_get_completion_hints_pargs() throw();
  const TSessionId* session;
  const std::string* sql;
  const int32_t* cursor;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_completion_hints_result__isset {
  _MapD_get_completion_hints_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_completion_hints_result__isset;

class MapD_get_completion_hints_result {
 public:

  MapD_get_completion_hints_result(const MapD_get_completion_hints_result&);
  MapD_get_completion_hints_result& operator=(const MapD_get_completion_hints_result&);
  MapD_get_completion_hints_result() {
  }

  virtual ~MapD_get_completion_hints_result() throw();
  std::vector< ::TCompletionHint>  success;
  TMapDException e;

  _MapD_get_completion_hints_result__isset __isset;

  void __set_success(const std::vector< ::TCompletionHint> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_completion_hints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_completion_hints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_completion_hints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_completion_hints_presult__isset {
  _MapD_get_completion_hints_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_completion_hints_presult__isset;

class MapD_get_completion_hints_presult {
 public:


  virtual ~MapD_get_completion_hints_presult() throw();
  std::vector< ::TCompletionHint> * success;
  TMapDException e;

  _MapD_get_completion_hints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_set_execution_mode_args__isset {
  _MapD_set_execution_mode_args__isset() : session(false), mode(false) {}
  bool session :1;
  bool mode :1;
} _MapD_set_execution_mode_args__isset;

class MapD_set_execution_mode_args {
 public:

  MapD_set_execution_mode_args(const MapD_set_execution_mode_args&);
  MapD_set_execution_mode_args& operator=(const MapD_set_execution_mode_args&);
  MapD_set_execution_mode_args() : session(), mode((TExecuteMode::type)0) {
  }

  virtual ~MapD_set_execution_mode_args() throw();
  TSessionId session;
  TExecuteMode::type mode;

  _MapD_set_execution_mode_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_mode(const TExecuteMode::type val);

  bool operator == (const MapD_set_execution_mode_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const MapD_set_execution_mode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_set_execution_mode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_set_execution_mode_pargs {
 public:


  virtual ~MapD_set_execution_mode_pargs() throw();
  const TSessionId* session;
  const TExecuteMode::type* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_set_execution_mode_result__isset {
  _MapD_set_execution_mode_result__isset() : e(false) {}
  bool e :1;
} _MapD_set_execution_mode_result__isset;

class MapD_set_execution_mode_result {
 public:

  MapD_set_execution_mode_result(const MapD_set_execution_mode_result&);
  MapD_set_execution_mode_result& operator=(const MapD_set_execution_mode_result&);
  MapD_set_execution_mode_result() {
  }

  virtual ~MapD_set_execution_mode_result() throw();
  TMapDException e;

  _MapD_set_execution_mode_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_set_execution_mode_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_set_execution_mode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_set_execution_mode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_set_execution_mode_presult__isset {
  _MapD_set_execution_mode_presult__isset() : e(false) {}
  bool e :1;
} _MapD_set_execution_mode_presult__isset;

class MapD_set_execution_mode_presult {
 public:


  virtual ~MapD_set_execution_mode_presult() throw();
  TMapDException e;

  _MapD_set_execution_mode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_render_vega_args__isset {
  _MapD_render_vega_args__isset() : session(false), widget_id(false), vega_json(false), compression_level(false), nonce(false) {}
  bool session :1;
  bool widget_id :1;
  bool vega_json :1;
  bool compression_level :1;
  bool nonce :1;
} _MapD_render_vega_args__isset;

class MapD_render_vega_args {
 public:

  MapD_render_vega_args(const MapD_render_vega_args&);
  MapD_render_vega_args& operator=(const MapD_render_vega_args&);
  MapD_render_vega_args() : session(), widget_id(0), vega_json(), compression_level(0), nonce() {
  }

  virtual ~MapD_render_vega_args() throw();
  TSessionId session;
  int64_t widget_id;
  std::string vega_json;
  int32_t compression_level;
  std::string nonce;

  _MapD_render_vega_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_widget_id(const int64_t val);

  void __set_vega_json(const std::string& val);

  void __set_compression_level(const int32_t val);

  void __set_nonce(const std::string& val);

  bool operator == (const MapD_render_vega_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(widget_id == rhs.widget_id))
      return false;
    if (!(vega_json == rhs.vega_json))
      return false;
    if (!(compression_level == rhs.compression_level))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const MapD_render_vega_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_render_vega_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_render_vega_pargs {
 public:


  virtual ~MapD_render_vega_pargs() throw();
  const TSessionId* session;
  const int64_t* widget_id;
  const std::string* vega_json;
  const int32_t* compression_level;
  const std::string* nonce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_render_vega_result__isset {
  _MapD_render_vega_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_render_vega_result__isset;

class MapD_render_vega_result {
 public:

  MapD_render_vega_result(const MapD_render_vega_result&);
  MapD_render_vega_result& operator=(const MapD_render_vega_result&);
  MapD_render_vega_result() {
  }

  virtual ~MapD_render_vega_result() throw();
  TRenderResult success;
  TMapDException e;

  _MapD_render_vega_result__isset __isset;

  void __set_success(const TRenderResult& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_render_vega_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_render_vega_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_render_vega_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_render_vega_presult__isset {
  _MapD_render_vega_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_render_vega_presult__isset;

class MapD_render_vega_presult {
 public:


  virtual ~MapD_render_vega_presult() throw();
  TRenderResult* success;
  TMapDException e;

  _MapD_render_vega_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_result_row_for_pixel_args__isset {
  _MapD_get_result_row_for_pixel_args__isset() : session(false), widget_id(false), pixel(false), table_col_names(false), column_format(false), pixelRadius(false), nonce(false) {}
  bool session :1;
  bool widget_id :1;
  bool pixel :1;
  bool table_col_names :1;
  bool column_format :1;
  bool pixelRadius :1;
  bool nonce :1;
} _MapD_get_result_row_for_pixel_args__isset;

class MapD_get_result_row_for_pixel_args {
 public:

  MapD_get_result_row_for_pixel_args(const MapD_get_result_row_for_pixel_args&);
  MapD_get_result_row_for_pixel_args& operator=(const MapD_get_result_row_for_pixel_args&);
  MapD_get_result_row_for_pixel_args() : session(), widget_id(0), column_format(0), pixelRadius(0), nonce() {
  }

  virtual ~MapD_get_result_row_for_pixel_args() throw();
  TSessionId session;
  int64_t widget_id;
  TPixel pixel;
  std::map<std::string, std::vector<std::string> >  table_col_names;
  bool column_format;
  int32_t pixelRadius;
  std::string nonce;

  _MapD_get_result_row_for_pixel_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_widget_id(const int64_t val);

  void __set_pixel(const TPixel& val);

  void __set_table_col_names(const std::map<std::string, std::vector<std::string> > & val);

  void __set_column_format(const bool val);

  void __set_pixelRadius(const int32_t val);

  void __set_nonce(const std::string& val);

  bool operator == (const MapD_get_result_row_for_pixel_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(widget_id == rhs.widget_id))
      return false;
    if (!(pixel == rhs.pixel))
      return false;
    if (!(table_col_names == rhs.table_col_names))
      return false;
    if (!(column_format == rhs.column_format))
      return false;
    if (!(pixelRadius == rhs.pixelRadius))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const MapD_get_result_row_for_pixel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_result_row_for_pixel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_result_row_for_pixel_pargs {
 public:


  virtual ~MapD_get_result_row_for_pixel_pargs() throw();
  const TSessionId* session;
  const int64_t* widget_id;
  const TPixel* pixel;
  const std::map<std::string, std::vector<std::string> > * table_col_names;
  const bool* column_format;
  const int32_t* pixelRadius;
  const std::string* nonce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_result_row_for_pixel_result__isset {
  _MapD_get_result_row_for_pixel_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_result_row_for_pixel_result__isset;

class MapD_get_result_row_for_pixel_result {
 public:

  MapD_get_result_row_for_pixel_result(const MapD_get_result_row_for_pixel_result&);
  MapD_get_result_row_for_pixel_result& operator=(const MapD_get_result_row_for_pixel_result&);
  MapD_get_result_row_for_pixel_result() {
  }

  virtual ~MapD_get_result_row_for_pixel_result() throw();
  TPixelTableRowResult success;
  TMapDException e;

  _MapD_get_result_row_for_pixel_result__isset __isset;

  void __set_success(const TPixelTableRowResult& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_result_row_for_pixel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_result_row_for_pixel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_result_row_for_pixel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_result_row_for_pixel_presult__isset {
  _MapD_get_result_row_for_pixel_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_result_row_for_pixel_presult__isset;

class MapD_get_result_row_for_pixel_presult {
 public:


  virtual ~MapD_get_result_row_for_pixel_presult() throw();
  TPixelTableRowResult* success;
  TMapDException e;

  _MapD_get_result_row_for_pixel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_frontend_view_args__isset {
  _MapD_get_frontend_view_args__isset() : session(false), view_name(false) {}
  bool session :1;
  bool view_name :1;
} _MapD_get_frontend_view_args__isset;

class MapD_get_frontend_view_args {
 public:

  MapD_get_frontend_view_args(const MapD_get_frontend_view_args&);
  MapD_get_frontend_view_args& operator=(const MapD_get_frontend_view_args&);
  MapD_get_frontend_view_args() : session(), view_name() {
  }

  virtual ~MapD_get_frontend_view_args() throw();
  TSessionId session;
  std::string view_name;

  _MapD_get_frontend_view_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_view_name(const std::string& val);

  bool operator == (const MapD_get_frontend_view_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(view_name == rhs.view_name))
      return false;
    return true;
  }
  bool operator != (const MapD_get_frontend_view_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_frontend_view_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_frontend_view_pargs {
 public:


  virtual ~MapD_get_frontend_view_pargs() throw();
  const TSessionId* session;
  const std::string* view_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_frontend_view_result__isset {
  _MapD_get_frontend_view_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_frontend_view_result__isset;

class MapD_get_frontend_view_result {
 public:

  MapD_get_frontend_view_result(const MapD_get_frontend_view_result&);
  MapD_get_frontend_view_result& operator=(const MapD_get_frontend_view_result&);
  MapD_get_frontend_view_result() {
  }

  virtual ~MapD_get_frontend_view_result() throw();
  TFrontendView success;
  TMapDException e;

  _MapD_get_frontend_view_result__isset __isset;

  void __set_success(const TFrontendView& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_frontend_view_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_frontend_view_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_frontend_view_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_frontend_view_presult__isset {
  _MapD_get_frontend_view_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_frontend_view_presult__isset;

class MapD_get_frontend_view_presult {
 public:


  virtual ~MapD_get_frontend_view_presult() throw();
  TFrontendView* success;
  TMapDException e;

  _MapD_get_frontend_view_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_frontend_views_args__isset {
  _MapD_get_frontend_views_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_frontend_views_args__isset;

class MapD_get_frontend_views_args {
 public:

  MapD_get_frontend_views_args(const MapD_get_frontend_views_args&);
  MapD_get_frontend_views_args& operator=(const MapD_get_frontend_views_args&);
  MapD_get_frontend_views_args() : session() {
  }

  virtual ~MapD_get_frontend_views_args() throw();
  TSessionId session;

  _MapD_get_frontend_views_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_frontend_views_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_frontend_views_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_frontend_views_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_frontend_views_pargs {
 public:


  virtual ~MapD_get_frontend_views_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_frontend_views_result__isset {
  _MapD_get_frontend_views_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_frontend_views_result__isset;

class MapD_get_frontend_views_result {
 public:

  MapD_get_frontend_views_result(const MapD_get_frontend_views_result&);
  MapD_get_frontend_views_result& operator=(const MapD_get_frontend_views_result&);
  MapD_get_frontend_views_result() {
  }

  virtual ~MapD_get_frontend_views_result() throw();
  std::vector<TFrontendView>  success;
  TMapDException e;

  _MapD_get_frontend_views_result__isset __isset;

  void __set_success(const std::vector<TFrontendView> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_frontend_views_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_frontend_views_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_frontend_views_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_frontend_views_presult__isset {
  _MapD_get_frontend_views_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_frontend_views_presult__isset;

class MapD_get_frontend_views_presult {
 public:


  virtual ~MapD_get_frontend_views_presult() throw();
  std::vector<TFrontendView> * success;
  TMapDException e;

  _MapD_get_frontend_views_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_create_frontend_view_args__isset {
  _MapD_create_frontend_view_args__isset() : session(false), view_name(false), view_state(false), image_hash(false), view_metadata(false) {}
  bool session :1;
  bool view_name :1;
  bool view_state :1;
  bool image_hash :1;
  bool view_metadata :1;
} _MapD_create_frontend_view_args__isset;

class MapD_create_frontend_view_args {
 public:

  MapD_create_frontend_view_args(const MapD_create_frontend_view_args&);
  MapD_create_frontend_view_args& operator=(const MapD_create_frontend_view_args&);
  MapD_create_frontend_view_args() : session(), view_name(), view_state(), image_hash(), view_metadata() {
  }

  virtual ~MapD_create_frontend_view_args() throw();
  TSessionId session;
  std::string view_name;
  std::string view_state;
  std::string image_hash;
  std::string view_metadata;

  _MapD_create_frontend_view_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_view_name(const std::string& val);

  void __set_view_state(const std::string& val);

  void __set_image_hash(const std::string& val);

  void __set_view_metadata(const std::string& val);

  bool operator == (const MapD_create_frontend_view_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(view_name == rhs.view_name))
      return false;
    if (!(view_state == rhs.view_state))
      return false;
    if (!(image_hash == rhs.image_hash))
      return false;
    if (!(view_metadata == rhs.view_metadata))
      return false;
    return true;
  }
  bool operator != (const MapD_create_frontend_view_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_create_frontend_view_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_create_frontend_view_pargs {
 public:


  virtual ~MapD_create_frontend_view_pargs() throw();
  const TSessionId* session;
  const std::string* view_name;
  const std::string* view_state;
  const std::string* image_hash;
  const std::string* view_metadata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_create_frontend_view_result__isset {
  _MapD_create_frontend_view_result__isset() : e(false) {}
  bool e :1;
} _MapD_create_frontend_view_result__isset;

class MapD_create_frontend_view_result {
 public:

  MapD_create_frontend_view_result(const MapD_create_frontend_view_result&);
  MapD_create_frontend_view_result& operator=(const MapD_create_frontend_view_result&);
  MapD_create_frontend_view_result() {
  }

  virtual ~MapD_create_frontend_view_result() throw();
  TMapDException e;

  _MapD_create_frontend_view_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_create_frontend_view_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_create_frontend_view_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_create_frontend_view_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_create_frontend_view_presult__isset {
  _MapD_create_frontend_view_presult__isset() : e(false) {}
  bool e :1;
} _MapD_create_frontend_view_presult__isset;

class MapD_create_frontend_view_presult {
 public:


  virtual ~MapD_create_frontend_view_presult() throw();
  TMapDException e;

  _MapD_create_frontend_view_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_delete_frontend_view_args__isset {
  _MapD_delete_frontend_view_args__isset() : session(false), view_name(false) {}
  bool session :1;
  bool view_name :1;
} _MapD_delete_frontend_view_args__isset;

class MapD_delete_frontend_view_args {
 public:

  MapD_delete_frontend_view_args(const MapD_delete_frontend_view_args&);
  MapD_delete_frontend_view_args& operator=(const MapD_delete_frontend_view_args&);
  MapD_delete_frontend_view_args() : session(), view_name() {
  }

  virtual ~MapD_delete_frontend_view_args() throw();
  TSessionId session;
  std::string view_name;

  _MapD_delete_frontend_view_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_view_name(const std::string& val);

  bool operator == (const MapD_delete_frontend_view_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(view_name == rhs.view_name))
      return false;
    return true;
  }
  bool operator != (const MapD_delete_frontend_view_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_delete_frontend_view_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_delete_frontend_view_pargs {
 public:


  virtual ~MapD_delete_frontend_view_pargs() throw();
  const TSessionId* session;
  const std::string* view_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_delete_frontend_view_result__isset {
  _MapD_delete_frontend_view_result__isset() : e(false) {}
  bool e :1;
} _MapD_delete_frontend_view_result__isset;

class MapD_delete_frontend_view_result {
 public:

  MapD_delete_frontend_view_result(const MapD_delete_frontend_view_result&);
  MapD_delete_frontend_view_result& operator=(const MapD_delete_frontend_view_result&);
  MapD_delete_frontend_view_result() {
  }

  virtual ~MapD_delete_frontend_view_result() throw();
  TMapDException e;

  _MapD_delete_frontend_view_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_delete_frontend_view_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_delete_frontend_view_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_delete_frontend_view_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_delete_frontend_view_presult__isset {
  _MapD_delete_frontend_view_presult__isset() : e(false) {}
  bool e :1;
} _MapD_delete_frontend_view_presult__isset;

class MapD_delete_frontend_view_presult {
 public:


  virtual ~MapD_delete_frontend_view_presult() throw();
  TMapDException e;

  _MapD_delete_frontend_view_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_dashboard_args__isset {
  _MapD_get_dashboard_args__isset() : session(false), dashboard_id(false) {}
  bool session :1;
  bool dashboard_id :1;
} _MapD_get_dashboard_args__isset;

class MapD_get_dashboard_args {
 public:

  MapD_get_dashboard_args(const MapD_get_dashboard_args&);
  MapD_get_dashboard_args& operator=(const MapD_get_dashboard_args&);
  MapD_get_dashboard_args() : session(), dashboard_id(0) {
  }

  virtual ~MapD_get_dashboard_args() throw();
  TSessionId session;
  int32_t dashboard_id;

  _MapD_get_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  bool operator == (const MapD_get_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    return true;
  }
  bool operator != (const MapD_get_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_dashboard_pargs {
 public:


  virtual ~MapD_get_dashboard_pargs() throw();
  const TSessionId* session;
  const int32_t* dashboard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_dashboard_result__isset {
  _MapD_get_dashboard_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_dashboard_result__isset;

class MapD_get_dashboard_result {
 public:

  MapD_get_dashboard_result(const MapD_get_dashboard_result&);
  MapD_get_dashboard_result& operator=(const MapD_get_dashboard_result&);
  MapD_get_dashboard_result() {
  }

  virtual ~MapD_get_dashboard_result() throw();
  TDashboard success;
  TMapDException e;

  _MapD_get_dashboard_result__isset __isset;

  void __set_success(const TDashboard& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_dashboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_dashboard_presult__isset {
  _MapD_get_dashboard_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_dashboard_presult__isset;

class MapD_get_dashboard_presult {
 public:


  virtual ~MapD_get_dashboard_presult() throw();
  TDashboard* success;
  TMapDException e;

  _MapD_get_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_dashboards_args__isset {
  _MapD_get_dashboards_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_dashboards_args__isset;

class MapD_get_dashboards_args {
 public:

  MapD_get_dashboards_args(const MapD_get_dashboards_args&);
  MapD_get_dashboards_args& operator=(const MapD_get_dashboards_args&);
  MapD_get_dashboards_args() : session() {
  }

  virtual ~MapD_get_dashboards_args() throw();
  TSessionId session;

  _MapD_get_dashboards_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_dashboards_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_dashboards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_dashboards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_dashboards_pargs {
 public:


  virtual ~MapD_get_dashboards_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_dashboards_result__isset {
  _MapD_get_dashboards_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_dashboards_result__isset;

class MapD_get_dashboards_result {
 public:

  MapD_get_dashboards_result(const MapD_get_dashboards_result&);
  MapD_get_dashboards_result& operator=(const MapD_get_dashboards_result&);
  MapD_get_dashboards_result() {
  }

  virtual ~MapD_get_dashboards_result() throw();
  std::vector<TDashboard>  success;
  TMapDException e;

  _MapD_get_dashboards_result__isset __isset;

  void __set_success(const std::vector<TDashboard> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_dashboards_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_dashboards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_dashboards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_dashboards_presult__isset {
  _MapD_get_dashboards_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_dashboards_presult__isset;

class MapD_get_dashboards_presult {
 public:


  virtual ~MapD_get_dashboards_presult() throw();
  std::vector<TDashboard> * success;
  TMapDException e;

  _MapD_get_dashboards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_create_dashboard_args__isset {
  _MapD_create_dashboard_args__isset() : session(false), dashboard_name(false), dashboard_state(false), image_hash(false), dashboard_metadata(false) {}
  bool session :1;
  bool dashboard_name :1;
  bool dashboard_state :1;
  bool image_hash :1;
  bool dashboard_metadata :1;
} _MapD_create_dashboard_args__isset;

class MapD_create_dashboard_args {
 public:

  MapD_create_dashboard_args(const MapD_create_dashboard_args&);
  MapD_create_dashboard_args& operator=(const MapD_create_dashboard_args&);
  MapD_create_dashboard_args() : session(), dashboard_name(), dashboard_state(), image_hash(), dashboard_metadata() {
  }

  virtual ~MapD_create_dashboard_args() throw();
  TSessionId session;
  std::string dashboard_name;
  std::string dashboard_state;
  std::string image_hash;
  std::string dashboard_metadata;

  _MapD_create_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_name(const std::string& val);

  void __set_dashboard_state(const std::string& val);

  void __set_image_hash(const std::string& val);

  void __set_dashboard_metadata(const std::string& val);

  bool operator == (const MapD_create_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_name == rhs.dashboard_name))
      return false;
    if (!(dashboard_state == rhs.dashboard_state))
      return false;
    if (!(image_hash == rhs.image_hash))
      return false;
    if (!(dashboard_metadata == rhs.dashboard_metadata))
      return false;
    return true;
  }
  bool operator != (const MapD_create_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_create_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_create_dashboard_pargs {
 public:


  virtual ~MapD_create_dashboard_pargs() throw();
  const TSessionId* session;
  const std::string* dashboard_name;
  const std::string* dashboard_state;
  const std::string* image_hash;
  const std::string* dashboard_metadata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_create_dashboard_result__isset {
  _MapD_create_dashboard_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_create_dashboard_result__isset;

class MapD_create_dashboard_result {
 public:

  MapD_create_dashboard_result(const MapD_create_dashboard_result&);
  MapD_create_dashboard_result& operator=(const MapD_create_dashboard_result&);
  MapD_create_dashboard_result() : success(0) {
  }

  virtual ~MapD_create_dashboard_result() throw();
  int32_t success;
  TMapDException e;

  _MapD_create_dashboard_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_create_dashboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_create_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_create_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_create_dashboard_presult__isset {
  _MapD_create_dashboard_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_create_dashboard_presult__isset;

class MapD_create_dashboard_presult {
 public:


  virtual ~MapD_create_dashboard_presult() throw();
  int32_t* success;
  TMapDException e;

  _MapD_create_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_replace_dashboard_args__isset {
  _MapD_replace_dashboard_args__isset() : session(false), dashboard_id(false), dashboard_name(false), dashboard_owner(false), dashboard_state(false), image_hash(false), dashboard_metadata(false) {}
  bool session :1;
  bool dashboard_id :1;
  bool dashboard_name :1;
  bool dashboard_owner :1;
  bool dashboard_state :1;
  bool image_hash :1;
  bool dashboard_metadata :1;
} _MapD_replace_dashboard_args__isset;

class MapD_replace_dashboard_args {
 public:

  MapD_replace_dashboard_args(const MapD_replace_dashboard_args&);
  MapD_replace_dashboard_args& operator=(const MapD_replace_dashboard_args&);
  MapD_replace_dashboard_args() : session(), dashboard_id(0), dashboard_name(), dashboard_owner(), dashboard_state(), image_hash(), dashboard_metadata() {
  }

  virtual ~MapD_replace_dashboard_args() throw();
  TSessionId session;
  int32_t dashboard_id;
  std::string dashboard_name;
  std::string dashboard_owner;
  std::string dashboard_state;
  std::string image_hash;
  std::string dashboard_metadata;

  _MapD_replace_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  void __set_dashboard_name(const std::string& val);

  void __set_dashboard_owner(const std::string& val);

  void __set_dashboard_state(const std::string& val);

  void __set_image_hash(const std::string& val);

  void __set_dashboard_metadata(const std::string& val);

  bool operator == (const MapD_replace_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    if (!(dashboard_name == rhs.dashboard_name))
      return false;
    if (!(dashboard_owner == rhs.dashboard_owner))
      return false;
    if (!(dashboard_state == rhs.dashboard_state))
      return false;
    if (!(image_hash == rhs.image_hash))
      return false;
    if (!(dashboard_metadata == rhs.dashboard_metadata))
      return false;
    return true;
  }
  bool operator != (const MapD_replace_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_replace_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_replace_dashboard_pargs {
 public:


  virtual ~MapD_replace_dashboard_pargs() throw();
  const TSessionId* session;
  const int32_t* dashboard_id;
  const std::string* dashboard_name;
  const std::string* dashboard_owner;
  const std::string* dashboard_state;
  const std::string* image_hash;
  const std::string* dashboard_metadata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_replace_dashboard_result__isset {
  _MapD_replace_dashboard_result__isset() : e(false) {}
  bool e :1;
} _MapD_replace_dashboard_result__isset;

class MapD_replace_dashboard_result {
 public:

  MapD_replace_dashboard_result(const MapD_replace_dashboard_result&);
  MapD_replace_dashboard_result& operator=(const MapD_replace_dashboard_result&);
  MapD_replace_dashboard_result() {
  }

  virtual ~MapD_replace_dashboard_result() throw();
  TMapDException e;

  _MapD_replace_dashboard_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_replace_dashboard_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_replace_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_replace_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_replace_dashboard_presult__isset {
  _MapD_replace_dashboard_presult__isset() : e(false) {}
  bool e :1;
} _MapD_replace_dashboard_presult__isset;

class MapD_replace_dashboard_presult {
 public:


  virtual ~MapD_replace_dashboard_presult() throw();
  TMapDException e;

  _MapD_replace_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_delete_dashboard_args__isset {
  _MapD_delete_dashboard_args__isset() : session(false), dashboard_id(false) {}
  bool session :1;
  bool dashboard_id :1;
} _MapD_delete_dashboard_args__isset;

class MapD_delete_dashboard_args {
 public:

  MapD_delete_dashboard_args(const MapD_delete_dashboard_args&);
  MapD_delete_dashboard_args& operator=(const MapD_delete_dashboard_args&);
  MapD_delete_dashboard_args() : session(), dashboard_id(0) {
  }

  virtual ~MapD_delete_dashboard_args() throw();
  TSessionId session;
  int32_t dashboard_id;

  _MapD_delete_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  bool operator == (const MapD_delete_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    return true;
  }
  bool operator != (const MapD_delete_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_delete_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_delete_dashboard_pargs {
 public:


  virtual ~MapD_delete_dashboard_pargs() throw();
  const TSessionId* session;
  const int32_t* dashboard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_delete_dashboard_result__isset {
  _MapD_delete_dashboard_result__isset() : e(false) {}
  bool e :1;
} _MapD_delete_dashboard_result__isset;

class MapD_delete_dashboard_result {
 public:

  MapD_delete_dashboard_result(const MapD_delete_dashboard_result&);
  MapD_delete_dashboard_result& operator=(const MapD_delete_dashboard_result&);
  MapD_delete_dashboard_result() {
  }

  virtual ~MapD_delete_dashboard_result() throw();
  TMapDException e;

  _MapD_delete_dashboard_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_delete_dashboard_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_delete_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_delete_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_delete_dashboard_presult__isset {
  _MapD_delete_dashboard_presult__isset() : e(false) {}
  bool e :1;
} _MapD_delete_dashboard_presult__isset;

class MapD_delete_dashboard_presult {
 public:


  virtual ~MapD_delete_dashboard_presult() throw();
  TMapDException e;

  _MapD_delete_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_share_dashboard_args__isset {
  _MapD_share_dashboard_args__isset() : session(false), dashboard_id(false), groups(false), objects(false), permissions(false), grant_role(true) {}
  bool session :1;
  bool dashboard_id :1;
  bool groups :1;
  bool objects :1;
  bool permissions :1;
  bool grant_role :1;
} _MapD_share_dashboard_args__isset;

class MapD_share_dashboard_args {
 public:

  MapD_share_dashboard_args(const MapD_share_dashboard_args&);
  MapD_share_dashboard_args& operator=(const MapD_share_dashboard_args&);
  MapD_share_dashboard_args() : session(), dashboard_id(0), grant_role(false) {
  }

  virtual ~MapD_share_dashboard_args() throw();
  TSessionId session;
  int32_t dashboard_id;
  std::vector<std::string>  groups;
  std::vector<std::string>  objects;
  TDashboardPermissions permissions;
  bool grant_role;

  _MapD_share_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  void __set_groups(const std::vector<std::string> & val);

  void __set_objects(const std::vector<std::string> & val);

  void __set_permissions(const TDashboardPermissions& val);

  void __set_grant_role(const bool val);

  bool operator == (const MapD_share_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    if (!(groups == rhs.groups))
      return false;
    if (!(objects == rhs.objects))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    if (!(grant_role == rhs.grant_role))
      return false;
    return true;
  }
  bool operator != (const MapD_share_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_share_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_share_dashboard_pargs {
 public:


  virtual ~MapD_share_dashboard_pargs() throw();
  const TSessionId* session;
  const int32_t* dashboard_id;
  const std::vector<std::string> * groups;
  const std::vector<std::string> * objects;
  const TDashboardPermissions* permissions;
  const bool* grant_role;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_share_dashboard_result__isset {
  _MapD_share_dashboard_result__isset() : e(false) {}
  bool e :1;
} _MapD_share_dashboard_result__isset;

class MapD_share_dashboard_result {
 public:

  MapD_share_dashboard_result(const MapD_share_dashboard_result&);
  MapD_share_dashboard_result& operator=(const MapD_share_dashboard_result&);
  MapD_share_dashboard_result() {
  }

  virtual ~MapD_share_dashboard_result() throw();
  TMapDException e;

  _MapD_share_dashboard_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_share_dashboard_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_share_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_share_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_share_dashboard_presult__isset {
  _MapD_share_dashboard_presult__isset() : e(false) {}
  bool e :1;
} _MapD_share_dashboard_presult__isset;

class MapD_share_dashboard_presult {
 public:


  virtual ~MapD_share_dashboard_presult() throw();
  TMapDException e;

  _MapD_share_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_unshare_dashboard_args__isset {
  _MapD_unshare_dashboard_args__isset() : session(false), dashboard_id(false), groups(false), objects(false), permissions(false) {}
  bool session :1;
  bool dashboard_id :1;
  bool groups :1;
  bool objects :1;
  bool permissions :1;
} _MapD_unshare_dashboard_args__isset;

class MapD_unshare_dashboard_args {
 public:

  MapD_unshare_dashboard_args(const MapD_unshare_dashboard_args&);
  MapD_unshare_dashboard_args& operator=(const MapD_unshare_dashboard_args&);
  MapD_unshare_dashboard_args() : session(), dashboard_id(0) {
  }

  virtual ~MapD_unshare_dashboard_args() throw();
  TSessionId session;
  int32_t dashboard_id;
  std::vector<std::string>  groups;
  std::vector<std::string>  objects;
  TDashboardPermissions permissions;

  _MapD_unshare_dashboard_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  void __set_groups(const std::vector<std::string> & val);

  void __set_objects(const std::vector<std::string> & val);

  void __set_permissions(const TDashboardPermissions& val);

  bool operator == (const MapD_unshare_dashboard_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    if (!(groups == rhs.groups))
      return false;
    if (!(objects == rhs.objects))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const MapD_unshare_dashboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_unshare_dashboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_unshare_dashboard_pargs {
 public:


  virtual ~MapD_unshare_dashboard_pargs() throw();
  const TSessionId* session;
  const int32_t* dashboard_id;
  const std::vector<std::string> * groups;
  const std::vector<std::string> * objects;
  const TDashboardPermissions* permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_unshare_dashboard_result__isset {
  _MapD_unshare_dashboard_result__isset() : e(false) {}
  bool e :1;
} _MapD_unshare_dashboard_result__isset;

class MapD_unshare_dashboard_result {
 public:

  MapD_unshare_dashboard_result(const MapD_unshare_dashboard_result&);
  MapD_unshare_dashboard_result& operator=(const MapD_unshare_dashboard_result&);
  MapD_unshare_dashboard_result() {
  }

  virtual ~MapD_unshare_dashboard_result() throw();
  TMapDException e;

  _MapD_unshare_dashboard_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_unshare_dashboard_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_unshare_dashboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_unshare_dashboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_unshare_dashboard_presult__isset {
  _MapD_unshare_dashboard_presult__isset() : e(false) {}
  bool e :1;
} _MapD_unshare_dashboard_presult__isset;

class MapD_unshare_dashboard_presult {
 public:


  virtual ~MapD_unshare_dashboard_presult() throw();
  TMapDException e;

  _MapD_unshare_dashboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_dashboard_grantees_args__isset {
  _MapD_get_dashboard_grantees_args__isset() : session(false), dashboard_id(false) {}
  bool session :1;
  bool dashboard_id :1;
} _MapD_get_dashboard_grantees_args__isset;

class MapD_get_dashboard_grantees_args {
 public:

  MapD_get_dashboard_grantees_args(const MapD_get_dashboard_grantees_args&);
  MapD_get_dashboard_grantees_args& operator=(const MapD_get_dashboard_grantees_args&);
  MapD_get_dashboard_grantees_args() : session(), dashboard_id(0) {
  }

  virtual ~MapD_get_dashboard_grantees_args() throw();
  TSessionId session;
  int32_t dashboard_id;

  _MapD_get_dashboard_grantees_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_dashboard_id(const int32_t val);

  bool operator == (const MapD_get_dashboard_grantees_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(dashboard_id == rhs.dashboard_id))
      return false;
    return true;
  }
  bool operator != (const MapD_get_dashboard_grantees_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_dashboard_grantees_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_dashboard_grantees_pargs {
 public:


  virtual ~MapD_get_dashboard_grantees_pargs() throw();
  const TSessionId* session;
  const int32_t* dashboard_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_dashboard_grantees_result__isset {
  _MapD_get_dashboard_grantees_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_dashboard_grantees_result__isset;

class MapD_get_dashboard_grantees_result {
 public:

  MapD_get_dashboard_grantees_result(const MapD_get_dashboard_grantees_result&);
  MapD_get_dashboard_grantees_result& operator=(const MapD_get_dashboard_grantees_result&);
  MapD_get_dashboard_grantees_result() {
  }

  virtual ~MapD_get_dashboard_grantees_result() throw();
  std::vector<TDashboardGrantees>  success;
  TMapDException e;

  _MapD_get_dashboard_grantees_result__isset __isset;

  void __set_success(const std::vector<TDashboardGrantees> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_dashboard_grantees_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_dashboard_grantees_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_dashboard_grantees_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_dashboard_grantees_presult__isset {
  _MapD_get_dashboard_grantees_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_dashboard_grantees_presult__isset;

class MapD_get_dashboard_grantees_presult {
 public:


  virtual ~MapD_get_dashboard_grantees_presult() throw();
  std::vector<TDashboardGrantees> * success;
  TMapDException e;

  _MapD_get_dashboard_grantees_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_link_view_args__isset {
  _MapD_get_link_view_args__isset() : session(false), link(false) {}
  bool session :1;
  bool link :1;
} _MapD_get_link_view_args__isset;

class MapD_get_link_view_args {
 public:

  MapD_get_link_view_args(const MapD_get_link_view_args&);
  MapD_get_link_view_args& operator=(const MapD_get_link_view_args&);
  MapD_get_link_view_args() : session(), link() {
  }

  virtual ~MapD_get_link_view_args() throw();
  TSessionId session;
  std::string link;

  _MapD_get_link_view_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_link(const std::string& val);

  bool operator == (const MapD_get_link_view_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(link == rhs.link))
      return false;
    return true;
  }
  bool operator != (const MapD_get_link_view_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_link_view_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_link_view_pargs {
 public:


  virtual ~MapD_get_link_view_pargs() throw();
  const TSessionId* session;
  const std::string* link;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_link_view_result__isset {
  _MapD_get_link_view_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_link_view_result__isset;

class MapD_get_link_view_result {
 public:

  MapD_get_link_view_result(const MapD_get_link_view_result&);
  MapD_get_link_view_result& operator=(const MapD_get_link_view_result&);
  MapD_get_link_view_result() {
  }

  virtual ~MapD_get_link_view_result() throw();
  TFrontendView success;
  TMapDException e;

  _MapD_get_link_view_result__isset __isset;

  void __set_success(const TFrontendView& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_link_view_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_link_view_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_link_view_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_link_view_presult__isset {
  _MapD_get_link_view_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_link_view_presult__isset;

class MapD_get_link_view_presult {
 public:


  virtual ~MapD_get_link_view_presult() throw();
  TFrontendView* success;
  TMapDException e;

  _MapD_get_link_view_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_create_link_args__isset {
  _MapD_create_link_args__isset() : session(false), view_state(false), view_metadata(false) {}
  bool session :1;
  bool view_state :1;
  bool view_metadata :1;
} _MapD_create_link_args__isset;

class MapD_create_link_args {
 public:

  MapD_create_link_args(const MapD_create_link_args&);
  MapD_create_link_args& operator=(const MapD_create_link_args&);
  MapD_create_link_args() : session(), view_state(), view_metadata() {
  }

  virtual ~MapD_create_link_args() throw();
  TSessionId session;
  std::string view_state;
  std::string view_metadata;

  _MapD_create_link_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_view_state(const std::string& val);

  void __set_view_metadata(const std::string& val);

  bool operator == (const MapD_create_link_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(view_state == rhs.view_state))
      return false;
    if (!(view_metadata == rhs.view_metadata))
      return false;
    return true;
  }
  bool operator != (const MapD_create_link_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_create_link_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_create_link_pargs {
 public:


  virtual ~MapD_create_link_pargs() throw();
  const TSessionId* session;
  const std::string* view_state;
  const std::string* view_metadata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_create_link_result__isset {
  _MapD_create_link_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_create_link_result__isset;

class MapD_create_link_result {
 public:

  MapD_create_link_result(const MapD_create_link_result&);
  MapD_create_link_result& operator=(const MapD_create_link_result&);
  MapD_create_link_result() : success() {
  }

  virtual ~MapD_create_link_result() throw();
  std::string success;
  TMapDException e;

  _MapD_create_link_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_create_link_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_create_link_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_create_link_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_create_link_presult__isset {
  _MapD_create_link_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_create_link_presult__isset;

class MapD_create_link_presult {
 public:


  virtual ~MapD_create_link_presult() throw();
  std::string* success;
  TMapDException e;

  _MapD_create_link_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_load_table_binary_args__isset {
  _MapD_load_table_binary_args__isset() : session(false), table_name(false), rows(false) {}
  bool session :1;
  bool table_name :1;
  bool rows :1;
} _MapD_load_table_binary_args__isset;

class MapD_load_table_binary_args {
 public:

  MapD_load_table_binary_args(const MapD_load_table_binary_args&);
  MapD_load_table_binary_args& operator=(const MapD_load_table_binary_args&);
  MapD_load_table_binary_args() : session(), table_name() {
  }

  virtual ~MapD_load_table_binary_args() throw();
  TSessionId session;
  std::string table_name;
  std::vector<TRow>  rows;

  _MapD_load_table_binary_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_rows(const std::vector<TRow> & val);

  bool operator == (const MapD_load_table_binary_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(rows == rhs.rows))
      return false;
    return true;
  }
  bool operator != (const MapD_load_table_binary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_load_table_binary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_load_table_binary_pargs {
 public:


  virtual ~MapD_load_table_binary_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;
  const std::vector<TRow> * rows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_load_table_binary_result__isset {
  _MapD_load_table_binary_result__isset() : e(false) {}
  bool e :1;
} _MapD_load_table_binary_result__isset;

class MapD_load_table_binary_result {
 public:

  MapD_load_table_binary_result(const MapD_load_table_binary_result&);
  MapD_load_table_binary_result& operator=(const MapD_load_table_binary_result&);
  MapD_load_table_binary_result() {
  }

  virtual ~MapD_load_table_binary_result() throw();
  TMapDException e;

  _MapD_load_table_binary_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_load_table_binary_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_load_table_binary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_load_table_binary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_load_table_binary_presult__isset {
  _MapD_load_table_binary_presult__isset() : e(false) {}
  bool e :1;
} _MapD_load_table_binary_presult__isset;

class MapD_load_table_binary_presult {
 public:


  virtual ~MapD_load_table_binary_presult() throw();
  TMapDException e;

  _MapD_load_table_binary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_load_table_binary_columnar_args__isset {
  _MapD_load_table_binary_columnar_args__isset() : session(false), table_name(false), cols(false) {}
  bool session :1;
  bool table_name :1;
  bool cols :1;
} _MapD_load_table_binary_columnar_args__isset;

class MapD_load_table_binary_columnar_args {
 public:

  MapD_load_table_binary_columnar_args(const MapD_load_table_binary_columnar_args&);
  MapD_load_table_binary_columnar_args& operator=(const MapD_load_table_binary_columnar_args&);
  MapD_load_table_binary_columnar_args() : session(), table_name() {
  }

  virtual ~MapD_load_table_binary_columnar_args() throw();
  TSessionId session;
  std::string table_name;
  std::vector<TColumn>  cols;

  _MapD_load_table_binary_columnar_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_cols(const std::vector<TColumn> & val);

  bool operator == (const MapD_load_table_binary_columnar_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(cols == rhs.cols))
      return false;
    return true;
  }
  bool operator != (const MapD_load_table_binary_columnar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_load_table_binary_columnar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_load_table_binary_columnar_pargs {
 public:


  virtual ~MapD_load_table_binary_columnar_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;
  const std::vector<TColumn> * cols;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_load_table_binary_columnar_result__isset {
  _MapD_load_table_binary_columnar_result__isset() : e(false) {}
  bool e :1;
} _MapD_load_table_binary_columnar_result__isset;

class MapD_load_table_binary_columnar_result {
 public:

  MapD_load_table_binary_columnar_result(const MapD_load_table_binary_columnar_result&);
  MapD_load_table_binary_columnar_result& operator=(const MapD_load_table_binary_columnar_result&);
  MapD_load_table_binary_columnar_result() {
  }

  virtual ~MapD_load_table_binary_columnar_result() throw();
  TMapDException e;

  _MapD_load_table_binary_columnar_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_load_table_binary_columnar_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_load_table_binary_columnar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_load_table_binary_columnar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_load_table_binary_columnar_presult__isset {
  _MapD_load_table_binary_columnar_presult__isset() : e(false) {}
  bool e :1;
} _MapD_load_table_binary_columnar_presult__isset;

class MapD_load_table_binary_columnar_presult {
 public:


  virtual ~MapD_load_table_binary_columnar_presult() throw();
  TMapDException e;

  _MapD_load_table_binary_columnar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_load_table_binary_arrow_args__isset {
  _MapD_load_table_binary_arrow_args__isset() : session(false), table_name(false), arrow_stream(false) {}
  bool session :1;
  bool table_name :1;
  bool arrow_stream :1;
} _MapD_load_table_binary_arrow_args__isset;

class MapD_load_table_binary_arrow_args {
 public:

  MapD_load_table_binary_arrow_args(const MapD_load_table_binary_arrow_args&);
  MapD_load_table_binary_arrow_args& operator=(const MapD_load_table_binary_arrow_args&);
  MapD_load_table_binary_arrow_args() : session(), table_name(), arrow_stream() {
  }

  virtual ~MapD_load_table_binary_arrow_args() throw();
  TSessionId session;
  std::string table_name;
  std::string arrow_stream;

  _MapD_load_table_binary_arrow_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_arrow_stream(const std::string& val);

  bool operator == (const MapD_load_table_binary_arrow_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(arrow_stream == rhs.arrow_stream))
      return false;
    return true;
  }
  bool operator != (const MapD_load_table_binary_arrow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_load_table_binary_arrow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_load_table_binary_arrow_pargs {
 public:


  virtual ~MapD_load_table_binary_arrow_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;
  const std::string* arrow_stream;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_load_table_binary_arrow_result__isset {
  _MapD_load_table_binary_arrow_result__isset() : e(false) {}
  bool e :1;
} _MapD_load_table_binary_arrow_result__isset;

class MapD_load_table_binary_arrow_result {
 public:

  MapD_load_table_binary_arrow_result(const MapD_load_table_binary_arrow_result&);
  MapD_load_table_binary_arrow_result& operator=(const MapD_load_table_binary_arrow_result&);
  MapD_load_table_binary_arrow_result() {
  }

  virtual ~MapD_load_table_binary_arrow_result() throw();
  TMapDException e;

  _MapD_load_table_binary_arrow_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_load_table_binary_arrow_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_load_table_binary_arrow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_load_table_binary_arrow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_load_table_binary_arrow_presult__isset {
  _MapD_load_table_binary_arrow_presult__isset() : e(false) {}
  bool e :1;
} _MapD_load_table_binary_arrow_presult__isset;

class MapD_load_table_binary_arrow_presult {
 public:


  virtual ~MapD_load_table_binary_arrow_presult() throw();
  TMapDException e;

  _MapD_load_table_binary_arrow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_load_table_args__isset {
  _MapD_load_table_args__isset() : session(false), table_name(false), rows(false) {}
  bool session :1;
  bool table_name :1;
  bool rows :1;
} _MapD_load_table_args__isset;

class MapD_load_table_args {
 public:

  MapD_load_table_args(const MapD_load_table_args&);
  MapD_load_table_args& operator=(const MapD_load_table_args&);
  MapD_load_table_args() : session(), table_name() {
  }

  virtual ~MapD_load_table_args() throw();
  TSessionId session;
  std::string table_name;
  std::vector<TStringRow>  rows;

  _MapD_load_table_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_rows(const std::vector<TStringRow> & val);

  bool operator == (const MapD_load_table_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(rows == rhs.rows))
      return false;
    return true;
  }
  bool operator != (const MapD_load_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_load_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_load_table_pargs {
 public:


  virtual ~MapD_load_table_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;
  const std::vector<TStringRow> * rows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_load_table_result__isset {
  _MapD_load_table_result__isset() : e(false) {}
  bool e :1;
} _MapD_load_table_result__isset;

class MapD_load_table_result {
 public:

  MapD_load_table_result(const MapD_load_table_result&);
  MapD_load_table_result& operator=(const MapD_load_table_result&);
  MapD_load_table_result() {
  }

  virtual ~MapD_load_table_result() throw();
  TMapDException e;

  _MapD_load_table_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_load_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_load_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_load_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_load_table_presult__isset {
  _MapD_load_table_presult__isset() : e(false) {}
  bool e :1;
} _MapD_load_table_presult__isset;

class MapD_load_table_presult {
 public:


  virtual ~MapD_load_table_presult() throw();
  TMapDException e;

  _MapD_load_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_detect_column_types_args__isset {
  _MapD_detect_column_types_args__isset() : session(false), file_name(false), copy_params(false) {}
  bool session :1;
  bool file_name :1;
  bool copy_params :1;
} _MapD_detect_column_types_args__isset;

class MapD_detect_column_types_args {
 public:

  MapD_detect_column_types_args(const MapD_detect_column_types_args&);
  MapD_detect_column_types_args& operator=(const MapD_detect_column_types_args&);
  MapD_detect_column_types_args() : session(), file_name() {
  }

  virtual ~MapD_detect_column_types_args() throw();
  TSessionId session;
  std::string file_name;
  TCopyParams copy_params;

  _MapD_detect_column_types_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_file_name(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const MapD_detect_column_types_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const MapD_detect_column_types_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_detect_column_types_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_detect_column_types_pargs {
 public:


  virtual ~MapD_detect_column_types_pargs() throw();
  const TSessionId* session;
  const std::string* file_name;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_detect_column_types_result__isset {
  _MapD_detect_column_types_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_detect_column_types_result__isset;

class MapD_detect_column_types_result {
 public:

  MapD_detect_column_types_result(const MapD_detect_column_types_result&);
  MapD_detect_column_types_result& operator=(const MapD_detect_column_types_result&);
  MapD_detect_column_types_result() {
  }

  virtual ~MapD_detect_column_types_result() throw();
  TDetectResult success;
  TMapDException e;

  _MapD_detect_column_types_result__isset __isset;

  void __set_success(const TDetectResult& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_detect_column_types_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_detect_column_types_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_detect_column_types_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_detect_column_types_presult__isset {
  _MapD_detect_column_types_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_detect_column_types_presult__isset;

class MapD_detect_column_types_presult {
 public:


  virtual ~MapD_detect_column_types_presult() throw();
  TDetectResult* success;
  TMapDException e;

  _MapD_detect_column_types_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_create_table_args__isset {
  _MapD_create_table_args__isset() : session(false), table_name(false), row_desc(false), file_type(true), create_params(false) {}
  bool session :1;
  bool table_name :1;
  bool row_desc :1;
  bool file_type :1;
  bool create_params :1;
} _MapD_create_table_args__isset;

class MapD_create_table_args {
 public:

  MapD_create_table_args(const MapD_create_table_args&);
  MapD_create_table_args& operator=(const MapD_create_table_args&);
  MapD_create_table_args() : session(), table_name(), file_type((TFileType::type)0) {
    file_type = (TFileType::type)0;

  }

  virtual ~MapD_create_table_args() throw();
  TSessionId session;
  std::string table_name;
  TRowDescriptor row_desc;
  TFileType::type file_type;
  TCreateParams create_params;

  _MapD_create_table_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_row_desc(const TRowDescriptor& val);

  void __set_file_type(const TFileType::type val);

  void __set_create_params(const TCreateParams& val);

  bool operator == (const MapD_create_table_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(row_desc == rhs.row_desc))
      return false;
    if (!(file_type == rhs.file_type))
      return false;
    if (!(create_params == rhs.create_params))
      return false;
    return true;
  }
  bool operator != (const MapD_create_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_create_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_create_table_pargs {
 public:


  virtual ~MapD_create_table_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;
  const TRowDescriptor* row_desc;
  const TFileType::type* file_type;
  const TCreateParams* create_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_create_table_result__isset {
  _MapD_create_table_result__isset() : e(false) {}
  bool e :1;
} _MapD_create_table_result__isset;

class MapD_create_table_result {
 public:

  MapD_create_table_result(const MapD_create_table_result&);
  MapD_create_table_result& operator=(const MapD_create_table_result&);
  MapD_create_table_result() {
  }

  virtual ~MapD_create_table_result() throw();
  TMapDException e;

  _MapD_create_table_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_create_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_create_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_create_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_create_table_presult__isset {
  _MapD_create_table_presult__isset() : e(false) {}
  bool e :1;
} _MapD_create_table_presult__isset;

class MapD_create_table_presult {
 public:


  virtual ~MapD_create_table_presult() throw();
  TMapDException e;

  _MapD_create_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_import_table_args__isset {
  _MapD_import_table_args__isset() : session(false), table_name(false), file_name(false), copy_params(false) {}
  bool session :1;
  bool table_name :1;
  bool file_name :1;
  bool copy_params :1;
} _MapD_import_table_args__isset;

class MapD_import_table_args {
 public:

  MapD_import_table_args(const MapD_import_table_args&);
  MapD_import_table_args& operator=(const MapD_import_table_args&);
  MapD_import_table_args() : session(), table_name(), file_name() {
  }

  virtual ~MapD_import_table_args() throw();
  TSessionId session;
  std::string table_name;
  std::string file_name;
  TCopyParams copy_params;

  _MapD_import_table_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_file_name(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const MapD_import_table_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const MapD_import_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_import_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_import_table_pargs {
 public:


  virtual ~MapD_import_table_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;
  const std::string* file_name;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_import_table_result__isset {
  _MapD_import_table_result__isset() : e(false) {}
  bool e :1;
} _MapD_import_table_result__isset;

class MapD_import_table_result {
 public:

  MapD_import_table_result(const MapD_import_table_result&);
  MapD_import_table_result& operator=(const MapD_import_table_result&);
  MapD_import_table_result() {
  }

  virtual ~MapD_import_table_result() throw();
  TMapDException e;

  _MapD_import_table_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_import_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_import_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_import_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_import_table_presult__isset {
  _MapD_import_table_presult__isset() : e(false) {}
  bool e :1;
} _MapD_import_table_presult__isset;

class MapD_import_table_presult {
 public:


  virtual ~MapD_import_table_presult() throw();
  TMapDException e;

  _MapD_import_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_import_geo_table_args__isset {
  _MapD_import_geo_table_args__isset() : session(false), table_name(false), file_name(false), copy_params(false), row_desc(false), create_params(false) {}
  bool session :1;
  bool table_name :1;
  bool file_name :1;
  bool copy_params :1;
  bool row_desc :1;
  bool create_params :1;
} _MapD_import_geo_table_args__isset;

class MapD_import_geo_table_args {
 public:

  MapD_import_geo_table_args(const MapD_import_geo_table_args&);
  MapD_import_geo_table_args& operator=(const MapD_import_geo_table_args&);
  MapD_import_geo_table_args() : session(), table_name(), file_name() {
  }

  virtual ~MapD_import_geo_table_args() throw();
  TSessionId session;
  std::string table_name;
  std::string file_name;
  TCopyParams copy_params;
  TRowDescriptor row_desc;
  TCreateParams create_params;

  _MapD_import_geo_table_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  void __set_file_name(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  void __set_row_desc(const TRowDescriptor& val);

  void __set_create_params(const TCreateParams& val);

  bool operator == (const MapD_import_geo_table_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    if (!(row_desc == rhs.row_desc))
      return false;
    if (!(create_params == rhs.create_params))
      return false;
    return true;
  }
  bool operator != (const MapD_import_geo_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_import_geo_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_import_geo_table_pargs {
 public:


  virtual ~MapD_import_geo_table_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;
  const std::string* file_name;
  const TCopyParams* copy_params;
  const TRowDescriptor* row_desc;
  const TCreateParams* create_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_import_geo_table_result__isset {
  _MapD_import_geo_table_result__isset() : e(false) {}
  bool e :1;
} _MapD_import_geo_table_result__isset;

class MapD_import_geo_table_result {
 public:

  MapD_import_geo_table_result(const MapD_import_geo_table_result&);
  MapD_import_geo_table_result& operator=(const MapD_import_geo_table_result&);
  MapD_import_geo_table_result() {
  }

  virtual ~MapD_import_geo_table_result() throw();
  TMapDException e;

  _MapD_import_geo_table_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_import_geo_table_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_import_geo_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_import_geo_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_import_geo_table_presult__isset {
  _MapD_import_geo_table_presult__isset() : e(false) {}
  bool e :1;
} _MapD_import_geo_table_presult__isset;

class MapD_import_geo_table_presult {
 public:


  virtual ~MapD_import_geo_table_presult() throw();
  TMapDException e;

  _MapD_import_geo_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_import_table_status_args__isset {
  _MapD_import_table_status_args__isset() : session(false), import_id(false) {}
  bool session :1;
  bool import_id :1;
} _MapD_import_table_status_args__isset;

class MapD_import_table_status_args {
 public:

  MapD_import_table_status_args(const MapD_import_table_status_args&);
  MapD_import_table_status_args& operator=(const MapD_import_table_status_args&);
  MapD_import_table_status_args() : session(), import_id() {
  }

  virtual ~MapD_import_table_status_args() throw();
  TSessionId session;
  std::string import_id;

  _MapD_import_table_status_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_import_id(const std::string& val);

  bool operator == (const MapD_import_table_status_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(import_id == rhs.import_id))
      return false;
    return true;
  }
  bool operator != (const MapD_import_table_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_import_table_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_import_table_status_pargs {
 public:


  virtual ~MapD_import_table_status_pargs() throw();
  const TSessionId* session;
  const std::string* import_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_import_table_status_result__isset {
  _MapD_import_table_status_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_import_table_status_result__isset;

class MapD_import_table_status_result {
 public:

  MapD_import_table_status_result(const MapD_import_table_status_result&);
  MapD_import_table_status_result& operator=(const MapD_import_table_status_result&);
  MapD_import_table_status_result() {
  }

  virtual ~MapD_import_table_status_result() throw();
  TImportStatus success;
  TMapDException e;

  _MapD_import_table_status_result__isset __isset;

  void __set_success(const TImportStatus& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_import_table_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_import_table_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_import_table_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_import_table_status_presult__isset {
  _MapD_import_table_status_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_import_table_status_presult__isset;

class MapD_import_table_status_presult {
 public:


  virtual ~MapD_import_table_status_presult() throw();
  TImportStatus* success;
  TMapDException e;

  _MapD_import_table_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_first_geo_file_in_archive_args__isset {
  _MapD_get_first_geo_file_in_archive_args__isset() : session(false), archive_path(false), copy_params(false) {}
  bool session :1;
  bool archive_path :1;
  bool copy_params :1;
} _MapD_get_first_geo_file_in_archive_args__isset;

class MapD_get_first_geo_file_in_archive_args {
 public:

  MapD_get_first_geo_file_in_archive_args(const MapD_get_first_geo_file_in_archive_args&);
  MapD_get_first_geo_file_in_archive_args& operator=(const MapD_get_first_geo_file_in_archive_args&);
  MapD_get_first_geo_file_in_archive_args() : session(), archive_path() {
  }

  virtual ~MapD_get_first_geo_file_in_archive_args() throw();
  TSessionId session;
  std::string archive_path;
  TCopyParams copy_params;

  _MapD_get_first_geo_file_in_archive_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_archive_path(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const MapD_get_first_geo_file_in_archive_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(archive_path == rhs.archive_path))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const MapD_get_first_geo_file_in_archive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_first_geo_file_in_archive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_first_geo_file_in_archive_pargs {
 public:


  virtual ~MapD_get_first_geo_file_in_archive_pargs() throw();
  const TSessionId* session;
  const std::string* archive_path;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_first_geo_file_in_archive_result__isset {
  _MapD_get_first_geo_file_in_archive_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_first_geo_file_in_archive_result__isset;

class MapD_get_first_geo_file_in_archive_result {
 public:

  MapD_get_first_geo_file_in_archive_result(const MapD_get_first_geo_file_in_archive_result&);
  MapD_get_first_geo_file_in_archive_result& operator=(const MapD_get_first_geo_file_in_archive_result&);
  MapD_get_first_geo_file_in_archive_result() : success() {
  }

  virtual ~MapD_get_first_geo_file_in_archive_result() throw();
  std::string success;
  TMapDException e;

  _MapD_get_first_geo_file_in_archive_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_first_geo_file_in_archive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_first_geo_file_in_archive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_first_geo_file_in_archive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_first_geo_file_in_archive_presult__isset {
  _MapD_get_first_geo_file_in_archive_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_first_geo_file_in_archive_presult__isset;

class MapD_get_first_geo_file_in_archive_presult {
 public:


  virtual ~MapD_get_first_geo_file_in_archive_presult() throw();
  std::string* success;
  TMapDException e;

  _MapD_get_first_geo_file_in_archive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_all_files_in_archive_args__isset {
  _MapD_get_all_files_in_archive_args__isset() : session(false), archive_path(false), copy_params(false) {}
  bool session :1;
  bool archive_path :1;
  bool copy_params :1;
} _MapD_get_all_files_in_archive_args__isset;

class MapD_get_all_files_in_archive_args {
 public:

  MapD_get_all_files_in_archive_args(const MapD_get_all_files_in_archive_args&);
  MapD_get_all_files_in_archive_args& operator=(const MapD_get_all_files_in_archive_args&);
  MapD_get_all_files_in_archive_args() : session(), archive_path() {
  }

  virtual ~MapD_get_all_files_in_archive_args() throw();
  TSessionId session;
  std::string archive_path;
  TCopyParams copy_params;

  _MapD_get_all_files_in_archive_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_archive_path(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const MapD_get_all_files_in_archive_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(archive_path == rhs.archive_path))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const MapD_get_all_files_in_archive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_all_files_in_archive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_all_files_in_archive_pargs {
 public:


  virtual ~MapD_get_all_files_in_archive_pargs() throw();
  const TSessionId* session;
  const std::string* archive_path;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_all_files_in_archive_result__isset {
  _MapD_get_all_files_in_archive_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_all_files_in_archive_result__isset;

class MapD_get_all_files_in_archive_result {
 public:

  MapD_get_all_files_in_archive_result(const MapD_get_all_files_in_archive_result&);
  MapD_get_all_files_in_archive_result& operator=(const MapD_get_all_files_in_archive_result&);
  MapD_get_all_files_in_archive_result() {
  }

  virtual ~MapD_get_all_files_in_archive_result() throw();
  std::vector<std::string>  success;
  TMapDException e;

  _MapD_get_all_files_in_archive_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_all_files_in_archive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_all_files_in_archive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_all_files_in_archive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_all_files_in_archive_presult__isset {
  _MapD_get_all_files_in_archive_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_all_files_in_archive_presult__isset;

class MapD_get_all_files_in_archive_presult {
 public:


  virtual ~MapD_get_all_files_in_archive_presult() throw();
  std::vector<std::string> * success;
  TMapDException e;

  _MapD_get_all_files_in_archive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_layers_in_geo_file_args__isset {
  _MapD_get_layers_in_geo_file_args__isset() : session(false), file_name(false), copy_params(false) {}
  bool session :1;
  bool file_name :1;
  bool copy_params :1;
} _MapD_get_layers_in_geo_file_args__isset;

class MapD_get_layers_in_geo_file_args {
 public:

  MapD_get_layers_in_geo_file_args(const MapD_get_layers_in_geo_file_args&);
  MapD_get_layers_in_geo_file_args& operator=(const MapD_get_layers_in_geo_file_args&);
  MapD_get_layers_in_geo_file_args() : session(), file_name() {
  }

  virtual ~MapD_get_layers_in_geo_file_args() throw();
  TSessionId session;
  std::string file_name;
  TCopyParams copy_params;

  _MapD_get_layers_in_geo_file_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_file_name(const std::string& val);

  void __set_copy_params(const TCopyParams& val);

  bool operator == (const MapD_get_layers_in_geo_file_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(copy_params == rhs.copy_params))
      return false;
    return true;
  }
  bool operator != (const MapD_get_layers_in_geo_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_layers_in_geo_file_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_layers_in_geo_file_pargs {
 public:


  virtual ~MapD_get_layers_in_geo_file_pargs() throw();
  const TSessionId* session;
  const std::string* file_name;
  const TCopyParams* copy_params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_layers_in_geo_file_result__isset {
  _MapD_get_layers_in_geo_file_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_layers_in_geo_file_result__isset;

class MapD_get_layers_in_geo_file_result {
 public:

  MapD_get_layers_in_geo_file_result(const MapD_get_layers_in_geo_file_result&);
  MapD_get_layers_in_geo_file_result& operator=(const MapD_get_layers_in_geo_file_result&);
  MapD_get_layers_in_geo_file_result() {
  }

  virtual ~MapD_get_layers_in_geo_file_result() throw();
  std::vector<TGeoFileLayerInfo>  success;
  TMapDException e;

  _MapD_get_layers_in_geo_file_result__isset __isset;

  void __set_success(const std::vector<TGeoFileLayerInfo> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_layers_in_geo_file_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_layers_in_geo_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_layers_in_geo_file_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_layers_in_geo_file_presult__isset {
  _MapD_get_layers_in_geo_file_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_layers_in_geo_file_presult__isset;

class MapD_get_layers_in_geo_file_presult {
 public:


  virtual ~MapD_get_layers_in_geo_file_presult() throw();
  std::vector<TGeoFileLayerInfo> * success;
  TMapDException e;

  _MapD_get_layers_in_geo_file_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_check_table_consistency_args__isset {
  _MapD_check_table_consistency_args__isset() : session(false), table_id(false) {}
  bool session :1;
  bool table_id :1;
} _MapD_check_table_consistency_args__isset;

class MapD_check_table_consistency_args {
 public:

  MapD_check_table_consistency_args(const MapD_check_table_consistency_args&);
  MapD_check_table_consistency_args& operator=(const MapD_check_table_consistency_args&);
  MapD_check_table_consistency_args() : session(), table_id(0) {
  }

  virtual ~MapD_check_table_consistency_args() throw();
  TSessionId session;
  int32_t table_id;

  _MapD_check_table_consistency_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_id(const int32_t val);

  bool operator == (const MapD_check_table_consistency_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_id == rhs.table_id))
      return false;
    return true;
  }
  bool operator != (const MapD_check_table_consistency_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_check_table_consistency_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_check_table_consistency_pargs {
 public:


  virtual ~MapD_check_table_consistency_pargs() throw();
  const TSessionId* session;
  const int32_t* table_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_check_table_consistency_result__isset {
  _MapD_check_table_consistency_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_check_table_consistency_result__isset;

class MapD_check_table_consistency_result {
 public:

  MapD_check_table_consistency_result(const MapD_check_table_consistency_result&);
  MapD_check_table_consistency_result& operator=(const MapD_check_table_consistency_result&);
  MapD_check_table_consistency_result() {
  }

  virtual ~MapD_check_table_consistency_result() throw();
  TTableMeta success;
  TMapDException e;

  _MapD_check_table_consistency_result__isset __isset;

  void __set_success(const TTableMeta& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_check_table_consistency_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_check_table_consistency_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_check_table_consistency_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_check_table_consistency_presult__isset {
  _MapD_check_table_consistency_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_check_table_consistency_presult__isset;

class MapD_check_table_consistency_presult {
 public:


  virtual ~MapD_check_table_consistency_presult() throw();
  TTableMeta* success;
  TMapDException e;

  _MapD_check_table_consistency_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_start_query_args__isset {
  _MapD_start_query_args__isset() : session(false), query_ra(false), just_explain(false) {}
  bool session :1;
  bool query_ra :1;
  bool just_explain :1;
} _MapD_start_query_args__isset;

class MapD_start_query_args {
 public:

  MapD_start_query_args(const MapD_start_query_args&);
  MapD_start_query_args& operator=(const MapD_start_query_args&);
  MapD_start_query_args() : session(), query_ra(), just_explain(0) {
  }

  virtual ~MapD_start_query_args() throw();
  TSessionId session;
  std::string query_ra;
  bool just_explain;

  _MapD_start_query_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_query_ra(const std::string& val);

  void __set_just_explain(const bool val);

  bool operator == (const MapD_start_query_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(query_ra == rhs.query_ra))
      return false;
    if (!(just_explain == rhs.just_explain))
      return false;
    return true;
  }
  bool operator != (const MapD_start_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_start_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_start_query_pargs {
 public:


  virtual ~MapD_start_query_pargs() throw();
  const TSessionId* session;
  const std::string* query_ra;
  const bool* just_explain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_start_query_result__isset {
  _MapD_start_query_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_start_query_result__isset;

class MapD_start_query_result {
 public:

  MapD_start_query_result(const MapD_start_query_result&);
  MapD_start_query_result& operator=(const MapD_start_query_result&);
  MapD_start_query_result() {
  }

  virtual ~MapD_start_query_result() throw();
  TPendingQuery success;
  TMapDException e;

  _MapD_start_query_result__isset __isset;

  void __set_success(const TPendingQuery& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_start_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_start_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_start_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_start_query_presult__isset {
  _MapD_start_query_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_start_query_presult__isset;

class MapD_start_query_presult {
 public:


  virtual ~MapD_start_query_presult() throw();
  TPendingQuery* success;
  TMapDException e;

  _MapD_start_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_execute_first_step_args__isset {
  _MapD_execute_first_step_args__isset() : pending_query(false) {}
  bool pending_query :1;
} _MapD_execute_first_step_args__isset;

class MapD_execute_first_step_args {
 public:

  MapD_execute_first_step_args(const MapD_execute_first_step_args&);
  MapD_execute_first_step_args& operator=(const MapD_execute_first_step_args&);
  MapD_execute_first_step_args() {
  }

  virtual ~MapD_execute_first_step_args() throw();
  TPendingQuery pending_query;

  _MapD_execute_first_step_args__isset __isset;

  void __set_pending_query(const TPendingQuery& val);

  bool operator == (const MapD_execute_first_step_args & rhs) const
  {
    if (!(pending_query == rhs.pending_query))
      return false;
    return true;
  }
  bool operator != (const MapD_execute_first_step_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_execute_first_step_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_execute_first_step_pargs {
 public:


  virtual ~MapD_execute_first_step_pargs() throw();
  const TPendingQuery* pending_query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_execute_first_step_result__isset {
  _MapD_execute_first_step_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_execute_first_step_result__isset;

class MapD_execute_first_step_result {
 public:

  MapD_execute_first_step_result(const MapD_execute_first_step_result&);
  MapD_execute_first_step_result& operator=(const MapD_execute_first_step_result&);
  MapD_execute_first_step_result() {
  }

  virtual ~MapD_execute_first_step_result() throw();
  TStepResult success;
  TMapDException e;

  _MapD_execute_first_step_result__isset __isset;

  void __set_success(const TStepResult& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_execute_first_step_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_execute_first_step_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_execute_first_step_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_execute_first_step_presult__isset {
  _MapD_execute_first_step_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_execute_first_step_presult__isset;

class MapD_execute_first_step_presult {
 public:


  virtual ~MapD_execute_first_step_presult() throw();
  TStepResult* success;
  TMapDException e;

  _MapD_execute_first_step_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_broadcast_serialized_rows_args__isset {
  _MapD_broadcast_serialized_rows_args__isset() : serialized_rows(false), row_desc(false), query_id(false) {}
  bool serialized_rows :1;
  bool row_desc :1;
  bool query_id :1;
} _MapD_broadcast_serialized_rows_args__isset;

class MapD_broadcast_serialized_rows_args {
 public:

  MapD_broadcast_serialized_rows_args(const MapD_broadcast_serialized_rows_args&);
  MapD_broadcast_serialized_rows_args& operator=(const MapD_broadcast_serialized_rows_args&);
  MapD_broadcast_serialized_rows_args() : query_id(0) {
  }

  virtual ~MapD_broadcast_serialized_rows_args() throw();
   ::TSerializedRows serialized_rows;
  TRowDescriptor row_desc;
  TQueryId query_id;

  _MapD_broadcast_serialized_rows_args__isset __isset;

  void __set_serialized_rows(const  ::TSerializedRows& val);

  void __set_row_desc(const TRowDescriptor& val);

  void __set_query_id(const TQueryId val);

  bool operator == (const MapD_broadcast_serialized_rows_args & rhs) const
  {
    if (!(serialized_rows == rhs.serialized_rows))
      return false;
    if (!(row_desc == rhs.row_desc))
      return false;
    if (!(query_id == rhs.query_id))
      return false;
    return true;
  }
  bool operator != (const MapD_broadcast_serialized_rows_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_broadcast_serialized_rows_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_broadcast_serialized_rows_pargs {
 public:


  virtual ~MapD_broadcast_serialized_rows_pargs() throw();
  const  ::TSerializedRows* serialized_rows;
  const TRowDescriptor* row_desc;
  const TQueryId* query_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_broadcast_serialized_rows_result__isset {
  _MapD_broadcast_serialized_rows_result__isset() : e(false) {}
  bool e :1;
} _MapD_broadcast_serialized_rows_result__isset;

class MapD_broadcast_serialized_rows_result {
 public:

  MapD_broadcast_serialized_rows_result(const MapD_broadcast_serialized_rows_result&);
  MapD_broadcast_serialized_rows_result& operator=(const MapD_broadcast_serialized_rows_result&);
  MapD_broadcast_serialized_rows_result() {
  }

  virtual ~MapD_broadcast_serialized_rows_result() throw();
  TMapDException e;

  _MapD_broadcast_serialized_rows_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_broadcast_serialized_rows_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_broadcast_serialized_rows_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_broadcast_serialized_rows_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_broadcast_serialized_rows_presult__isset {
  _MapD_broadcast_serialized_rows_presult__isset() : e(false) {}
  bool e :1;
} _MapD_broadcast_serialized_rows_presult__isset;

class MapD_broadcast_serialized_rows_presult {
 public:


  virtual ~MapD_broadcast_serialized_rows_presult() throw();
  TMapDException e;

  _MapD_broadcast_serialized_rows_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_start_render_query_args__isset {
  _MapD_start_render_query_args__isset() : session(false), widget_id(false), node_idx(false), vega_json(false) {}
  bool session :1;
  bool widget_id :1;
  bool node_idx :1;
  bool vega_json :1;
} _MapD_start_render_query_args__isset;

class MapD_start_render_query_args {
 public:

  MapD_start_render_query_args(const MapD_start_render_query_args&);
  MapD_start_render_query_args& operator=(const MapD_start_render_query_args&);
  MapD_start_render_query_args() : session(), widget_id(0), node_idx(0), vega_json() {
  }

  virtual ~MapD_start_render_query_args() throw();
  TSessionId session;
  int64_t widget_id;
  int16_t node_idx;
  std::string vega_json;

  _MapD_start_render_query_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_widget_id(const int64_t val);

  void __set_node_idx(const int16_t val);

  void __set_vega_json(const std::string& val);

  bool operator == (const MapD_start_render_query_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(widget_id == rhs.widget_id))
      return false;
    if (!(node_idx == rhs.node_idx))
      return false;
    if (!(vega_json == rhs.vega_json))
      return false;
    return true;
  }
  bool operator != (const MapD_start_render_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_start_render_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_start_render_query_pargs {
 public:


  virtual ~MapD_start_render_query_pargs() throw();
  const TSessionId* session;
  const int64_t* widget_id;
  const int16_t* node_idx;
  const std::string* vega_json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_start_render_query_result__isset {
  _MapD_start_render_query_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_start_render_query_result__isset;

class MapD_start_render_query_result {
 public:

  MapD_start_render_query_result(const MapD_start_render_query_result&);
  MapD_start_render_query_result& operator=(const MapD_start_render_query_result&);
  MapD_start_render_query_result() {
  }

  virtual ~MapD_start_render_query_result() throw();
  TPendingRenderQuery success;
  TMapDException e;

  _MapD_start_render_query_result__isset __isset;

  void __set_success(const TPendingRenderQuery& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_start_render_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_start_render_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_start_render_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_start_render_query_presult__isset {
  _MapD_start_render_query_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_start_render_query_presult__isset;

class MapD_start_render_query_presult {
 public:


  virtual ~MapD_start_render_query_presult() throw();
  TPendingRenderQuery* success;
  TMapDException e;

  _MapD_start_render_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_execute_next_render_step_args__isset {
  _MapD_execute_next_render_step_args__isset() : pending_render(false), merged_data(false) {}
  bool pending_render :1;
  bool merged_data :1;
} _MapD_execute_next_render_step_args__isset;

class MapD_execute_next_render_step_args {
 public:

  MapD_execute_next_render_step_args(const MapD_execute_next_render_step_args&);
  MapD_execute_next_render_step_args& operator=(const MapD_execute_next_render_step_args&);
  MapD_execute_next_render_step_args() {
  }

  virtual ~MapD_execute_next_render_step_args() throw();
  TPendingRenderQuery pending_render;
  TRenderAggDataMap merged_data;

  _MapD_execute_next_render_step_args__isset __isset;

  void __set_pending_render(const TPendingRenderQuery& val);

  void __set_merged_data(const TRenderAggDataMap& val);

  bool operator == (const MapD_execute_next_render_step_args & rhs) const
  {
    if (!(pending_render == rhs.pending_render))
      return false;
    if (!(merged_data == rhs.merged_data))
      return false;
    return true;
  }
  bool operator != (const MapD_execute_next_render_step_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_execute_next_render_step_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_execute_next_render_step_pargs {
 public:


  virtual ~MapD_execute_next_render_step_pargs() throw();
  const TPendingRenderQuery* pending_render;
  const TRenderAggDataMap* merged_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_execute_next_render_step_result__isset {
  _MapD_execute_next_render_step_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_execute_next_render_step_result__isset;

class MapD_execute_next_render_step_result {
 public:

  MapD_execute_next_render_step_result(const MapD_execute_next_render_step_result&);
  MapD_execute_next_render_step_result& operator=(const MapD_execute_next_render_step_result&);
  MapD_execute_next_render_step_result() {
  }

  virtual ~MapD_execute_next_render_step_result() throw();
  TRenderStepResult success;
  TMapDException e;

  _MapD_execute_next_render_step_result__isset __isset;

  void __set_success(const TRenderStepResult& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_execute_next_render_step_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_execute_next_render_step_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_execute_next_render_step_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_execute_next_render_step_presult__isset {
  _MapD_execute_next_render_step_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_execute_next_render_step_presult__isset;

class MapD_execute_next_render_step_presult {
 public:


  virtual ~MapD_execute_next_render_step_presult() throw();
  TRenderStepResult* success;
  TMapDException e;

  _MapD_execute_next_render_step_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_insert_data_args__isset {
  _MapD_insert_data_args__isset() : session(false), insert_data(false) {}
  bool session :1;
  bool insert_data :1;
} _MapD_insert_data_args__isset;

class MapD_insert_data_args {
 public:

  MapD_insert_data_args(const MapD_insert_data_args&);
  MapD_insert_data_args& operator=(const MapD_insert_data_args&);
  MapD_insert_data_args() : session() {
  }

  virtual ~MapD_insert_data_args() throw();
  TSessionId session;
  TInsertData insert_data;

  _MapD_insert_data_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_insert_data(const TInsertData& val);

  bool operator == (const MapD_insert_data_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(insert_data == rhs.insert_data))
      return false;
    return true;
  }
  bool operator != (const MapD_insert_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_insert_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_insert_data_pargs {
 public:


  virtual ~MapD_insert_data_pargs() throw();
  const TSessionId* session;
  const TInsertData* insert_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_insert_data_result__isset {
  _MapD_insert_data_result__isset() : e(false) {}
  bool e :1;
} _MapD_insert_data_result__isset;

class MapD_insert_data_result {
 public:

  MapD_insert_data_result(const MapD_insert_data_result&);
  MapD_insert_data_result& operator=(const MapD_insert_data_result&);
  MapD_insert_data_result() {
  }

  virtual ~MapD_insert_data_result() throw();
  TMapDException e;

  _MapD_insert_data_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_insert_data_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_insert_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_insert_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_insert_data_presult__isset {
  _MapD_insert_data_presult__isset() : e(false) {}
  bool e :1;
} _MapD_insert_data_presult__isset;

class MapD_insert_data_presult {
 public:


  virtual ~MapD_insert_data_presult() throw();
  TMapDException e;

  _MapD_insert_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_checkpoint_args__isset {
  _MapD_checkpoint_args__isset() : session(false), db_id(false), table_id(false) {}
  bool session :1;
  bool db_id :1;
  bool table_id :1;
} _MapD_checkpoint_args__isset;

class MapD_checkpoint_args {
 public:

  MapD_checkpoint_args(const MapD_checkpoint_args&);
  MapD_checkpoint_args& operator=(const MapD_checkpoint_args&);
  MapD_checkpoint_args() : session(), db_id(0), table_id(0) {
  }

  virtual ~MapD_checkpoint_args() throw();
  TSessionId session;
  int32_t db_id;
  int32_t table_id;

  _MapD_checkpoint_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_db_id(const int32_t val);

  void __set_table_id(const int32_t val);

  bool operator == (const MapD_checkpoint_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_id == rhs.db_id))
      return false;
    if (!(table_id == rhs.table_id))
      return false;
    return true;
  }
  bool operator != (const MapD_checkpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_checkpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_checkpoint_pargs {
 public:


  virtual ~MapD_checkpoint_pargs() throw();
  const TSessionId* session;
  const int32_t* db_id;
  const int32_t* table_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_checkpoint_result__isset {
  _MapD_checkpoint_result__isset() : e(false) {}
  bool e :1;
} _MapD_checkpoint_result__isset;

class MapD_checkpoint_result {
 public:

  MapD_checkpoint_result(const MapD_checkpoint_result&);
  MapD_checkpoint_result& operator=(const MapD_checkpoint_result&);
  MapD_checkpoint_result() {
  }

  virtual ~MapD_checkpoint_result() throw();
  TMapDException e;

  _MapD_checkpoint_result__isset __isset;

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_checkpoint_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_checkpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_checkpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_checkpoint_presult__isset {
  _MapD_checkpoint_presult__isset() : e(false) {}
  bool e :1;
} _MapD_checkpoint_presult__isset;

class MapD_checkpoint_presult {
 public:


  virtual ~MapD_checkpoint_presult() throw();
  TMapDException e;

  _MapD_checkpoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_table_descriptor_args__isset {
  _MapD_get_table_descriptor_args__isset() : session(false), table_name(false) {}
  bool session :1;
  bool table_name :1;
} _MapD_get_table_descriptor_args__isset;

class MapD_get_table_descriptor_args {
 public:

  MapD_get_table_descriptor_args(const MapD_get_table_descriptor_args&);
  MapD_get_table_descriptor_args& operator=(const MapD_get_table_descriptor_args&);
  MapD_get_table_descriptor_args() : session(), table_name() {
  }

  virtual ~MapD_get_table_descriptor_args() throw();
  TSessionId session;
  std::string table_name;

  _MapD_get_table_descriptor_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  bool operator == (const MapD_get_table_descriptor_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const MapD_get_table_descriptor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_table_descriptor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_table_descriptor_pargs {
 public:


  virtual ~MapD_get_table_descriptor_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_table_descriptor_result__isset {
  _MapD_get_table_descriptor_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_table_descriptor_result__isset;

class MapD_get_table_descriptor_result {
 public:

  MapD_get_table_descriptor_result(const MapD_get_table_descriptor_result&);
  MapD_get_table_descriptor_result& operator=(const MapD_get_table_descriptor_result&);
  MapD_get_table_descriptor_result() {
  }

  virtual ~MapD_get_table_descriptor_result() throw();
  TTableDescriptor success;
  TMapDException e;

  _MapD_get_table_descriptor_result__isset __isset;

  void __set_success(const TTableDescriptor& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_table_descriptor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_table_descriptor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_table_descriptor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_table_descriptor_presult__isset {
  _MapD_get_table_descriptor_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_table_descriptor_presult__isset;

class MapD_get_table_descriptor_presult {
 public:


  virtual ~MapD_get_table_descriptor_presult() throw();
  TTableDescriptor* success;
  TMapDException e;

  _MapD_get_table_descriptor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_row_descriptor_args__isset {
  _MapD_get_row_descriptor_args__isset() : session(false), table_name(false) {}
  bool session :1;
  bool table_name :1;
} _MapD_get_row_descriptor_args__isset;

class MapD_get_row_descriptor_args {
 public:

  MapD_get_row_descriptor_args(const MapD_get_row_descriptor_args&);
  MapD_get_row_descriptor_args& operator=(const MapD_get_row_descriptor_args&);
  MapD_get_row_descriptor_args() : session(), table_name() {
  }

  virtual ~MapD_get_row_descriptor_args() throw();
  TSessionId session;
  std::string table_name;

  _MapD_get_row_descriptor_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_table_name(const std::string& val);

  bool operator == (const MapD_get_row_descriptor_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const MapD_get_row_descriptor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_row_descriptor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_row_descriptor_pargs {
 public:


  virtual ~MapD_get_row_descriptor_pargs() throw();
  const TSessionId* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_row_descriptor_result__isset {
  _MapD_get_row_descriptor_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_row_descriptor_result__isset;

class MapD_get_row_descriptor_result {
 public:

  MapD_get_row_descriptor_result(const MapD_get_row_descriptor_result&);
  MapD_get_row_descriptor_result& operator=(const MapD_get_row_descriptor_result&);
  MapD_get_row_descriptor_result() {
  }

  virtual ~MapD_get_row_descriptor_result() throw();
  TRowDescriptor success;
  TMapDException e;

  _MapD_get_row_descriptor_result__isset __isset;

  void __set_success(const TRowDescriptor& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_row_descriptor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_row_descriptor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_row_descriptor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_row_descriptor_presult__isset {
  _MapD_get_row_descriptor_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_row_descriptor_presult__isset;

class MapD_get_row_descriptor_presult {
 public:


  virtual ~MapD_get_row_descriptor_presult() throw();
  TRowDescriptor* success;
  TMapDException e;

  _MapD_get_row_descriptor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_roles_args__isset {
  _MapD_get_roles_args__isset() : session(false) {}
  bool session :1;
} _MapD_get_roles_args__isset;

class MapD_get_roles_args {
 public:

  MapD_get_roles_args(const MapD_get_roles_args&);
  MapD_get_roles_args& operator=(const MapD_get_roles_args&);
  MapD_get_roles_args() : session() {
  }

  virtual ~MapD_get_roles_args() throw();
  TSessionId session;

  _MapD_get_roles_args__isset __isset;

  void __set_session(const TSessionId& val);

  bool operator == (const MapD_get_roles_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const MapD_get_roles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_roles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_roles_pargs {
 public:


  virtual ~MapD_get_roles_pargs() throw();
  const TSessionId* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_roles_result__isset {
  _MapD_get_roles_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_roles_result__isset;

class MapD_get_roles_result {
 public:

  MapD_get_roles_result(const MapD_get_roles_result&);
  MapD_get_roles_result& operator=(const MapD_get_roles_result&);
  MapD_get_roles_result() {
  }

  virtual ~MapD_get_roles_result() throw();
  std::vector<std::string>  success;
  TMapDException e;

  _MapD_get_roles_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_roles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_roles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_roles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_roles_presult__isset {
  _MapD_get_roles_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_roles_presult__isset;

class MapD_get_roles_presult {
 public:


  virtual ~MapD_get_roles_presult() throw();
  std::vector<std::string> * success;
  TMapDException e;

  _MapD_get_roles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_db_objects_for_grantee_args__isset {
  _MapD_get_db_objects_for_grantee_args__isset() : session(false), roleName(false) {}
  bool session :1;
  bool roleName :1;
} _MapD_get_db_objects_for_grantee_args__isset;

class MapD_get_db_objects_for_grantee_args {
 public:

  MapD_get_db_objects_for_grantee_args(const MapD_get_db_objects_for_grantee_args&);
  MapD_get_db_objects_for_grantee_args& operator=(const MapD_get_db_objects_for_grantee_args&);
  MapD_get_db_objects_for_grantee_args() : session(), roleName() {
  }

  virtual ~MapD_get_db_objects_for_grantee_args() throw();
  TSessionId session;
  std::string roleName;

  _MapD_get_db_objects_for_grantee_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_roleName(const std::string& val);

  bool operator == (const MapD_get_db_objects_for_grantee_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(roleName == rhs.roleName))
      return false;
    return true;
  }
  bool operator != (const MapD_get_db_objects_for_grantee_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_db_objects_for_grantee_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_db_objects_for_grantee_pargs {
 public:


  virtual ~MapD_get_db_objects_for_grantee_pargs() throw();
  const TSessionId* session;
  const std::string* roleName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_db_objects_for_grantee_result__isset {
  _MapD_get_db_objects_for_grantee_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_db_objects_for_grantee_result__isset;

class MapD_get_db_objects_for_grantee_result {
 public:

  MapD_get_db_objects_for_grantee_result(const MapD_get_db_objects_for_grantee_result&);
  MapD_get_db_objects_for_grantee_result& operator=(const MapD_get_db_objects_for_grantee_result&);
  MapD_get_db_objects_for_grantee_result() {
  }

  virtual ~MapD_get_db_objects_for_grantee_result() throw();
  std::vector<TDBObject>  success;
  TMapDException e;

  _MapD_get_db_objects_for_grantee_result__isset __isset;

  void __set_success(const std::vector<TDBObject> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_db_objects_for_grantee_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_db_objects_for_grantee_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_db_objects_for_grantee_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_db_objects_for_grantee_presult__isset {
  _MapD_get_db_objects_for_grantee_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_db_objects_for_grantee_presult__isset;

class MapD_get_db_objects_for_grantee_presult {
 public:


  virtual ~MapD_get_db_objects_for_grantee_presult() throw();
  std::vector<TDBObject> * success;
  TMapDException e;

  _MapD_get_db_objects_for_grantee_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_db_object_privs_args__isset {
  _MapD_get_db_object_privs_args__isset() : session(false), objectName(false), type(false) {}
  bool session :1;
  bool objectName :1;
  bool type :1;
} _MapD_get_db_object_privs_args__isset;

class MapD_get_db_object_privs_args {
 public:

  MapD_get_db_object_privs_args(const MapD_get_db_object_privs_args&);
  MapD_get_db_object_privs_args& operator=(const MapD_get_db_object_privs_args&);
  MapD_get_db_object_privs_args() : session(), objectName(), type((TDBObjectType::type)0) {
  }

  virtual ~MapD_get_db_object_privs_args() throw();
  TSessionId session;
  std::string objectName;
  TDBObjectType::type type;

  _MapD_get_db_object_privs_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_objectName(const std::string& val);

  void __set_type(const TDBObjectType::type val);

  bool operator == (const MapD_get_db_object_privs_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(objectName == rhs.objectName))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const MapD_get_db_object_privs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_db_object_privs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_db_object_privs_pargs {
 public:


  virtual ~MapD_get_db_object_privs_pargs() throw();
  const TSessionId* session;
  const std::string* objectName;
  const TDBObjectType::type* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_db_object_privs_result__isset {
  _MapD_get_db_object_privs_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_db_object_privs_result__isset;

class MapD_get_db_object_privs_result {
 public:

  MapD_get_db_object_privs_result(const MapD_get_db_object_privs_result&);
  MapD_get_db_object_privs_result& operator=(const MapD_get_db_object_privs_result&);
  MapD_get_db_object_privs_result() {
  }

  virtual ~MapD_get_db_object_privs_result() throw();
  std::vector<TDBObject>  success;
  TMapDException e;

  _MapD_get_db_object_privs_result__isset __isset;

  void __set_success(const std::vector<TDBObject> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_db_object_privs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_db_object_privs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_db_object_privs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_db_object_privs_presult__isset {
  _MapD_get_db_object_privs_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_db_object_privs_presult__isset;

class MapD_get_db_object_privs_presult {
 public:


  virtual ~MapD_get_db_object_privs_presult() throw();
  std::vector<TDBObject> * success;
  TMapDException e;

  _MapD_get_db_object_privs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_all_roles_for_user_args__isset {
  _MapD_get_all_roles_for_user_args__isset() : session(false), userName(false) {}
  bool session :1;
  bool userName :1;
} _MapD_get_all_roles_for_user_args__isset;

class MapD_get_all_roles_for_user_args {
 public:

  MapD_get_all_roles_for_user_args(const MapD_get_all_roles_for_user_args&);
  MapD_get_all_roles_for_user_args& operator=(const MapD_get_all_roles_for_user_args&);
  MapD_get_all_roles_for_user_args() : session(), userName() {
  }

  virtual ~MapD_get_all_roles_for_user_args() throw();
  TSessionId session;
  std::string userName;

  _MapD_get_all_roles_for_user_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_userName(const std::string& val);

  bool operator == (const MapD_get_all_roles_for_user_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const MapD_get_all_roles_for_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_all_roles_for_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_all_roles_for_user_pargs {
 public:


  virtual ~MapD_get_all_roles_for_user_pargs() throw();
  const TSessionId* session;
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_all_roles_for_user_result__isset {
  _MapD_get_all_roles_for_user_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_all_roles_for_user_result__isset;

class MapD_get_all_roles_for_user_result {
 public:

  MapD_get_all_roles_for_user_result(const MapD_get_all_roles_for_user_result&);
  MapD_get_all_roles_for_user_result& operator=(const MapD_get_all_roles_for_user_result&);
  MapD_get_all_roles_for_user_result() {
  }

  virtual ~MapD_get_all_roles_for_user_result() throw();
  std::vector<std::string>  success;
  TMapDException e;

  _MapD_get_all_roles_for_user_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_all_roles_for_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_all_roles_for_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_all_roles_for_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_all_roles_for_user_presult__isset {
  _MapD_get_all_roles_for_user_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_all_roles_for_user_presult__isset;

class MapD_get_all_roles_for_user_presult {
 public:


  virtual ~MapD_get_all_roles_for_user_presult() throw();
  std::vector<std::string> * success;
  TMapDException e;

  _MapD_get_all_roles_for_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_has_object_privilege_args__isset {
  _MapD_has_object_privilege_args__isset() : session(false), granteeName(false), ObjectName(false), objectType(false), permissions(false) {}
  bool session :1;
  bool granteeName :1;
  bool ObjectName :1;
  bool objectType :1;
  bool permissions :1;
} _MapD_has_object_privilege_args__isset;

class MapD_has_object_privilege_args {
 public:

  MapD_has_object_privilege_args(const MapD_has_object_privilege_args&);
  MapD_has_object_privilege_args& operator=(const MapD_has_object_privilege_args&);
  MapD_has_object_privilege_args() : session(), granteeName(), ObjectName(), objectType((TDBObjectType::type)0) {
  }

  virtual ~MapD_has_object_privilege_args() throw();
  TSessionId session;
  std::string granteeName;
  std::string ObjectName;
  TDBObjectType::type objectType;
  TDBObjectPermissions permissions;

  _MapD_has_object_privilege_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_granteeName(const std::string& val);

  void __set_ObjectName(const std::string& val);

  void __set_objectType(const TDBObjectType::type val);

  void __set_permissions(const TDBObjectPermissions& val);

  bool operator == (const MapD_has_object_privilege_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(granteeName == rhs.granteeName))
      return false;
    if (!(ObjectName == rhs.ObjectName))
      return false;
    if (!(objectType == rhs.objectType))
      return false;
    if (!(permissions == rhs.permissions))
      return false;
    return true;
  }
  bool operator != (const MapD_has_object_privilege_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_has_object_privilege_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_has_object_privilege_pargs {
 public:


  virtual ~MapD_has_object_privilege_pargs() throw();
  const TSessionId* session;
  const std::string* granteeName;
  const std::string* ObjectName;
  const TDBObjectType::type* objectType;
  const TDBObjectPermissions* permissions;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_has_object_privilege_result__isset {
  _MapD_has_object_privilege_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_has_object_privilege_result__isset;

class MapD_has_object_privilege_result {
 public:

  MapD_has_object_privilege_result(const MapD_has_object_privilege_result&);
  MapD_has_object_privilege_result& operator=(const MapD_has_object_privilege_result&);
  MapD_has_object_privilege_result() : success(0) {
  }

  virtual ~MapD_has_object_privilege_result() throw();
  bool success;
  TMapDException e;

  _MapD_has_object_privilege_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_has_object_privilege_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_has_object_privilege_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_has_object_privilege_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_has_object_privilege_presult__isset {
  _MapD_has_object_privilege_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_has_object_privilege_presult__isset;

class MapD_has_object_privilege_presult {
 public:


  virtual ~MapD_has_object_privilege_presult() throw();
  bool* success;
  TMapDException e;

  _MapD_has_object_privilege_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_set_license_key_args__isset {
  _MapD_set_license_key_args__isset() : session(false), key(false), nonce(true) {}
  bool session :1;
  bool key :1;
  bool nonce :1;
} _MapD_set_license_key_args__isset;

class MapD_set_license_key_args {
 public:

  MapD_set_license_key_args(const MapD_set_license_key_args&);
  MapD_set_license_key_args& operator=(const MapD_set_license_key_args&);
  MapD_set_license_key_args() : session(), key(), nonce("") {
  }

  virtual ~MapD_set_license_key_args() throw();
  TSessionId session;
  std::string key;
  std::string nonce;

  _MapD_set_license_key_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_key(const std::string& val);

  void __set_nonce(const std::string& val);

  bool operator == (const MapD_set_license_key_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const MapD_set_license_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_set_license_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_set_license_key_pargs {
 public:


  virtual ~MapD_set_license_key_pargs() throw();
  const TSessionId* session;
  const std::string* key;
  const std::string* nonce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_set_license_key_result__isset {
  _MapD_set_license_key_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_set_license_key_result__isset;

class MapD_set_license_key_result {
 public:

  MapD_set_license_key_result(const MapD_set_license_key_result&);
  MapD_set_license_key_result& operator=(const MapD_set_license_key_result&);
  MapD_set_license_key_result() {
  }

  virtual ~MapD_set_license_key_result() throw();
  TLicenseInfo success;
  TMapDException e;

  _MapD_set_license_key_result__isset __isset;

  void __set_success(const TLicenseInfo& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_set_license_key_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_set_license_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_set_license_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_set_license_key_presult__isset {
  _MapD_set_license_key_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_set_license_key_presult__isset;

class MapD_set_license_key_presult {
 public:


  virtual ~MapD_set_license_key_presult() throw();
  TLicenseInfo* success;
  TMapDException e;

  _MapD_set_license_key_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapD_get_license_claims_args__isset {
  _MapD_get_license_claims_args__isset() : session(false), nonce(true) {}
  bool session :1;
  bool nonce :1;
} _MapD_get_license_claims_args__isset;

class MapD_get_license_claims_args {
 public:

  MapD_get_license_claims_args(const MapD_get_license_claims_args&);
  MapD_get_license_claims_args& operator=(const MapD_get_license_claims_args&);
  MapD_get_license_claims_args() : session(), nonce("") {
  }

  virtual ~MapD_get_license_claims_args() throw();
  TSessionId session;
  std::string nonce;

  _MapD_get_license_claims_args__isset __isset;

  void __set_session(const TSessionId& val);

  void __set_nonce(const std::string& val);

  bool operator == (const MapD_get_license_claims_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const MapD_get_license_claims_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_license_claims_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapD_get_license_claims_pargs {
 public:


  virtual ~MapD_get_license_claims_pargs() throw();
  const TSessionId* session;
  const std::string* nonce;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_license_claims_result__isset {
  _MapD_get_license_claims_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_license_claims_result__isset;

class MapD_get_license_claims_result {
 public:

  MapD_get_license_claims_result(const MapD_get_license_claims_result&);
  MapD_get_license_claims_result& operator=(const MapD_get_license_claims_result&);
  MapD_get_license_claims_result() {
  }

  virtual ~MapD_get_license_claims_result() throw();
  TLicenseInfo success;
  TMapDException e;

  _MapD_get_license_claims_result__isset __isset;

  void __set_success(const TLicenseInfo& val);

  void __set_e(const TMapDException& val);

  bool operator == (const MapD_get_license_claims_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MapD_get_license_claims_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapD_get_license_claims_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapD_get_license_claims_presult__isset {
  _MapD_get_license_claims_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MapD_get_license_claims_presult__isset;

class MapD_get_license_claims_presult {
 public:


  virtual ~MapD_get_license_claims_presult() throw();
  TLicenseInfo* success;
  TMapDException e;

  _MapD_get_license_claims_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MapDClient : virtual public MapDIf {
 public:
  MapDClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MapDClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void connect(TSessionId& _return, const std::string& user, const std::string& passwd, const std::string& dbname);
  void send_connect(const std::string& user, const std::string& passwd, const std::string& dbname);
  void recv_connect(TSessionId& _return);
  void disconnect(const TSessionId& session);
  void send_disconnect(const TSessionId& session);
  void recv_disconnect();
  void switch_database(const TSessionId& session, const std::string& dbname);
  void send_switch_database(const TSessionId& session, const std::string& dbname);
  void recv_switch_database();
  void get_server_status(TServerStatus& _return, const TSessionId& session);
  void send_get_server_status(const TSessionId& session);
  void recv_get_server_status(TServerStatus& _return);
  void get_status(std::vector<TServerStatus> & _return, const TSessionId& session);
  void send_get_status(const TSessionId& session);
  void recv_get_status(std::vector<TServerStatus> & _return);
  void get_hardware_info(TClusterHardwareInfo& _return, const TSessionId& session);
  void send_get_hardware_info(const TSessionId& session);
  void recv_get_hardware_info(TClusterHardwareInfo& _return);
  void get_tables(std::vector<std::string> & _return, const TSessionId& session);
  void send_get_tables(const TSessionId& session);
  void recv_get_tables(std::vector<std::string> & _return);
  void get_physical_tables(std::vector<std::string> & _return, const TSessionId& session);
  void send_get_physical_tables(const TSessionId& session);
  void recv_get_physical_tables(std::vector<std::string> & _return);
  void get_views(std::vector<std::string> & _return, const TSessionId& session);
  void send_get_views(const TSessionId& session);
  void recv_get_views(std::vector<std::string> & _return);
  void get_tables_meta(std::vector<TTableMeta> & _return, const TSessionId& session);
  void send_get_tables_meta(const TSessionId& session);
  void recv_get_tables_meta(std::vector<TTableMeta> & _return);
  void get_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name);
  void send_get_table_details(const TSessionId& session, const std::string& table_name);
  void recv_get_table_details(TTableDetails& _return);
  void get_internal_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name);
  void send_get_internal_table_details(const TSessionId& session, const std::string& table_name);
  void recv_get_internal_table_details(TTableDetails& _return);
  void get_users(std::vector<std::string> & _return, const TSessionId& session);
  void send_get_users(const TSessionId& session);
  void recv_get_users(std::vector<std::string> & _return);
  void get_databases(std::vector<TDBInfo> & _return, const TSessionId& session);
  void send_get_databases(const TSessionId& session);
  void recv_get_databases(std::vector<TDBInfo> & _return);
  void get_version(std::string& _return);
  void send_get_version();
  void recv_get_version(std::string& _return);
  void start_heap_profile(const TSessionId& session);
  void send_start_heap_profile(const TSessionId& session);
  void recv_start_heap_profile();
  void stop_heap_profile(const TSessionId& session);
  void send_stop_heap_profile(const TSessionId& session);
  void recv_stop_heap_profile();
  void get_heap_profile(std::string& _return, const TSessionId& session);
  void send_get_heap_profile(const TSessionId& session);
  void recv_get_heap_profile(std::string& _return);
  void get_memory(std::vector<TNodeMemoryInfo> & _return, const TSessionId& session, const std::string& memory_level);
  void send_get_memory(const TSessionId& session, const std::string& memory_level);
  void recv_get_memory(std::vector<TNodeMemoryInfo> & _return);
  void clear_cpu_memory(const TSessionId& session);
  void send_clear_cpu_memory(const TSessionId& session);
  void recv_clear_cpu_memory();
  void clear_gpu_memory(const TSessionId& session);
  void send_clear_gpu_memory(const TSessionId& session);
  void recv_clear_gpu_memory();
  void set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch);
  void send_set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch);
  void recv_set_table_epoch();
  void set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch);
  void send_set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch);
  void recv_set_table_epoch_by_name();
  int32_t get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  void send_get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  int32_t recv_get_table_epoch();
  int32_t get_table_epoch_by_name(const TSessionId& session, const std::string& table_name);
  void send_get_table_epoch_by_name(const TSessionId& session, const std::string& table_name);
  int32_t recv_get_table_epoch_by_name();
  void get_session_info(TSessionInfo& _return, const TSessionId& session);
  void send_get_session_info(const TSessionId& session);
  void recv_get_session_info(TSessionInfo& _return);
  void sql_execute(TQueryResult& _return, const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n);
  void send_sql_execute(const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n);
  void recv_sql_execute(TQueryResult& _return);
  void sql_execute_df(TDataFrame& _return, const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n);
  void send_sql_execute_df(const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n);
  void recv_sql_execute_df(TDataFrame& _return);
  void sql_execute_gdf(TDataFrame& _return, const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n);
  void send_sql_execute_gdf(const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n);
  void recv_sql_execute_gdf(TDataFrame& _return);
  void deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id);
  void send_deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id);
  void recv_deallocate_df();
  void interrupt(const TSessionId& session);
  void send_interrupt(const TSessionId& session);
  void recv_interrupt();
  void sql_validate(TTableDescriptor& _return, const TSessionId& session, const std::string& query);
  void send_sql_validate(const TSessionId& session, const std::string& query);
  void recv_sql_validate(TTableDescriptor& _return);
  void get_completion_hints(std::vector< ::TCompletionHint> & _return, const TSessionId& session, const std::string& sql, const int32_t cursor);
  void send_get_completion_hints(const TSessionId& session, const std::string& sql, const int32_t cursor);
  void recv_get_completion_hints(std::vector< ::TCompletionHint> & _return);
  void set_execution_mode(const TSessionId& session, const TExecuteMode::type mode);
  void send_set_execution_mode(const TSessionId& session, const TExecuteMode::type mode);
  void recv_set_execution_mode();
  void render_vega(TRenderResult& _return, const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce);
  void send_render_vega(const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce);
  void recv_render_vega(TRenderResult& _return);
  void get_result_row_for_pixel(TPixelTableRowResult& _return, const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce);
  void send_get_result_row_for_pixel(const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce);
  void recv_get_result_row_for_pixel(TPixelTableRowResult& _return);
  void get_frontend_view(TFrontendView& _return, const TSessionId& session, const std::string& view_name);
  void send_get_frontend_view(const TSessionId& session, const std::string& view_name);
  void recv_get_frontend_view(TFrontendView& _return);
  void get_frontend_views(std::vector<TFrontendView> & _return, const TSessionId& session);
  void send_get_frontend_views(const TSessionId& session);
  void recv_get_frontend_views(std::vector<TFrontendView> & _return);
  void create_frontend_view(const TSessionId& session, const std::string& view_name, const std::string& view_state, const std::string& image_hash, const std::string& view_metadata);
  void send_create_frontend_view(const TSessionId& session, const std::string& view_name, const std::string& view_state, const std::string& image_hash, const std::string& view_metadata);
  void recv_create_frontend_view();
  void delete_frontend_view(const TSessionId& session, const std::string& view_name);
  void send_delete_frontend_view(const TSessionId& session, const std::string& view_name);
  void recv_delete_frontend_view();
  void get_dashboard(TDashboard& _return, const TSessionId& session, const int32_t dashboard_id);
  void send_get_dashboard(const TSessionId& session, const int32_t dashboard_id);
  void recv_get_dashboard(TDashboard& _return);
  void get_dashboards(std::vector<TDashboard> & _return, const TSessionId& session);
  void send_get_dashboards(const TSessionId& session);
  void recv_get_dashboards(std::vector<TDashboard> & _return);
  int32_t create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  void send_create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  int32_t recv_create_dashboard();
  void replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  void send_replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  void recv_replace_dashboard();
  void delete_dashboard(const TSessionId& session, const int32_t dashboard_id);
  void send_delete_dashboard(const TSessionId& session, const int32_t dashboard_id);
  void recv_delete_dashboard();
  void share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role);
  void send_share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role);
  void recv_share_dashboard();
  void unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions);
  void send_unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions);
  void recv_unshare_dashboard();
  void get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const TSessionId& session, const int32_t dashboard_id);
  void send_get_dashboard_grantees(const TSessionId& session, const int32_t dashboard_id);
  void recv_get_dashboard_grantees(std::vector<TDashboardGrantees> & _return);
  void get_link_view(TFrontendView& _return, const TSessionId& session, const std::string& link);
  void send_get_link_view(const TSessionId& session, const std::string& link);
  void recv_get_link_view(TFrontendView& _return);
  void create_link(std::string& _return, const TSessionId& session, const std::string& view_state, const std::string& view_metadata);
  void send_create_link(const TSessionId& session, const std::string& view_state, const std::string& view_metadata);
  void recv_create_link(std::string& _return);
  void load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows);
  void send_load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows);
  void recv_load_table_binary();
  void load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols);
  void send_load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols);
  void recv_load_table_binary_columnar();
  void load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream);
  void send_load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream);
  void recv_load_table_binary_arrow();
  void load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows);
  void send_load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows);
  void recv_load_table();
  void detect_column_types(TDetectResult& _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void send_detect_column_types(const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void recv_detect_column_types(TDetectResult& _return);
  void create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params);
  void send_create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params);
  void recv_create_table();
  void import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params);
  void send_import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params);
  void recv_import_table();
  void import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params);
  void send_import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params);
  void recv_import_geo_table();
  void import_table_status(TImportStatus& _return, const TSessionId& session, const std::string& import_id);
  void send_import_table_status(const TSessionId& session, const std::string& import_id);
  void recv_import_table_status(TImportStatus& _return);
  void get_first_geo_file_in_archive(std::string& _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void send_get_first_geo_file_in_archive(const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void recv_get_first_geo_file_in_archive(std::string& _return);
  void get_all_files_in_archive(std::vector<std::string> & _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void send_get_all_files_in_archive(const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void recv_get_all_files_in_archive(std::vector<std::string> & _return);
  void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void send_get_layers_in_geo_file(const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void recv_get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return);
  void check_table_consistency(TTableMeta& _return, const TSessionId& session, const int32_t table_id);
  void send_check_table_consistency(const TSessionId& session, const int32_t table_id);
  void recv_check_table_consistency(TTableMeta& _return);
  void start_query(TPendingQuery& _return, const TSessionId& session, const std::string& query_ra, const bool just_explain);
  void send_start_query(const TSessionId& session, const std::string& query_ra, const bool just_explain);
  void recv_start_query(TPendingQuery& _return);
  void execute_first_step(TStepResult& _return, const TPendingQuery& pending_query);
  void send_execute_first_step(const TPendingQuery& pending_query);
  void recv_execute_first_step(TStepResult& _return);
  void broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id);
  void send_broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id);
  void recv_broadcast_serialized_rows();
  void start_render_query(TPendingRenderQuery& _return, const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json);
  void send_start_render_query(const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json);
  void recv_start_render_query(TPendingRenderQuery& _return);
  void execute_next_render_step(TRenderStepResult& _return, const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data);
  void send_execute_next_render_step(const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data);
  void recv_execute_next_render_step(TRenderStepResult& _return);
  void insert_data(const TSessionId& session, const TInsertData& insert_data);
  void send_insert_data(const TSessionId& session, const TInsertData& insert_data);
  void recv_insert_data();
  void checkpoint(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  void send_checkpoint(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  void recv_checkpoint();
  void get_table_descriptor(TTableDescriptor& _return, const TSessionId& session, const std::string& table_name);
  void send_get_table_descriptor(const TSessionId& session, const std::string& table_name);
  void recv_get_table_descriptor(TTableDescriptor& _return);
  void get_row_descriptor(TRowDescriptor& _return, const TSessionId& session, const std::string& table_name);
  void send_get_row_descriptor(const TSessionId& session, const std::string& table_name);
  void recv_get_row_descriptor(TRowDescriptor& _return);
  void get_roles(std::vector<std::string> & _return, const TSessionId& session);
  void send_get_roles(const TSessionId& session);
  void recv_get_roles(std::vector<std::string> & _return);
  void get_db_objects_for_grantee(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& roleName);
  void send_get_db_objects_for_grantee(const TSessionId& session, const std::string& roleName);
  void recv_get_db_objects_for_grantee(std::vector<TDBObject> & _return);
  void get_db_object_privs(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& objectName, const TDBObjectType::type type);
  void send_get_db_object_privs(const TSessionId& session, const std::string& objectName, const TDBObjectType::type type);
  void recv_get_db_object_privs(std::vector<TDBObject> & _return);
  void get_all_roles_for_user(std::vector<std::string> & _return, const TSessionId& session, const std::string& userName);
  void send_get_all_roles_for_user(const TSessionId& session, const std::string& userName);
  void recv_get_all_roles_for_user(std::vector<std::string> & _return);
  bool has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions);
  void send_has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions);
  bool recv_has_object_privilege();
  void set_license_key(TLicenseInfo& _return, const TSessionId& session, const std::string& key, const std::string& nonce);
  void send_set_license_key(const TSessionId& session, const std::string& key, const std::string& nonce);
  void recv_set_license_key(TLicenseInfo& _return);
  void get_license_claims(TLicenseInfo& _return, const TSessionId& session, const std::string& nonce);
  void send_get_license_claims(const TSessionId& session, const std::string& nonce);
  void recv_get_license_claims(TLicenseInfo& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MapDProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<MapDIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MapDProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_switch_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_server_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_hardware_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_physical_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_views(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_tables_meta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_details(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_internal_table_details(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_users(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_databases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_version(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_heap_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop_heap_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_heap_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_memory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_cpu_memory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_gpu_memory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_table_epoch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_table_epoch_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_epoch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_epoch_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_session_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_execute_df(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_execute_gdf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deallocate_df(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_interrupt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_validate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_completion_hints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_execution_mode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_render_vega(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_result_row_for_pixel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_frontend_view(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_frontend_views(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_frontend_view(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_frontend_view(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_dashboards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_replace_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_share_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unshare_dashboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_dashboard_grantees(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_link_view(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_link(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_table_binary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_table_binary_columnar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_table_binary_arrow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_detect_column_types(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_import_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_import_geo_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_import_table_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_first_geo_file_in_archive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_files_in_archive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_layers_in_geo_file(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_check_table_consistency(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_execute_first_step(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_broadcast_serialized_rows(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_render_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_execute_next_render_step(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insert_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_table_descriptor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_row_descriptor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_roles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_db_objects_for_grantee(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_db_object_privs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_roles_for_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_has_object_privilege(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_license_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_license_claims(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MapDProcessor(::apache::thrift::stdcxx::shared_ptr<MapDIf> iface) :
    iface_(iface) {
    processMap_["connect"] = &MapDProcessor::process_connect;
    processMap_["disconnect"] = &MapDProcessor::process_disconnect;
    processMap_["switch_database"] = &MapDProcessor::process_switch_database;
    processMap_["get_server_status"] = &MapDProcessor::process_get_server_status;
    processMap_["get_status"] = &MapDProcessor::process_get_status;
    processMap_["get_hardware_info"] = &MapDProcessor::process_get_hardware_info;
    processMap_["get_tables"] = &MapDProcessor::process_get_tables;
    processMap_["get_physical_tables"] = &MapDProcessor::process_get_physical_tables;
    processMap_["get_views"] = &MapDProcessor::process_get_views;
    processMap_["get_tables_meta"] = &MapDProcessor::process_get_tables_meta;
    processMap_["get_table_details"] = &MapDProcessor::process_get_table_details;
    processMap_["get_internal_table_details"] = &MapDProcessor::process_get_internal_table_details;
    processMap_["get_users"] = &MapDProcessor::process_get_users;
    processMap_["get_databases"] = &MapDProcessor::process_get_databases;
    processMap_["get_version"] = &MapDProcessor::process_get_version;
    processMap_["start_heap_profile"] = &MapDProcessor::process_start_heap_profile;
    processMap_["stop_heap_profile"] = &MapDProcessor::process_stop_heap_profile;
    processMap_["get_heap_profile"] = &MapDProcessor::process_get_heap_profile;
    processMap_["get_memory"] = &MapDProcessor::process_get_memory;
    processMap_["clear_cpu_memory"] = &MapDProcessor::process_clear_cpu_memory;
    processMap_["clear_gpu_memory"] = &MapDProcessor::process_clear_gpu_memory;
    processMap_["set_table_epoch"] = &MapDProcessor::process_set_table_epoch;
    processMap_["set_table_epoch_by_name"] = &MapDProcessor::process_set_table_epoch_by_name;
    processMap_["get_table_epoch"] = &MapDProcessor::process_get_table_epoch;
    processMap_["get_table_epoch_by_name"] = &MapDProcessor::process_get_table_epoch_by_name;
    processMap_["get_session_info"] = &MapDProcessor::process_get_session_info;
    processMap_["sql_execute"] = &MapDProcessor::process_sql_execute;
    processMap_["sql_execute_df"] = &MapDProcessor::process_sql_execute_df;
    processMap_["sql_execute_gdf"] = &MapDProcessor::process_sql_execute_gdf;
    processMap_["deallocate_df"] = &MapDProcessor::process_deallocate_df;
    processMap_["interrupt"] = &MapDProcessor::process_interrupt;
    processMap_["sql_validate"] = &MapDProcessor::process_sql_validate;
    processMap_["get_completion_hints"] = &MapDProcessor::process_get_completion_hints;
    processMap_["set_execution_mode"] = &MapDProcessor::process_set_execution_mode;
    processMap_["render_vega"] = &MapDProcessor::process_render_vega;
    processMap_["get_result_row_for_pixel"] = &MapDProcessor::process_get_result_row_for_pixel;
    processMap_["get_frontend_view"] = &MapDProcessor::process_get_frontend_view;
    processMap_["get_frontend_views"] = &MapDProcessor::process_get_frontend_views;
    processMap_["create_frontend_view"] = &MapDProcessor::process_create_frontend_view;
    processMap_["delete_frontend_view"] = &MapDProcessor::process_delete_frontend_view;
    processMap_["get_dashboard"] = &MapDProcessor::process_get_dashboard;
    processMap_["get_dashboards"] = &MapDProcessor::process_get_dashboards;
    processMap_["create_dashboard"] = &MapDProcessor::process_create_dashboard;
    processMap_["replace_dashboard"] = &MapDProcessor::process_replace_dashboard;
    processMap_["delete_dashboard"] = &MapDProcessor::process_delete_dashboard;
    processMap_["share_dashboard"] = &MapDProcessor::process_share_dashboard;
    processMap_["unshare_dashboard"] = &MapDProcessor::process_unshare_dashboard;
    processMap_["get_dashboard_grantees"] = &MapDProcessor::process_get_dashboard_grantees;
    processMap_["get_link_view"] = &MapDProcessor::process_get_link_view;
    processMap_["create_link"] = &MapDProcessor::process_create_link;
    processMap_["load_table_binary"] = &MapDProcessor::process_load_table_binary;
    processMap_["load_table_binary_columnar"] = &MapDProcessor::process_load_table_binary_columnar;
    processMap_["load_table_binary_arrow"] = &MapDProcessor::process_load_table_binary_arrow;
    processMap_["load_table"] = &MapDProcessor::process_load_table;
    processMap_["detect_column_types"] = &MapDProcessor::process_detect_column_types;
    processMap_["create_table"] = &MapDProcessor::process_create_table;
    processMap_["import_table"] = &MapDProcessor::process_import_table;
    processMap_["import_geo_table"] = &MapDProcessor::process_import_geo_table;
    processMap_["import_table_status"] = &MapDProcessor::process_import_table_status;
    processMap_["get_first_geo_file_in_archive"] = &MapDProcessor::process_get_first_geo_file_in_archive;
    processMap_["get_all_files_in_archive"] = &MapDProcessor::process_get_all_files_in_archive;
    processMap_["get_layers_in_geo_file"] = &MapDProcessor::process_get_layers_in_geo_file;
    processMap_["check_table_consistency"] = &MapDProcessor::process_check_table_consistency;
    processMap_["start_query"] = &MapDProcessor::process_start_query;
    processMap_["execute_first_step"] = &MapDProcessor::process_execute_first_step;
    processMap_["broadcast_serialized_rows"] = &MapDProcessor::process_broadcast_serialized_rows;
    processMap_["start_render_query"] = &MapDProcessor::process_start_render_query;
    processMap_["execute_next_render_step"] = &MapDProcessor::process_execute_next_render_step;
    processMap_["insert_data"] = &MapDProcessor::process_insert_data;
    processMap_["checkpoint"] = &MapDProcessor::process_checkpoint;
    processMap_["get_table_descriptor"] = &MapDProcessor::process_get_table_descriptor;
    processMap_["get_row_descriptor"] = &MapDProcessor::process_get_row_descriptor;
    processMap_["get_roles"] = &MapDProcessor::process_get_roles;
    processMap_["get_db_objects_for_grantee"] = &MapDProcessor::process_get_db_objects_for_grantee;
    processMap_["get_db_object_privs"] = &MapDProcessor::process_get_db_object_privs;
    processMap_["get_all_roles_for_user"] = &MapDProcessor::process_get_all_roles_for_user;
    processMap_["has_object_privilege"] = &MapDProcessor::process_has_object_privilege;
    processMap_["set_license_key"] = &MapDProcessor::process_set_license_key;
    processMap_["get_license_claims"] = &MapDProcessor::process_get_license_claims;
  }

  virtual ~MapDProcessor() {}
};

class MapDProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MapDProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< MapDIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< MapDIfFactory > handlerFactory_;
};

class MapDMultiface : virtual public MapDIf {
 public:
  MapDMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<MapDIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MapDMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<MapDIf> > ifaces_;
  MapDMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<MapDIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void connect(TSessionId& _return, const std::string& user, const std::string& passwd, const std::string& dbname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect(_return, user, passwd, dbname);
    }
    ifaces_[i]->connect(_return, user, passwd, dbname);
    return;
  }

  void disconnect(const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect(session);
    }
    ifaces_[i]->disconnect(session);
  }

  void switch_database(const TSessionId& session, const std::string& dbname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->switch_database(session, dbname);
    }
    ifaces_[i]->switch_database(session, dbname);
  }

  void get_server_status(TServerStatus& _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_server_status(_return, session);
    }
    ifaces_[i]->get_server_status(_return, session);
    return;
  }

  void get_status(std::vector<TServerStatus> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_status(_return, session);
    }
    ifaces_[i]->get_status(_return, session);
    return;
  }

  void get_hardware_info(TClusterHardwareInfo& _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_hardware_info(_return, session);
    }
    ifaces_[i]->get_hardware_info(_return, session);
    return;
  }

  void get_tables(std::vector<std::string> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_tables(_return, session);
    }
    ifaces_[i]->get_tables(_return, session);
    return;
  }

  void get_physical_tables(std::vector<std::string> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_physical_tables(_return, session);
    }
    ifaces_[i]->get_physical_tables(_return, session);
    return;
  }

  void get_views(std::vector<std::string> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_views(_return, session);
    }
    ifaces_[i]->get_views(_return, session);
    return;
  }

  void get_tables_meta(std::vector<TTableMeta> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_tables_meta(_return, session);
    }
    ifaces_[i]->get_tables_meta(_return, session);
    return;
  }

  void get_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_details(_return, session, table_name);
    }
    ifaces_[i]->get_table_details(_return, session, table_name);
    return;
  }

  void get_internal_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_internal_table_details(_return, session, table_name);
    }
    ifaces_[i]->get_internal_table_details(_return, session, table_name);
    return;
  }

  void get_users(std::vector<std::string> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_users(_return, session);
    }
    ifaces_[i]->get_users(_return, session);
    return;
  }

  void get_databases(std::vector<TDBInfo> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_databases(_return, session);
    }
    ifaces_[i]->get_databases(_return, session);
    return;
  }

  void get_version(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_version(_return);
    }
    ifaces_[i]->get_version(_return);
    return;
  }

  void start_heap_profile(const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_heap_profile(session);
    }
    ifaces_[i]->start_heap_profile(session);
  }

  void stop_heap_profile(const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop_heap_profile(session);
    }
    ifaces_[i]->stop_heap_profile(session);
  }

  void get_heap_profile(std::string& _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_heap_profile(_return, session);
    }
    ifaces_[i]->get_heap_profile(_return, session);
    return;
  }

  void get_memory(std::vector<TNodeMemoryInfo> & _return, const TSessionId& session, const std::string& memory_level) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_memory(_return, session, memory_level);
    }
    ifaces_[i]->get_memory(_return, session, memory_level);
    return;
  }

  void clear_cpu_memory(const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_cpu_memory(session);
    }
    ifaces_[i]->clear_cpu_memory(session);
  }

  void clear_gpu_memory(const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_gpu_memory(session);
    }
    ifaces_[i]->clear_gpu_memory(session);
  }

  void set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_table_epoch(session, db_id, table_id, new_epoch);
    }
    ifaces_[i]->set_table_epoch(session, db_id, table_id, new_epoch);
  }

  void set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_table_epoch_by_name(session, table_name, new_epoch);
    }
    ifaces_[i]->set_table_epoch_by_name(session, table_name, new_epoch);
  }

  int32_t get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_epoch(session, db_id, table_id);
    }
    return ifaces_[i]->get_table_epoch(session, db_id, table_id);
  }

  int32_t get_table_epoch_by_name(const TSessionId& session, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_epoch_by_name(session, table_name);
    }
    return ifaces_[i]->get_table_epoch_by_name(session, table_name);
  }

  void get_session_info(TSessionInfo& _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_session_info(_return, session);
    }
    ifaces_[i]->get_session_info(_return, session);
    return;
  }

  void sql_execute(TQueryResult& _return, const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_execute(_return, session, query, column_format, nonce, first_n, at_most_n);
    }
    ifaces_[i]->sql_execute(_return, session, query, column_format, nonce, first_n, at_most_n);
    return;
  }

  void sql_execute_df(TDataFrame& _return, const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_execute_df(_return, session, query, device_type, device_id, first_n);
    }
    ifaces_[i]->sql_execute_df(_return, session, query, device_type, device_id, first_n);
    return;
  }

  void sql_execute_gdf(TDataFrame& _return, const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_execute_gdf(_return, session, query, device_id, first_n);
    }
    ifaces_[i]->sql_execute_gdf(_return, session, query, device_id, first_n);
    return;
  }

  void deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deallocate_df(session, df, device_type, device_id);
    }
    ifaces_[i]->deallocate_df(session, df, device_type, device_id);
  }

  void interrupt(const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->interrupt(session);
    }
    ifaces_[i]->interrupt(session);
  }

  void sql_validate(TTableDescriptor& _return, const TSessionId& session, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_validate(_return, session, query);
    }
    ifaces_[i]->sql_validate(_return, session, query);
    return;
  }

  void get_completion_hints(std::vector< ::TCompletionHint> & _return, const TSessionId& session, const std::string& sql, const int32_t cursor) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_completion_hints(_return, session, sql, cursor);
    }
    ifaces_[i]->get_completion_hints(_return, session, sql, cursor);
    return;
  }

  void set_execution_mode(const TSessionId& session, const TExecuteMode::type mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_execution_mode(session, mode);
    }
    ifaces_[i]->set_execution_mode(session, mode);
  }

  void render_vega(TRenderResult& _return, const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->render_vega(_return, session, widget_id, vega_json, compression_level, nonce);
    }
    ifaces_[i]->render_vega(_return, session, widget_id, vega_json, compression_level, nonce);
    return;
  }

  void get_result_row_for_pixel(TPixelTableRowResult& _return, const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_result_row_for_pixel(_return, session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
    }
    ifaces_[i]->get_result_row_for_pixel(_return, session, widget_id, pixel, table_col_names, column_format, pixelRadius, nonce);
    return;
  }

  void get_frontend_view(TFrontendView& _return, const TSessionId& session, const std::string& view_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_frontend_view(_return, session, view_name);
    }
    ifaces_[i]->get_frontend_view(_return, session, view_name);
    return;
  }

  void get_frontend_views(std::vector<TFrontendView> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_frontend_views(_return, session);
    }
    ifaces_[i]->get_frontend_views(_return, session);
    return;
  }

  void create_frontend_view(const TSessionId& session, const std::string& view_name, const std::string& view_state, const std::string& image_hash, const std::string& view_metadata) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_frontend_view(session, view_name, view_state, image_hash, view_metadata);
    }
    ifaces_[i]->create_frontend_view(session, view_name, view_state, image_hash, view_metadata);
  }

  void delete_frontend_view(const TSessionId& session, const std::string& view_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_frontend_view(session, view_name);
    }
    ifaces_[i]->delete_frontend_view(session, view_name);
  }

  void get_dashboard(TDashboard& _return, const TSessionId& session, const int32_t dashboard_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_dashboard(_return, session, dashboard_id);
    }
    ifaces_[i]->get_dashboard(_return, session, dashboard_id);
    return;
  }

  void get_dashboards(std::vector<TDashboard> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_dashboards(_return, session);
    }
    ifaces_[i]->get_dashboards(_return, session);
    return;
  }

  int32_t create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata);
    }
    return ifaces_[i]->create_dashboard(session, dashboard_name, dashboard_state, image_hash, dashboard_metadata);
  }

  void replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata);
    }
    ifaces_[i]->replace_dashboard(session, dashboard_id, dashboard_name, dashboard_owner, dashboard_state, image_hash, dashboard_metadata);
  }

  void delete_dashboard(const TSessionId& session, const int32_t dashboard_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_dashboard(session, dashboard_id);
    }
    ifaces_[i]->delete_dashboard(session, dashboard_id);
  }

  void share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role);
    }
    ifaces_[i]->share_dashboard(session, dashboard_id, groups, objects, permissions, grant_role);
  }

  void unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unshare_dashboard(session, dashboard_id, groups, objects, permissions);
    }
    ifaces_[i]->unshare_dashboard(session, dashboard_id, groups, objects, permissions);
  }

  void get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const TSessionId& session, const int32_t dashboard_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_dashboard_grantees(_return, session, dashboard_id);
    }
    ifaces_[i]->get_dashboard_grantees(_return, session, dashboard_id);
    return;
  }

  void get_link_view(TFrontendView& _return, const TSessionId& session, const std::string& link) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_link_view(_return, session, link);
    }
    ifaces_[i]->get_link_view(_return, session, link);
    return;
  }

  void create_link(std::string& _return, const TSessionId& session, const std::string& view_state, const std::string& view_metadata) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_link(_return, session, view_state, view_metadata);
    }
    ifaces_[i]->create_link(_return, session, view_state, view_metadata);
    return;
  }

  void load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_table_binary(session, table_name, rows);
    }
    ifaces_[i]->load_table_binary(session, table_name, rows);
  }

  void load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_table_binary_columnar(session, table_name, cols);
    }
    ifaces_[i]->load_table_binary_columnar(session, table_name, cols);
  }

  void load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_table_binary_arrow(session, table_name, arrow_stream);
    }
    ifaces_[i]->load_table_binary_arrow(session, table_name, arrow_stream);
  }

  void load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_table(session, table_name, rows);
    }
    ifaces_[i]->load_table(session, table_name, rows);
  }

  void detect_column_types(TDetectResult& _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->detect_column_types(_return, session, file_name, copy_params);
    }
    ifaces_[i]->detect_column_types(_return, session, file_name, copy_params);
    return;
  }

  void create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_table(session, table_name, row_desc, file_type, create_params);
    }
    ifaces_[i]->create_table(session, table_name, row_desc, file_type, create_params);
  }

  void import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->import_table(session, table_name, file_name, copy_params);
    }
    ifaces_[i]->import_table(session, table_name, file_name, copy_params);
  }

  void import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params);
    }
    ifaces_[i]->import_geo_table(session, table_name, file_name, copy_params, row_desc, create_params);
  }

  void import_table_status(TImportStatus& _return, const TSessionId& session, const std::string& import_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->import_table_status(_return, session, import_id);
    }
    ifaces_[i]->import_table_status(_return, session, import_id);
    return;
  }

  void get_first_geo_file_in_archive(std::string& _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_first_geo_file_in_archive(_return, session, archive_path, copy_params);
    }
    ifaces_[i]->get_first_geo_file_in_archive(_return, session, archive_path, copy_params);
    return;
  }

  void get_all_files_in_archive(std::vector<std::string> & _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_files_in_archive(_return, session, archive_path, copy_params);
    }
    ifaces_[i]->get_all_files_in_archive(_return, session, archive_path, copy_params);
    return;
  }

  void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_layers_in_geo_file(_return, session, file_name, copy_params);
    }
    ifaces_[i]->get_layers_in_geo_file(_return, session, file_name, copy_params);
    return;
  }

  void check_table_consistency(TTableMeta& _return, const TSessionId& session, const int32_t table_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check_table_consistency(_return, session, table_id);
    }
    ifaces_[i]->check_table_consistency(_return, session, table_id);
    return;
  }

  void start_query(TPendingQuery& _return, const TSessionId& session, const std::string& query_ra, const bool just_explain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_query(_return, session, query_ra, just_explain);
    }
    ifaces_[i]->start_query(_return, session, query_ra, just_explain);
    return;
  }

  void execute_first_step(TStepResult& _return, const TPendingQuery& pending_query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute_first_step(_return, pending_query);
    }
    ifaces_[i]->execute_first_step(_return, pending_query);
    return;
  }

  void broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->broadcast_serialized_rows(serialized_rows, row_desc, query_id);
    }
    ifaces_[i]->broadcast_serialized_rows(serialized_rows, row_desc, query_id);
  }

  void start_render_query(TPendingRenderQuery& _return, const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_render_query(_return, session, widget_id, node_idx, vega_json);
    }
    ifaces_[i]->start_render_query(_return, session, widget_id, node_idx, vega_json);
    return;
  }

  void execute_next_render_step(TRenderStepResult& _return, const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute_next_render_step(_return, pending_render, merged_data);
    }
    ifaces_[i]->execute_next_render_step(_return, pending_render, merged_data);
    return;
  }

  void insert_data(const TSessionId& session, const TInsertData& insert_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert_data(session, insert_data);
    }
    ifaces_[i]->insert_data(session, insert_data);
  }

  void checkpoint(const TSessionId& session, const int32_t db_id, const int32_t table_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkpoint(session, db_id, table_id);
    }
    ifaces_[i]->checkpoint(session, db_id, table_id);
  }

  void get_table_descriptor(TTableDescriptor& _return, const TSessionId& session, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_table_descriptor(_return, session, table_name);
    }
    ifaces_[i]->get_table_descriptor(_return, session, table_name);
    return;
  }

  void get_row_descriptor(TRowDescriptor& _return, const TSessionId& session, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_row_descriptor(_return, session, table_name);
    }
    ifaces_[i]->get_row_descriptor(_return, session, table_name);
    return;
  }

  void get_roles(std::vector<std::string> & _return, const TSessionId& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_roles(_return, session);
    }
    ifaces_[i]->get_roles(_return, session);
    return;
  }

  void get_db_objects_for_grantee(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& roleName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_db_objects_for_grantee(_return, session, roleName);
    }
    ifaces_[i]->get_db_objects_for_grantee(_return, session, roleName);
    return;
  }

  void get_db_object_privs(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& objectName, const TDBObjectType::type type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_db_object_privs(_return, session, objectName, type);
    }
    ifaces_[i]->get_db_object_privs(_return, session, objectName, type);
    return;
  }

  void get_all_roles_for_user(std::vector<std::string> & _return, const TSessionId& session, const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_roles_for_user(_return, session, userName);
    }
    ifaces_[i]->get_all_roles_for_user(_return, session, userName);
    return;
  }

  bool has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->has_object_privilege(session, granteeName, ObjectName, objectType, permissions);
    }
    return ifaces_[i]->has_object_privilege(session, granteeName, ObjectName, objectType, permissions);
  }

  void set_license_key(TLicenseInfo& _return, const TSessionId& session, const std::string& key, const std::string& nonce) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_license_key(_return, session, key, nonce);
    }
    ifaces_[i]->set_license_key(_return, session, key, nonce);
    return;
  }

  void get_license_claims(TLicenseInfo& _return, const TSessionId& session, const std::string& nonce) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_license_claims(_return, session, nonce);
    }
    ifaces_[i]->get_license_claims(_return, session, nonce);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MapDConcurrentClient : virtual public MapDIf {
 public:
  MapDConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MapDConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void connect(TSessionId& _return, const std::string& user, const std::string& passwd, const std::string& dbname);
  int32_t send_connect(const std::string& user, const std::string& passwd, const std::string& dbname);
  void recv_connect(TSessionId& _return, const int32_t seqid);
  void disconnect(const TSessionId& session);
  int32_t send_disconnect(const TSessionId& session);
  void recv_disconnect(const int32_t seqid);
  void switch_database(const TSessionId& session, const std::string& dbname);
  int32_t send_switch_database(const TSessionId& session, const std::string& dbname);
  void recv_switch_database(const int32_t seqid);
  void get_server_status(TServerStatus& _return, const TSessionId& session);
  int32_t send_get_server_status(const TSessionId& session);
  void recv_get_server_status(TServerStatus& _return, const int32_t seqid);
  void get_status(std::vector<TServerStatus> & _return, const TSessionId& session);
  int32_t send_get_status(const TSessionId& session);
  void recv_get_status(std::vector<TServerStatus> & _return, const int32_t seqid);
  void get_hardware_info(TClusterHardwareInfo& _return, const TSessionId& session);
  int32_t send_get_hardware_info(const TSessionId& session);
  void recv_get_hardware_info(TClusterHardwareInfo& _return, const int32_t seqid);
  void get_tables(std::vector<std::string> & _return, const TSessionId& session);
  int32_t send_get_tables(const TSessionId& session);
  void recv_get_tables(std::vector<std::string> & _return, const int32_t seqid);
  void get_physical_tables(std::vector<std::string> & _return, const TSessionId& session);
  int32_t send_get_physical_tables(const TSessionId& session);
  void recv_get_physical_tables(std::vector<std::string> & _return, const int32_t seqid);
  void get_views(std::vector<std::string> & _return, const TSessionId& session);
  int32_t send_get_views(const TSessionId& session);
  void recv_get_views(std::vector<std::string> & _return, const int32_t seqid);
  void get_tables_meta(std::vector<TTableMeta> & _return, const TSessionId& session);
  int32_t send_get_tables_meta(const TSessionId& session);
  void recv_get_tables_meta(std::vector<TTableMeta> & _return, const int32_t seqid);
  void get_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name);
  int32_t send_get_table_details(const TSessionId& session, const std::string& table_name);
  void recv_get_table_details(TTableDetails& _return, const int32_t seqid);
  void get_internal_table_details(TTableDetails& _return, const TSessionId& session, const std::string& table_name);
  int32_t send_get_internal_table_details(const TSessionId& session, const std::string& table_name);
  void recv_get_internal_table_details(TTableDetails& _return, const int32_t seqid);
  void get_users(std::vector<std::string> & _return, const TSessionId& session);
  int32_t send_get_users(const TSessionId& session);
  void recv_get_users(std::vector<std::string> & _return, const int32_t seqid);
  void get_databases(std::vector<TDBInfo> & _return, const TSessionId& session);
  int32_t send_get_databases(const TSessionId& session);
  void recv_get_databases(std::vector<TDBInfo> & _return, const int32_t seqid);
  void get_version(std::string& _return);
  int32_t send_get_version();
  void recv_get_version(std::string& _return, const int32_t seqid);
  void start_heap_profile(const TSessionId& session);
  int32_t send_start_heap_profile(const TSessionId& session);
  void recv_start_heap_profile(const int32_t seqid);
  void stop_heap_profile(const TSessionId& session);
  int32_t send_stop_heap_profile(const TSessionId& session);
  void recv_stop_heap_profile(const int32_t seqid);
  void get_heap_profile(std::string& _return, const TSessionId& session);
  int32_t send_get_heap_profile(const TSessionId& session);
  void recv_get_heap_profile(std::string& _return, const int32_t seqid);
  void get_memory(std::vector<TNodeMemoryInfo> & _return, const TSessionId& session, const std::string& memory_level);
  int32_t send_get_memory(const TSessionId& session, const std::string& memory_level);
  void recv_get_memory(std::vector<TNodeMemoryInfo> & _return, const int32_t seqid);
  void clear_cpu_memory(const TSessionId& session);
  int32_t send_clear_cpu_memory(const TSessionId& session);
  void recv_clear_cpu_memory(const int32_t seqid);
  void clear_gpu_memory(const TSessionId& session);
  int32_t send_clear_gpu_memory(const TSessionId& session);
  void recv_clear_gpu_memory(const int32_t seqid);
  void set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch);
  int32_t send_set_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id, const int32_t new_epoch);
  void recv_set_table_epoch(const int32_t seqid);
  void set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch);
  int32_t send_set_table_epoch_by_name(const TSessionId& session, const std::string& table_name, const int32_t new_epoch);
  void recv_set_table_epoch_by_name(const int32_t seqid);
  int32_t get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  int32_t send_get_table_epoch(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  int32_t recv_get_table_epoch(const int32_t seqid);
  int32_t get_table_epoch_by_name(const TSessionId& session, const std::string& table_name);
  int32_t send_get_table_epoch_by_name(const TSessionId& session, const std::string& table_name);
  int32_t recv_get_table_epoch_by_name(const int32_t seqid);
  void get_session_info(TSessionInfo& _return, const TSessionId& session);
  int32_t send_get_session_info(const TSessionId& session);
  void recv_get_session_info(TSessionInfo& _return, const int32_t seqid);
  void sql_execute(TQueryResult& _return, const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n);
  int32_t send_sql_execute(const TSessionId& session, const std::string& query, const bool column_format, const std::string& nonce, const int32_t first_n, const int32_t at_most_n);
  void recv_sql_execute(TQueryResult& _return, const int32_t seqid);
  void sql_execute_df(TDataFrame& _return, const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n);
  int32_t send_sql_execute_df(const TSessionId& session, const std::string& query, const  ::TDeviceType::type device_type, const int32_t device_id, const int32_t first_n);
  void recv_sql_execute_df(TDataFrame& _return, const int32_t seqid);
  void sql_execute_gdf(TDataFrame& _return, const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n);
  int32_t send_sql_execute_gdf(const TSessionId& session, const std::string& query, const int32_t device_id, const int32_t first_n);
  void recv_sql_execute_gdf(TDataFrame& _return, const int32_t seqid);
  void deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id);
  int32_t send_deallocate_df(const TSessionId& session, const TDataFrame& df, const  ::TDeviceType::type device_type, const int32_t device_id);
  void recv_deallocate_df(const int32_t seqid);
  void interrupt(const TSessionId& session);
  int32_t send_interrupt(const TSessionId& session);
  void recv_interrupt(const int32_t seqid);
  void sql_validate(TTableDescriptor& _return, const TSessionId& session, const std::string& query);
  int32_t send_sql_validate(const TSessionId& session, const std::string& query);
  void recv_sql_validate(TTableDescriptor& _return, const int32_t seqid);
  void get_completion_hints(std::vector< ::TCompletionHint> & _return, const TSessionId& session, const std::string& sql, const int32_t cursor);
  int32_t send_get_completion_hints(const TSessionId& session, const std::string& sql, const int32_t cursor);
  void recv_get_completion_hints(std::vector< ::TCompletionHint> & _return, const int32_t seqid);
  void set_execution_mode(const TSessionId& session, const TExecuteMode::type mode);
  int32_t send_set_execution_mode(const TSessionId& session, const TExecuteMode::type mode);
  void recv_set_execution_mode(const int32_t seqid);
  void render_vega(TRenderResult& _return, const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce);
  int32_t send_render_vega(const TSessionId& session, const int64_t widget_id, const std::string& vega_json, const int32_t compression_level, const std::string& nonce);
  void recv_render_vega(TRenderResult& _return, const int32_t seqid);
  void get_result_row_for_pixel(TPixelTableRowResult& _return, const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce);
  int32_t send_get_result_row_for_pixel(const TSessionId& session, const int64_t widget_id, const TPixel& pixel, const std::map<std::string, std::vector<std::string> > & table_col_names, const bool column_format, const int32_t pixelRadius, const std::string& nonce);
  void recv_get_result_row_for_pixel(TPixelTableRowResult& _return, const int32_t seqid);
  void get_frontend_view(TFrontendView& _return, const TSessionId& session, const std::string& view_name);
  int32_t send_get_frontend_view(const TSessionId& session, const std::string& view_name);
  void recv_get_frontend_view(TFrontendView& _return, const int32_t seqid);
  void get_frontend_views(std::vector<TFrontendView> & _return, const TSessionId& session);
  int32_t send_get_frontend_views(const TSessionId& session);
  void recv_get_frontend_views(std::vector<TFrontendView> & _return, const int32_t seqid);
  void create_frontend_view(const TSessionId& session, const std::string& view_name, const std::string& view_state, const std::string& image_hash, const std::string& view_metadata);
  int32_t send_create_frontend_view(const TSessionId& session, const std::string& view_name, const std::string& view_state, const std::string& image_hash, const std::string& view_metadata);
  void recv_create_frontend_view(const int32_t seqid);
  void delete_frontend_view(const TSessionId& session, const std::string& view_name);
  int32_t send_delete_frontend_view(const TSessionId& session, const std::string& view_name);
  void recv_delete_frontend_view(const int32_t seqid);
  void get_dashboard(TDashboard& _return, const TSessionId& session, const int32_t dashboard_id);
  int32_t send_get_dashboard(const TSessionId& session, const int32_t dashboard_id);
  void recv_get_dashboard(TDashboard& _return, const int32_t seqid);
  void get_dashboards(std::vector<TDashboard> & _return, const TSessionId& session);
  int32_t send_get_dashboards(const TSessionId& session);
  void recv_get_dashboards(std::vector<TDashboard> & _return, const int32_t seqid);
  int32_t create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  int32_t send_create_dashboard(const TSessionId& session, const std::string& dashboard_name, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  int32_t recv_create_dashboard(const int32_t seqid);
  void replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  int32_t send_replace_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::string& dashboard_name, const std::string& dashboard_owner, const std::string& dashboard_state, const std::string& image_hash, const std::string& dashboard_metadata);
  void recv_replace_dashboard(const int32_t seqid);
  void delete_dashboard(const TSessionId& session, const int32_t dashboard_id);
  int32_t send_delete_dashboard(const TSessionId& session, const int32_t dashboard_id);
  void recv_delete_dashboard(const int32_t seqid);
  void share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role);
  int32_t send_share_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions, const bool grant_role);
  void recv_share_dashboard(const int32_t seqid);
  void unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions);
  int32_t send_unshare_dashboard(const TSessionId& session, const int32_t dashboard_id, const std::vector<std::string> & groups, const std::vector<std::string> & objects, const TDashboardPermissions& permissions);
  void recv_unshare_dashboard(const int32_t seqid);
  void get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const TSessionId& session, const int32_t dashboard_id);
  int32_t send_get_dashboard_grantees(const TSessionId& session, const int32_t dashboard_id);
  void recv_get_dashboard_grantees(std::vector<TDashboardGrantees> & _return, const int32_t seqid);
  void get_link_view(TFrontendView& _return, const TSessionId& session, const std::string& link);
  int32_t send_get_link_view(const TSessionId& session, const std::string& link);
  void recv_get_link_view(TFrontendView& _return, const int32_t seqid);
  void create_link(std::string& _return, const TSessionId& session, const std::string& view_state, const std::string& view_metadata);
  int32_t send_create_link(const TSessionId& session, const std::string& view_state, const std::string& view_metadata);
  void recv_create_link(std::string& _return, const int32_t seqid);
  void load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows);
  int32_t send_load_table_binary(const TSessionId& session, const std::string& table_name, const std::vector<TRow> & rows);
  void recv_load_table_binary(const int32_t seqid);
  void load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols);
  int32_t send_load_table_binary_columnar(const TSessionId& session, const std::string& table_name, const std::vector<TColumn> & cols);
  void recv_load_table_binary_columnar(const int32_t seqid);
  void load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream);
  int32_t send_load_table_binary_arrow(const TSessionId& session, const std::string& table_name, const std::string& arrow_stream);
  void recv_load_table_binary_arrow(const int32_t seqid);
  void load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows);
  int32_t send_load_table(const TSessionId& session, const std::string& table_name, const std::vector<TStringRow> & rows);
  void recv_load_table(const int32_t seqid);
  void detect_column_types(TDetectResult& _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  int32_t send_detect_column_types(const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void recv_detect_column_types(TDetectResult& _return, const int32_t seqid);
  void create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params);
  int32_t send_create_table(const TSessionId& session, const std::string& table_name, const TRowDescriptor& row_desc, const TFileType::type file_type, const TCreateParams& create_params);
  void recv_create_table(const int32_t seqid);
  void import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params);
  int32_t send_import_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params);
  void recv_import_table(const int32_t seqid);
  void import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params);
  int32_t send_import_geo_table(const TSessionId& session, const std::string& table_name, const std::string& file_name, const TCopyParams& copy_params, const TRowDescriptor& row_desc, const TCreateParams& create_params);
  void recv_import_geo_table(const int32_t seqid);
  void import_table_status(TImportStatus& _return, const TSessionId& session, const std::string& import_id);
  int32_t send_import_table_status(const TSessionId& session, const std::string& import_id);
  void recv_import_table_status(TImportStatus& _return, const int32_t seqid);
  void get_first_geo_file_in_archive(std::string& _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  int32_t send_get_first_geo_file_in_archive(const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void recv_get_first_geo_file_in_archive(std::string& _return, const int32_t seqid);
  void get_all_files_in_archive(std::vector<std::string> & _return, const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  int32_t send_get_all_files_in_archive(const TSessionId& session, const std::string& archive_path, const TCopyParams& copy_params);
  void recv_get_all_files_in_archive(std::vector<std::string> & _return, const int32_t seqid);
  void get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  int32_t send_get_layers_in_geo_file(const TSessionId& session, const std::string& file_name, const TCopyParams& copy_params);
  void recv_get_layers_in_geo_file(std::vector<TGeoFileLayerInfo> & _return, const int32_t seqid);
  void check_table_consistency(TTableMeta& _return, const TSessionId& session, const int32_t table_id);
  int32_t send_check_table_consistency(const TSessionId& session, const int32_t table_id);
  void recv_check_table_consistency(TTableMeta& _return, const int32_t seqid);
  void start_query(TPendingQuery& _return, const TSessionId& session, const std::string& query_ra, const bool just_explain);
  int32_t send_start_query(const TSessionId& session, const std::string& query_ra, const bool just_explain);
  void recv_start_query(TPendingQuery& _return, const int32_t seqid);
  void execute_first_step(TStepResult& _return, const TPendingQuery& pending_query);
  int32_t send_execute_first_step(const TPendingQuery& pending_query);
  void recv_execute_first_step(TStepResult& _return, const int32_t seqid);
  void broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id);
  int32_t send_broadcast_serialized_rows(const  ::TSerializedRows& serialized_rows, const TRowDescriptor& row_desc, const TQueryId query_id);
  void recv_broadcast_serialized_rows(const int32_t seqid);
  void start_render_query(TPendingRenderQuery& _return, const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json);
  int32_t send_start_render_query(const TSessionId& session, const int64_t widget_id, const int16_t node_idx, const std::string& vega_json);
  void recv_start_render_query(TPendingRenderQuery& _return, const int32_t seqid);
  void execute_next_render_step(TRenderStepResult& _return, const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data);
  int32_t send_execute_next_render_step(const TPendingRenderQuery& pending_render, const TRenderAggDataMap& merged_data);
  void recv_execute_next_render_step(TRenderStepResult& _return, const int32_t seqid);
  void insert_data(const TSessionId& session, const TInsertData& insert_data);
  int32_t send_insert_data(const TSessionId& session, const TInsertData& insert_data);
  void recv_insert_data(const int32_t seqid);
  void checkpoint(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  int32_t send_checkpoint(const TSessionId& session, const int32_t db_id, const int32_t table_id);
  void recv_checkpoint(const int32_t seqid);
  void get_table_descriptor(TTableDescriptor& _return, const TSessionId& session, const std::string& table_name);
  int32_t send_get_table_descriptor(const TSessionId& session, const std::string& table_name);
  void recv_get_table_descriptor(TTableDescriptor& _return, const int32_t seqid);
  void get_row_descriptor(TRowDescriptor& _return, const TSessionId& session, const std::string& table_name);
  int32_t send_get_row_descriptor(const TSessionId& session, const std::string& table_name);
  void recv_get_row_descriptor(TRowDescriptor& _return, const int32_t seqid);
  void get_roles(std::vector<std::string> & _return, const TSessionId& session);
  int32_t send_get_roles(const TSessionId& session);
  void recv_get_roles(std::vector<std::string> & _return, const int32_t seqid);
  void get_db_objects_for_grantee(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& roleName);
  int32_t send_get_db_objects_for_grantee(const TSessionId& session, const std::string& roleName);
  void recv_get_db_objects_for_grantee(std::vector<TDBObject> & _return, const int32_t seqid);
  void get_db_object_privs(std::vector<TDBObject> & _return, const TSessionId& session, const std::string& objectName, const TDBObjectType::type type);
  int32_t send_get_db_object_privs(const TSessionId& session, const std::string& objectName, const TDBObjectType::type type);
  void recv_get_db_object_privs(std::vector<TDBObject> & _return, const int32_t seqid);
  void get_all_roles_for_user(std::vector<std::string> & _return, const TSessionId& session, const std::string& userName);
  int32_t send_get_all_roles_for_user(const TSessionId& session, const std::string& userName);
  void recv_get_all_roles_for_user(std::vector<std::string> & _return, const int32_t seqid);
  bool has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions);
  int32_t send_has_object_privilege(const TSessionId& session, const std::string& granteeName, const std::string& ObjectName, const TDBObjectType::type objectType, const TDBObjectPermissions& permissions);
  bool recv_has_object_privilege(const int32_t seqid);
  void set_license_key(TLicenseInfo& _return, const TSessionId& session, const std::string& key, const std::string& nonce);
  int32_t send_set_license_key(const TSessionId& session, const std::string& key, const std::string& nonce);
  void recv_set_license_key(TLicenseInfo& _return, const int32_t seqid);
  void get_license_claims(TLicenseInfo& _return, const TSessionId& session, const std::string& nonce);
  int32_t send_get_license_claims(const TSessionId& session, const std::string& nonce);
  void recv_get_license_claims(TLicenseInfo& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
