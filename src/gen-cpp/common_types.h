/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_TYPES_H
#define common_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct TDeviceType {
  enum type {
    CPU = 0,
    GPU = 1
  };
};

extern const std::map<int, const char*> _TDeviceType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDeviceType::type& val);

struct TDatumType {
  enum type {
    SMALLINT = 0,
    INT = 1,
    BIGINT = 2,
    FLOAT = 3,
    DECIMAL = 4,
    DOUBLE = 5,
    STR = 6,
    TIME = 7,
    TIMESTAMP = 8,
    DATE = 9,
    BOOL = 10,
    INTERVAL_DAY_TIME = 11,
    INTERVAL_YEAR_MONTH = 12,
    POINT = 13,
    LINESTRING = 14,
    POLYGON = 15,
    MULTIPOLYGON = 16,
    TINYINT = 17,
    GEOMETRY = 18,
    GEOGRAPHY = 19
  };
};

extern const std::map<int, const char*> _TDatumType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDatumType::type& val);

struct TEncodingType {
  enum type {
    NONE = 0,
    FIXED = 1,
    RL = 2,
    DIFF = 3,
    DICT = 4,
    SPARSE = 5,
    GEOINT = 6,
    DATE_IN_DAYS = 7
  };
};

extern const std::map<int, const char*> _TEncodingType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TEncodingType::type& val);

class TTypeInfo;

typedef struct _TTypeInfo__isset {
  _TTypeInfo__isset() : type(false), encoding(false), nullable(false), is_array(false), precision(false), scale(false), comp_param(false), size(true) {}
  bool type :1;
  bool encoding :1;
  bool nullable :1;
  bool is_array :1;
  bool precision :1;
  bool scale :1;
  bool comp_param :1;
  bool size :1;
} _TTypeInfo__isset;

class TTypeInfo : public virtual ::apache::thrift::TBase {
 public:

  TTypeInfo(const TTypeInfo&);
  TTypeInfo& operator=(const TTypeInfo&);
  TTypeInfo() : type((TDatumType::type)0), encoding((TEncodingType::type)0), nullable(0), is_array(0), precision(0), scale(0), comp_param(0), size(-1) {
  }

  virtual ~TTypeInfo() throw();
  TDatumType::type type;
  TEncodingType::type encoding;
  bool nullable;
  bool is_array;
  int32_t precision;
  int32_t scale;
  int32_t comp_param;
  int32_t size;

  _TTypeInfo__isset __isset;

  void __set_type(const TDatumType::type val);

  void __set_encoding(const TEncodingType::type val);

  void __set_nullable(const bool val);

  void __set_is_array(const bool val);

  void __set_precision(const int32_t val);

  void __set_scale(const int32_t val);

  void __set_comp_param(const int32_t val);

  void __set_size(const int32_t val);

  bool operator == (const TTypeInfo & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(encoding == rhs.encoding))
      return false;
    if (!(nullable == rhs.nullable))
      return false;
    if (!(is_array == rhs.is_array))
      return false;
    if (!(precision == rhs.precision))
      return false;
    if (!(scale == rhs.scale))
      return false;
    if (!(comp_param == rhs.comp_param))
      return false;
    if (__isset.size != rhs.__isset.size)
      return false;
    else if (__isset.size && !(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const TTypeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTypeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTypeInfo &a, TTypeInfo &b);

std::ostream& operator<<(std::ostream& out, const TTypeInfo& obj);



#endif
