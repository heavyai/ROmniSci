/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef completion_hints_TYPES_H
#define completion_hints_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct TCompletionHintType {
  enum type {
    COLUMN = 0,
    TABLE = 1,
    VIEW = 2,
    SCHEMA = 3,
    CATALOG = 4,
    REPOSITORY = 5,
    FUNCTION = 6,
    KEYWORD = 7
  };
};

extern const std::map<int, const char*> _TCompletionHintType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TCompletionHintType::type& val);

class TCompletionHint;

typedef struct _TCompletionHint__isset {
  _TCompletionHint__isset() : type(false), hints(false), replaced(false) {}
  bool type :1;
  bool hints :1;
  bool replaced :1;
} _TCompletionHint__isset;

class TCompletionHint : public virtual ::apache::thrift::TBase {
 public:

  TCompletionHint(const TCompletionHint&);
  TCompletionHint& operator=(const TCompletionHint&);
  TCompletionHint() : type((TCompletionHintType::type)0), replaced() {
  }

  virtual ~TCompletionHint() throw();
  TCompletionHintType::type type;
  std::vector<std::string>  hints;
  std::string replaced;

  _TCompletionHint__isset __isset;

  void __set_type(const TCompletionHintType::type val);

  void __set_hints(const std::vector<std::string> & val);

  void __set_replaced(const std::string& val);

  bool operator == (const TCompletionHint & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(hints == rhs.hints))
      return false;
    if (!(replaced == rhs.replaced))
      return false;
    return true;
  }
  bool operator != (const TCompletionHint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCompletionHint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCompletionHint &a, TCompletionHint &b);

std::ostream& operator<<(std::ostream& out, const TCompletionHint& obj);



#endif
