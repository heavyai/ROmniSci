/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef extension_functions_TYPES_H
#define extension_functions_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct TExtArgumentType {
  enum type {
    Int8 = 0,
    Int16 = 1,
    Int32 = 2,
    Int64 = 3,
    Float = 4,
    Double = 5,
    Void = 6,
    PInt8 = 7,
    PInt16 = 8,
    PInt32 = 9,
    PInt64 = 10,
    PFloat = 11,
    PDouble = 12,
    Bool = 13,
    ArrayInt8 = 14,
    ArrayInt16 = 15,
    ArrayInt32 = 16,
    ArrayInt64 = 17,
    ArrayFloat = 18,
    ArrayDouble = 19,
    GeoPoint = 20,
    Cursor = 21
  };
};

extern const std::map<int, const char*> _TExtArgumentType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TExtArgumentType::type& val);

struct TOutputBufferSizeType {
  enum type {
    kUserSpecifiedConstantParameter = 0,
    kUserSpecifiedRowMultiplier = 1,
    kConstant = 2
  };
};

extern const std::map<int, const char*> _TOutputBufferSizeType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TOutputBufferSizeType::type& val);

class TUserDefinedFunction;

class TUserDefinedTableFunction;

typedef struct _TUserDefinedFunction__isset {
  _TUserDefinedFunction__isset() : name(false), argTypes(false), retType(false) {}
  bool name :1;
  bool argTypes :1;
  bool retType :1;
} _TUserDefinedFunction__isset;

class TUserDefinedFunction : public virtual ::apache::thrift::TBase {
 public:

  TUserDefinedFunction(const TUserDefinedFunction&);
  TUserDefinedFunction& operator=(const TUserDefinedFunction&);
  TUserDefinedFunction() : name(), retType((TExtArgumentType::type)0) {
  }

  virtual ~TUserDefinedFunction() throw();
  std::string name;
  std::vector<TExtArgumentType::type>  argTypes;
  TExtArgumentType::type retType;

  _TUserDefinedFunction__isset __isset;

  void __set_name(const std::string& val);

  void __set_argTypes(const std::vector<TExtArgumentType::type> & val);

  void __set_retType(const TExtArgumentType::type val);

  bool operator == (const TUserDefinedFunction & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(argTypes == rhs.argTypes))
      return false;
    if (!(retType == rhs.retType))
      return false;
    return true;
  }
  bool operator != (const TUserDefinedFunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUserDefinedFunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUserDefinedFunction &a, TUserDefinedFunction &b);

std::ostream& operator<<(std::ostream& out, const TUserDefinedFunction& obj);

typedef struct _TUserDefinedTableFunction__isset {
  _TUserDefinedTableFunction__isset() : name(false), sizerType(false), sizerArgPos(false), inputArgTypes(false), outputArgTypes(false), sqlArgTypes(false) {}
  bool name :1;
  bool sizerType :1;
  bool sizerArgPos :1;
  bool inputArgTypes :1;
  bool outputArgTypes :1;
  bool sqlArgTypes :1;
} _TUserDefinedTableFunction__isset;

class TUserDefinedTableFunction : public virtual ::apache::thrift::TBase {
 public:

  TUserDefinedTableFunction(const TUserDefinedTableFunction&);
  TUserDefinedTableFunction& operator=(const TUserDefinedTableFunction&);
  TUserDefinedTableFunction() : name(), sizerType((TOutputBufferSizeType::type)0), sizerArgPos(0) {
  }

  virtual ~TUserDefinedTableFunction() throw();
  std::string name;
  TOutputBufferSizeType::type sizerType;
  int32_t sizerArgPos;
  std::vector<TExtArgumentType::type>  inputArgTypes;
  std::vector<TExtArgumentType::type>  outputArgTypes;
  std::vector<TExtArgumentType::type>  sqlArgTypes;

  _TUserDefinedTableFunction__isset __isset;

  void __set_name(const std::string& val);

  void __set_sizerType(const TOutputBufferSizeType::type val);

  void __set_sizerArgPos(const int32_t val);

  void __set_inputArgTypes(const std::vector<TExtArgumentType::type> & val);

  void __set_outputArgTypes(const std::vector<TExtArgumentType::type> & val);

  void __set_sqlArgTypes(const std::vector<TExtArgumentType::type> & val);

  bool operator == (const TUserDefinedTableFunction & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(sizerType == rhs.sizerType))
      return false;
    if (!(sizerArgPos == rhs.sizerArgPos))
      return false;
    if (!(inputArgTypes == rhs.inputArgTypes))
      return false;
    if (!(outputArgTypes == rhs.outputArgTypes))
      return false;
    if (!(sqlArgTypes == rhs.sqlArgTypes))
      return false;
    return true;
  }
  bool operator != (const TUserDefinedTableFunction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUserDefinedTableFunction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUserDefinedTableFunction &a, TUserDefinedTableFunction &b);

std::ostream& operator<<(std::ostream& out, const TUserDefinedTableFunction& obj);



#endif
