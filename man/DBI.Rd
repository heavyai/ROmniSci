% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Driver.R, R/Connection.R, R/Result.R
\docType{class}
\name{DBI}
\alias{DBI}
\alias{OmniSciDriver-class}
\alias{show,OmniSciDriver-method}
\alias{dbConnect,OmniSciDriver-method}
\alias{dbDataType,OmniSciDriver,ANY-method}
\alias{dbDataType,OmniSciDriver,list-method}
\alias{OmniSciConnection-class}
\alias{show,OmniSciConnection-method}
\alias{dbIsValid,OmniSciConnection-method}
\alias{dbDisconnect,OmniSciConnection-method}
\alias{dbSendQuery,OmniSciConnection,character-method}
\alias{dbSendStatement,OmniSciConnection,character-method}
\alias{dbDataType,OmniSciConnection,ANY-method}
\alias{dbQuoteString,OmniSciConnection,character-method}
\alias{dbQuoteIdentifier,OmniSciConnection,character-method}
\alias{dbWriteTable,OmniSciConnection,character,data.frame-method}
\alias{dbReadTable,OmniSciConnection,character-method}
\alias{dbListTables,OmniSciConnection-method}
\alias{dbExistsTable,OmniSciConnection,character-method}
\alias{dbListFields,OmniSciConnection,character-method}
\alias{dbRemoveTable,OmniSciConnection,character-method}
\alias{dbGetInfo,OmniSciConnection-method}
\alias{dbBegin,OmniSciConnection-method}
\alias{dbCommit,OmniSciConnection-method}
\alias{dbRollback,OmniSciConnection-method}
\alias{OmniSciResult-class}
\alias{show,OmniSciResult-method}
\alias{dbClearResult,OmniSciResult-method}
\alias{dbFetch,OmniSciResult-method}
\alias{dbHasCompleted,OmniSciResult-method}
\alias{dbGetInfo,OmniSciResult-method}
\alias{dbIsValid,OmniSciResult-method}
\alias{dbGetStatement,OmniSciResult-method}
\alias{dbColumnInfo,OmniSciResult-method}
\alias{dbGetRowCount,OmniSciResult-method}
\alias{dbGetRowsAffected,OmniSciResult-method}
\alias{dbBind,OmniSciResult-method}
\title{DBI methods}
\usage{
\S4method{show}{OmniSciDriver}(object)

\S4method{dbConnect}{OmniSciDriver}(drv, ...)

\S4method{dbDataType}{OmniSciDriver,ANY}(dbObj, obj, ...)

\S4method{dbDataType}{OmniSciDriver,list}(dbObj, obj, ...)

\S4method{show}{OmniSciConnection}(object)

\S4method{dbIsValid}{OmniSciConnection}(dbObj, ...)

\S4method{dbDisconnect}{OmniSciConnection}(conn, ...)

\S4method{dbSendQuery}{OmniSciConnection,character}(conn, statement, ...)

\S4method{dbSendStatement}{OmniSciConnection,character}(conn, statement, ...)

\S4method{dbDataType}{OmniSciConnection,ANY}(dbObj, obj, ...)

\S4method{dbQuoteString}{OmniSciConnection,character}(conn, x, ...)

\S4method{dbQuoteIdentifier}{OmniSciConnection,character}(conn, x, ...)

\S4method{dbWriteTable}{OmniSciConnection,character,data.frame}(conn, name, value, overwrite = FALSE, append = FALSE, ...)

\S4method{dbReadTable}{OmniSciConnection,character}(conn, name, ...)

\S4method{dbListTables}{OmniSciConnection}(conn, ...)

\S4method{dbExistsTable}{OmniSciConnection,character}(conn, name, ...)

\S4method{dbListFields}{OmniSciConnection,character}(conn, name, ...)

\S4method{dbRemoveTable}{OmniSciConnection,character}(conn, name, ...)

\S4method{dbGetInfo}{OmniSciConnection}(dbObj, ...)

\S4method{dbBegin}{OmniSciConnection}(conn, ...)

\S4method{dbCommit}{OmniSciConnection}(conn, ...)

\S4method{dbRollback}{OmniSciConnection}(conn, ...)

\S4method{show}{OmniSciResult}(object)

\S4method{dbClearResult}{OmniSciResult}(res, ...)

\S4method{dbFetch}{OmniSciResult}(res, n = -1, ...)

\S4method{dbHasCompleted}{OmniSciResult}(res, ...)

\S4method{dbGetInfo}{OmniSciResult}(dbObj, ...)

\S4method{dbIsValid}{OmniSciResult}(dbObj, ...)

\S4method{dbGetStatement}{OmniSciResult}(res, ...)

\S4method{dbColumnInfo}{OmniSciResult}(res, ...)

\S4method{dbGetRowCount}{OmniSciResult}(res, ...)

\S4method{dbGetRowsAffected}{OmniSciResult}(res, ...)

\S4method{dbBind}{OmniSciResult}(res, params, ...)
}
\arguments{
\item{object}{Any R object}

\item{drv}{an object that inherits from \linkS4class{DBIDriver},
or an existing \linkS4class{DBIConnection}
object (in order to clone an existing connection).}

\item{...}{authentication arguments needed by the DBMS instance; these
typically include \code{user}, \code{password}, \code{host}, \code{port}, \code{dbname}, etc.
For details see the appropriate \code{DBIDriver}.}

\item{dbObj}{A object inheriting from \linkS4class{DBIDriver}
or \linkS4class{DBIConnection}}

\item{obj}{An R object whose SQL type we want to determine.}

\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[DBI:dbConnect]{dbConnect()}}.}

\item{statement}{a character string containing SQL.}

\item{x}{A character vector to quote as string.}

\item{name}{A character string specifying the unquoted DBMS table name,
or the result of a call to \code{\link[DBI:dbQuoteIdentifier]{dbQuoteIdentifier()}}.}

\item{value}{a \link{data.frame} (or coercible to data.frame).}

\item{overwrite}{Allow overwriting the destination table. Cannot be
`TRUE` if `append` is also `TRUE`.}

\item{append}{Allow appending to the destination table. Cannot be
`TRUE` if `overwrite` is also `TRUE`.}

\item{res}{An object inheriting from \linkS4class{DBIResult}.}

\item{n}{maximum number of records to retrieve per fetch. Use \code{n = -1}
or \code{n = Inf}
to retrieve all pending records.  Some implementations may recognize other
special values.}

\item{params}{A list of bindings, named or unnamed.}
}
\description{
Implementations of pure virtual functions defined in the `DBI` package.
}
